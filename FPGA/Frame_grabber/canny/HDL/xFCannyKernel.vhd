-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xFCannyKernel is
port (
    p_src_mat_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_mat_data_V_empty_n : IN STD_LOGIC;
    p_src_mat_data_V_read : OUT STD_LOGIC;
    p_dst_mat_data_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_dst_mat_data_V_full_n : IN STD_LOGIC;
    p_dst_mat_data_V_write : OUT STD_LOGIC;
    p_lowthreshold : IN STD_LOGIC_VECTOR (7 downto 0);
    p_highthreshold : IN STD_LOGIC_VECTOR (7 downto 0);
    img_height : IN STD_LOGIC_VECTOR (15 downto 0);
    img_width : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_lowthreshold_ap_vld : IN STD_LOGIC;
    p_highthreshold_ap_vld : IN STD_LOGIC;
    img_height_ap_vld : IN STD_LOGIC;
    img_width_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of xFCannyKernel is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal xFCannyKernel_entry2_U0_ap_start : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_start_full_n : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_ap_done : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_ap_continue : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_ap_idle : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_ap_ready : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_start_out : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_start_write : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_p_lowthreshold_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal xFCannyKernel_entry2_U0_p_lowthreshold_out_write : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_p_highthreshold_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal xFCannyKernel_entry2_U0_p_highthreshold_out_write : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_img_height_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFCannyKernel_entry2_U0_img_height_out_write : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_img_height_out1_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFCannyKernel_entry2_U0_img_height_out1_write : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_img_width_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFCannyKernel_entry2_U0_img_width_out_write : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_img_width_out2_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFCannyKernel_entry2_U0_img_width_out2_write : STD_LOGIC;
    signal xFAverageGaussianMas_U0_ap_start : STD_LOGIC;
    signal xFAverageGaussianMas_U0_ap_done : STD_LOGIC;
    signal xFAverageGaussianMas_U0_ap_continue : STD_LOGIC;
    signal xFAverageGaussianMas_U0_ap_idle : STD_LOGIC;
    signal xFAverageGaussianMas_U0_ap_ready : STD_LOGIC;
    signal xFAverageGaussianMas_U0_start_out : STD_LOGIC;
    signal xFAverageGaussianMas_U0_start_write : STD_LOGIC;
    signal xFAverageGaussianMas_U0_p_src_mat_data_V_read : STD_LOGIC;
    signal xFAverageGaussianMas_U0_p_out_mat_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal xFAverageGaussianMas_U0_p_out_mat_data_V_write : STD_LOGIC;
    signal xFAverageGaussianMas_U0_img_height_read : STD_LOGIC;
    signal xFAverageGaussianMas_U0_img_width_read : STD_LOGIC;
    signal xFAverageGaussianMas_U0_img_height_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFAverageGaussianMas_U0_img_height_out_write : STD_LOGIC;
    signal xFAverageGaussianMas_U0_img_width_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFAverageGaussianMas_U0_img_width_out_write : STD_LOGIC;
    signal xFSobel_U0_ap_start : STD_LOGIC;
    signal xFSobel_U0_ap_done : STD_LOGIC;
    signal xFSobel_U0_ap_continue : STD_LOGIC;
    signal xFSobel_U0_ap_idle : STD_LOGIC;
    signal xFSobel_U0_ap_ready : STD_LOGIC;
    signal xFSobel_U0_start_out : STD_LOGIC;
    signal xFSobel_U0_start_write : STD_LOGIC;
    signal xFSobel_U0_p_src_data_V_read : STD_LOGIC;
    signal xFSobel_U0_p_dst_data_V_din : STD_LOGIC_VECTOR (10 downto 0);
    signal xFSobel_U0_p_dst_data_V_write : STD_LOGIC;
    signal xFSobel_U0_p_dst1_data_V_din : STD_LOGIC_VECTOR (10 downto 0);
    signal xFSobel_U0_p_dst1_data_V_write : STD_LOGIC;
    signal xFSobel_U0_imgheight_read : STD_LOGIC;
    signal xFSobel_U0_imgwidth_read : STD_LOGIC;
    signal xFSobel_U0_imgheight_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFSobel_U0_imgheight_out_write : STD_LOGIC;
    signal xFSobel_U0_imgwidth_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFSobel_U0_imgwidth_out_write : STD_LOGIC;
    signal xFDuplicate_rows_U0_ap_start : STD_LOGIC;
    signal xFDuplicate_rows_U0_ap_done : STD_LOGIC;
    signal xFDuplicate_rows_U0_ap_continue : STD_LOGIC;
    signal xFDuplicate_rows_U0_ap_idle : STD_LOGIC;
    signal xFDuplicate_rows_U0_ap_ready : STD_LOGIC;
    signal xFDuplicate_rows_U0_start_out : STD_LOGIC;
    signal xFDuplicate_rows_U0_start_write : STD_LOGIC;
    signal xFDuplicate_rows_U0_p_src_mat_data_V_read : STD_LOGIC;
    signal xFDuplicate_rows_U0_p_src_mat1_data_V_read : STD_LOGIC;
    signal xFDuplicate_rows_U0_p_dst1_mat_data_V_din : STD_LOGIC_VECTOR (10 downto 0);
    signal xFDuplicate_rows_U0_p_dst1_mat_data_V_write : STD_LOGIC;
    signal xFDuplicate_rows_U0_p_dst2_mat_data_V_din : STD_LOGIC_VECTOR (10 downto 0);
    signal xFDuplicate_rows_U0_p_dst2_mat_data_V_write : STD_LOGIC;
    signal xFDuplicate_rows_U0_p_dst1_out_mat_data_V_din : STD_LOGIC_VECTOR (10 downto 0);
    signal xFDuplicate_rows_U0_p_dst1_out_mat_data_V_write : STD_LOGIC;
    signal xFDuplicate_rows_U0_p_dst2_out_mat_data_V_din : STD_LOGIC_VECTOR (10 downto 0);
    signal xFDuplicate_rows_U0_p_dst2_out_mat_data_V_write : STD_LOGIC;
    signal xFDuplicate_rows_U0_img_height_read : STD_LOGIC;
    signal xFDuplicate_rows_U0_img_width_read : STD_LOGIC;
    signal xFDuplicate_rows_U0_img_height_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFDuplicate_rows_U0_img_height_out_write : STD_LOGIC;
    signal xFDuplicate_rows_U0_img_height_out1_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFDuplicate_rows_U0_img_height_out1_write : STD_LOGIC;
    signal xFDuplicate_rows_U0_img_width_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFDuplicate_rows_U0_img_width_out_write : STD_LOGIC;
    signal xFDuplicate_rows_U0_img_width_out2_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFDuplicate_rows_U0_img_width_out2_write : STD_LOGIC;
    signal xFCannyKernel_Block_U0_ap_start : STD_LOGIC;
    signal xFCannyKernel_Block_U0_ap_done : STD_LOGIC;
    signal xFCannyKernel_Block_U0_ap_continue : STD_LOGIC;
    signal xFCannyKernel_Block_U0_ap_idle : STD_LOGIC;
    signal xFCannyKernel_Block_U0_ap_ready : STD_LOGIC;
    signal xFCannyKernel_Block_U0_start_out : STD_LOGIC;
    signal xFCannyKernel_Block_U0_start_write : STD_LOGIC;
    signal xFCannyKernel_Block_U0_img_width_read : STD_LOGIC;
    signal xFCannyKernel_Block_U0_img_height_read : STD_LOGIC;
    signal xFCannyKernel_Block_U0_imgwidth_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFCannyKernel_Block_U0_imgwidth_out_write : STD_LOGIC;
    signal xFCannyKernel_Block_U0_height_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFCannyKernel_Block_U0_height_out_write : STD_LOGIC;
    signal xFMagnitudeKernel_U0_ap_start : STD_LOGIC;
    signal xFMagnitudeKernel_U0_ap_done : STD_LOGIC;
    signal xFMagnitudeKernel_U0_ap_continue : STD_LOGIC;
    signal xFMagnitudeKernel_U0_ap_idle : STD_LOGIC;
    signal xFMagnitudeKernel_U0_ap_ready : STD_LOGIC;
    signal xFMagnitudeKernel_U0_p_src1_data_V_read : STD_LOGIC;
    signal xFMagnitudeKernel_U0_p_src2_data_V_read : STD_LOGIC;
    signal xFMagnitudeKernel_U0_p_dst_mat_data_V_din : STD_LOGIC_VECTOR (13 downto 0);
    signal xFMagnitudeKernel_U0_p_dst_mat_data_V_write : STD_LOGIC;
    signal xFMagnitudeKernel_U0_imgheight_read : STD_LOGIC;
    signal xFMagnitudeKernel_U0_imgwidth_read : STD_LOGIC;
    signal xFAngleKernel_U0_ap_start : STD_LOGIC;
    signal xFAngleKernel_U0_ap_done : STD_LOGIC;
    signal xFAngleKernel_U0_ap_continue : STD_LOGIC;
    signal xFAngleKernel_U0_ap_idle : STD_LOGIC;
    signal xFAngleKernel_U0_ap_ready : STD_LOGIC;
    signal xFAngleKernel_U0_p_src1_data_V_read : STD_LOGIC;
    signal xFAngleKernel_U0_p_src2_data_V_read : STD_LOGIC;
    signal xFAngleKernel_U0_p_dst_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal xFAngleKernel_U0_p_dst_data_V_write : STD_LOGIC;
    signal xFAngleKernel_U0_imgheight_read : STD_LOGIC;
    signal xFAngleKernel_U0_imgwidth_read : STD_LOGIC;
    signal xFSuppression3x3_U0_ap_start : STD_LOGIC;
    signal xFSuppression3x3_U0_ap_done : STD_LOGIC;
    signal xFSuppression3x3_U0_ap_continue : STD_LOGIC;
    signal xFSuppression3x3_U0_ap_idle : STD_LOGIC;
    signal xFSuppression3x3_U0_ap_ready : STD_LOGIC;
    signal xFSuppression3x3_U0_start_out : STD_LOGIC;
    signal xFSuppression3x3_U0_start_write : STD_LOGIC;
    signal xFSuppression3x3_U0_p_magnitude_mat_data_V_read : STD_LOGIC;
    signal xFSuppression3x3_U0_p_phase_mat_data_V_read : STD_LOGIC;
    signal xFSuppression3x3_U0_p_dst_mat_data_V_din : STD_LOGIC_VECTOR (1 downto 0);
    signal xFSuppression3x3_U0_p_dst_mat_data_V_write : STD_LOGIC;
    signal xFSuppression3x3_U0_low_threshold_read : STD_LOGIC;
    signal xFSuppression3x3_U0_high_threshold_read : STD_LOGIC;
    signal xFSuppression3x3_U0_imgheight_read : STD_LOGIC;
    signal xFSuppression3x3_U0_imgwidth_read : STD_LOGIC;
    signal xFSuppression3x3_U0_imgheight_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFSuppression3x3_U0_imgheight_out_write : STD_LOGIC;
    signal xFSuppression3x3_U0_imgwidth_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal xFSuppression3x3_U0_imgwidth_out_write : STD_LOGIC;
    signal xFPackNMS1096_U0_ap_start : STD_LOGIC;
    signal xFPackNMS1096_U0_ap_done : STD_LOGIC;
    signal xFPackNMS1096_U0_ap_continue : STD_LOGIC;
    signal xFPackNMS1096_U0_ap_idle : STD_LOGIC;
    signal xFPackNMS1096_U0_ap_ready : STD_LOGIC;
    signal xFPackNMS1096_U0_p_src_mat_data_V_read : STD_LOGIC;
    signal xFPackNMS1096_U0_p_dst_mat_data_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal xFPackNMS1096_U0_p_dst_mat_data_V_write : STD_LOGIC;
    signal xFPackNMS1096_U0_imgheight_read : STD_LOGIC;
    signal xFPackNMS1096_U0_imgwidth_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal p_lowthreshold_c_full_n : STD_LOGIC;
    signal p_lowthreshold_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lowthreshold_c_empty_n : STD_LOGIC;
    signal p_highthreshold_c_full_n : STD_LOGIC;
    signal p_highthreshold_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_highthreshold_c_empty_n : STD_LOGIC;
    signal img_height_c_full_n : STD_LOGIC;
    signal img_height_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_height_c_empty_n : STD_LOGIC;
    signal img_height_c19_full_n : STD_LOGIC;
    signal img_height_c19_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_height_c19_empty_n : STD_LOGIC;
    signal img_width_c_full_n : STD_LOGIC;
    signal img_width_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_width_c_empty_n : STD_LOGIC;
    signal img_width_c20_full_n : STD_LOGIC;
    signal img_width_c20_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_width_c20_empty_n : STD_LOGIC;
    signal gaussian_mat_data_V_full_n : STD_LOGIC;
    signal gaussian_mat_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal gaussian_mat_data_V_empty_n : STD_LOGIC;
    signal img_height_c21_full_n : STD_LOGIC;
    signal img_height_c21_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_height_c21_empty_n : STD_LOGIC;
    signal img_width_c22_full_n : STD_LOGIC;
    signal img_width_c22_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_width_c22_empty_n : STD_LOGIC;
    signal gradx_mat_data_V_full_n : STD_LOGIC;
    signal gradx_mat_data_V_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal gradx_mat_data_V_empty_n : STD_LOGIC;
    signal grady_mat_data_V_full_n : STD_LOGIC;
    signal grady_mat_data_V_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal grady_mat_data_V_empty_n : STD_LOGIC;
    signal img_height_c23_full_n : STD_LOGIC;
    signal img_height_c23_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_height_c23_empty_n : STD_LOGIC;
    signal img_width_c24_full_n : STD_LOGIC;
    signal img_width_c24_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_width_c24_empty_n : STD_LOGIC;
    signal gradx1_mat_data_V_full_n : STD_LOGIC;
    signal gradx1_mat_data_V_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal gradx1_mat_data_V_empty_n : STD_LOGIC;
    signal gradx2_mat_data_V_full_n : STD_LOGIC;
    signal gradx2_mat_data_V_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal gradx2_mat_data_V_empty_n : STD_LOGIC;
    signal grady1_mat_data_V_full_n : STD_LOGIC;
    signal grady1_mat_data_V_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal grady1_mat_data_V_empty_n : STD_LOGIC;
    signal grady2_mat_data_V_full_n : STD_LOGIC;
    signal grady2_mat_data_V_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal grady2_mat_data_V_empty_n : STD_LOGIC;
    signal img_height_c25_full_n : STD_LOGIC;
    signal img_height_c25_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_height_c25_empty_n : STD_LOGIC;
    signal img_height_c26_full_n : STD_LOGIC;
    signal img_height_c26_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_height_c26_empty_n : STD_LOGIC;
    signal img_width_c27_full_n : STD_LOGIC;
    signal img_width_c27_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_width_c27_empty_n : STD_LOGIC;
    signal img_width_c28_full_n : STD_LOGIC;
    signal img_width_c28_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_width_c28_empty_n : STD_LOGIC;
    signal imgwidth_c_full_n : STD_LOGIC;
    signal imgwidth_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal imgwidth_c_empty_n : STD_LOGIC;
    signal height_c_full_n : STD_LOGIC;
    signal height_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal height_c_empty_n : STD_LOGIC;
    signal magnitude_mat_data_V_full_n : STD_LOGIC;
    signal magnitude_mat_data_V_dout : STD_LOGIC_VECTOR (13 downto 0);
    signal magnitude_mat_data_V_empty_n : STD_LOGIC;
    signal phase_mat_data_V_full_n : STD_LOGIC;
    signal phase_mat_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal phase_mat_data_V_empty_n : STD_LOGIC;
    signal nms_mat_data_V_full_n : STD_LOGIC;
    signal nms_mat_data_V_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal nms_mat_data_V_empty_n : STD_LOGIC;
    signal img_height_c29_full_n : STD_LOGIC;
    signal img_height_c29_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_height_c29_empty_n : STD_LOGIC;
    signal img_width_c30_full_n : STD_LOGIC;
    signal img_width_c30_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal img_width_c30_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_xFCannyKernel_entry2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_xFCannyKernel_entry2_U0_ap_ready : STD_LOGIC;
    signal xFCannyKernel_entry2_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_xFAverageGaussianMas_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_xFAverageGaussianMas_U0_ap_ready : STD_LOGIC;
    signal xFAverageGaussianMas_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_xFCannyKernel_Block_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFCannyKernel_Block_U0_full_n : STD_LOGIC;
    signal start_for_xFCannyKernel_Block_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFCannyKernel_Block_U0_empty_n : STD_LOGIC;
    signal start_for_xFSuppression3x3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFSuppression3x3_U0_full_n : STD_LOGIC;
    signal start_for_xFSuppression3x3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFSuppression3x3_U0_empty_n : STD_LOGIC;
    signal start_for_xFSobel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFSobel_U0_full_n : STD_LOGIC;
    signal start_for_xFSobel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFSobel_U0_empty_n : STD_LOGIC;
    signal start_for_xFDuplicate_rows_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFDuplicate_rows_U0_full_n : STD_LOGIC;
    signal start_for_xFDuplicate_rows_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFDuplicate_rows_U0_empty_n : STD_LOGIC;
    signal start_for_xFAngleKernel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFAngleKernel_U0_full_n : STD_LOGIC;
    signal start_for_xFAngleKernel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFAngleKernel_U0_empty_n : STD_LOGIC;
    signal start_for_xFMagnitudeKernel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFMagnitudeKernel_U0_full_n : STD_LOGIC;
    signal start_for_xFMagnitudeKernel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFMagnitudeKernel_U0_empty_n : STD_LOGIC;
    signal xFMagnitudeKernel_U0_start_full_n : STD_LOGIC;
    signal xFMagnitudeKernel_U0_start_write : STD_LOGIC;
    signal xFAngleKernel_U0_start_full_n : STD_LOGIC;
    signal xFAngleKernel_U0_start_write : STD_LOGIC;
    signal start_for_xFPackNMS1096_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFPackNMS1096_U0_full_n : STD_LOGIC;
    signal start_for_xFPackNMS1096_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFPackNMS1096_U0_empty_n : STD_LOGIC;
    signal xFPackNMS1096_U0_start_full_n : STD_LOGIC;
    signal xFPackNMS1096_U0_start_write : STD_LOGIC;

    component xFCannyKernel_entry2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_lowthreshold : IN STD_LOGIC_VECTOR (7 downto 0);
        p_highthreshold : IN STD_LOGIC_VECTOR (7 downto 0);
        img_height : IN STD_LOGIC_VECTOR (15 downto 0);
        img_width : IN STD_LOGIC_VECTOR (15 downto 0);
        p_lowthreshold_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_lowthreshold_out_full_n : IN STD_LOGIC;
        p_lowthreshold_out_write : OUT STD_LOGIC;
        p_highthreshold_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_highthreshold_out_full_n : IN STD_LOGIC;
        p_highthreshold_out_write : OUT STD_LOGIC;
        img_height_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_height_out_full_n : IN STD_LOGIC;
        img_height_out_write : OUT STD_LOGIC;
        img_height_out1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_height_out1_full_n : IN STD_LOGIC;
        img_height_out1_write : OUT STD_LOGIC;
        img_width_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_width_out_full_n : IN STD_LOGIC;
        img_width_out_write : OUT STD_LOGIC;
        img_width_out2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_width_out2_full_n : IN STD_LOGIC;
        img_width_out2_write : OUT STD_LOGIC );
    end component;


    component xFAverageGaussianMas IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_mat_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_mat_data_V_empty_n : IN STD_LOGIC;
        p_src_mat_data_V_read : OUT STD_LOGIC;
        p_out_mat_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_out_mat_data_V_full_n : IN STD_LOGIC;
        p_out_mat_data_V_write : OUT STD_LOGIC;
        img_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_height_empty_n : IN STD_LOGIC;
        img_height_read : OUT STD_LOGIC;
        img_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_width_empty_n : IN STD_LOGIC;
        img_width_read : OUT STD_LOGIC;
        img_height_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_height_out_full_n : IN STD_LOGIC;
        img_height_out_write : OUT STD_LOGIC;
        img_width_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_width_out_full_n : IN STD_LOGIC;
        img_width_out_write : OUT STD_LOGIC );
    end component;


    component xFSobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_V_empty_n : IN STD_LOGIC;
        p_src_data_V_read : OUT STD_LOGIC;
        p_dst_data_V_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_dst_data_V_full_n : IN STD_LOGIC;
        p_dst_data_V_write : OUT STD_LOGIC;
        p_dst1_data_V_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_dst1_data_V_full_n : IN STD_LOGIC;
        p_dst1_data_V_write : OUT STD_LOGIC;
        imgheight_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        imgheight_empty_n : IN STD_LOGIC;
        imgheight_read : OUT STD_LOGIC;
        imgwidth_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        imgwidth_empty_n : IN STD_LOGIC;
        imgwidth_read : OUT STD_LOGIC;
        imgheight_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        imgheight_out_full_n : IN STD_LOGIC;
        imgheight_out_write : OUT STD_LOGIC;
        imgwidth_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        imgwidth_out_full_n : IN STD_LOGIC;
        imgwidth_out_write : OUT STD_LOGIC );
    end component;


    component xFDuplicate_rows IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_mat_data_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_mat_data_V_empty_n : IN STD_LOGIC;
        p_src_mat_data_V_read : OUT STD_LOGIC;
        p_src_mat1_data_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_mat1_data_V_empty_n : IN STD_LOGIC;
        p_src_mat1_data_V_read : OUT STD_LOGIC;
        p_dst1_mat_data_V_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_dst1_mat_data_V_full_n : IN STD_LOGIC;
        p_dst1_mat_data_V_write : OUT STD_LOGIC;
        p_dst2_mat_data_V_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_dst2_mat_data_V_full_n : IN STD_LOGIC;
        p_dst2_mat_data_V_write : OUT STD_LOGIC;
        p_dst1_out_mat_data_V_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_dst1_out_mat_data_V_full_n : IN STD_LOGIC;
        p_dst1_out_mat_data_V_write : OUT STD_LOGIC;
        p_dst2_out_mat_data_V_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_dst2_out_mat_data_V_full_n : IN STD_LOGIC;
        p_dst2_out_mat_data_V_write : OUT STD_LOGIC;
        img_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_height_empty_n : IN STD_LOGIC;
        img_height_read : OUT STD_LOGIC;
        img_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_width_empty_n : IN STD_LOGIC;
        img_width_read : OUT STD_LOGIC;
        img_height_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_height_out_full_n : IN STD_LOGIC;
        img_height_out_write : OUT STD_LOGIC;
        img_height_out1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_height_out1_full_n : IN STD_LOGIC;
        img_height_out1_write : OUT STD_LOGIC;
        img_width_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_width_out_full_n : IN STD_LOGIC;
        img_width_out_write : OUT STD_LOGIC;
        img_width_out2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_width_out2_full_n : IN STD_LOGIC;
        img_width_out2_write : OUT STD_LOGIC );
    end component;


    component xFCannyKernel_Block_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        img_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_width_empty_n : IN STD_LOGIC;
        img_width_read : OUT STD_LOGIC;
        img_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        img_height_empty_n : IN STD_LOGIC;
        img_height_read : OUT STD_LOGIC;
        imgwidth_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        imgwidth_out_full_n : IN STD_LOGIC;
        imgwidth_out_write : OUT STD_LOGIC;
        height_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        height_out_full_n : IN STD_LOGIC;
        height_out_write : OUT STD_LOGIC );
    end component;


    component xFMagnitudeKernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src1_data_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src1_data_V_empty_n : IN STD_LOGIC;
        p_src1_data_V_read : OUT STD_LOGIC;
        p_src2_data_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src2_data_V_empty_n : IN STD_LOGIC;
        p_src2_data_V_read : OUT STD_LOGIC;
        p_dst_mat_data_V_din : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_dst_mat_data_V_full_n : IN STD_LOGIC;
        p_dst_mat_data_V_write : OUT STD_LOGIC;
        imgheight_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        imgheight_empty_n : IN STD_LOGIC;
        imgheight_read : OUT STD_LOGIC;
        imgwidth_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        imgwidth_empty_n : IN STD_LOGIC;
        imgwidth_read : OUT STD_LOGIC );
    end component;


    component xFAngleKernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src1_data_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src1_data_V_empty_n : IN STD_LOGIC;
        p_src1_data_V_read : OUT STD_LOGIC;
        p_src2_data_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src2_data_V_empty_n : IN STD_LOGIC;
        p_src2_data_V_read : OUT STD_LOGIC;
        p_dst_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_V_full_n : IN STD_LOGIC;
        p_dst_data_V_write : OUT STD_LOGIC;
        imgheight_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        imgheight_empty_n : IN STD_LOGIC;
        imgheight_read : OUT STD_LOGIC;
        imgwidth_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        imgwidth_empty_n : IN STD_LOGIC;
        imgwidth_read : OUT STD_LOGIC );
    end component;


    component xFSuppression3x3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_magnitude_mat_data_V_dout : IN STD_LOGIC_VECTOR (13 downto 0);
        p_magnitude_mat_data_V_empty_n : IN STD_LOGIC;
        p_magnitude_mat_data_V_read : OUT STD_LOGIC;
        p_phase_mat_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_phase_mat_data_V_empty_n : IN STD_LOGIC;
        p_phase_mat_data_V_read : OUT STD_LOGIC;
        p_dst_mat_data_V_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        p_dst_mat_data_V_full_n : IN STD_LOGIC;
        p_dst_mat_data_V_write : OUT STD_LOGIC;
        low_threshold_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        low_threshold_empty_n : IN STD_LOGIC;
        low_threshold_read : OUT STD_LOGIC;
        high_threshold_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        high_threshold_empty_n : IN STD_LOGIC;
        high_threshold_read : OUT STD_LOGIC;
        imgheight_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        imgheight_empty_n : IN STD_LOGIC;
        imgheight_read : OUT STD_LOGIC;
        imgwidth_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        imgwidth_empty_n : IN STD_LOGIC;
        imgwidth_read : OUT STD_LOGIC;
        imgheight_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        imgheight_out_full_n : IN STD_LOGIC;
        imgheight_out_write : OUT STD_LOGIC;
        imgwidth_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        imgwidth_out_full_n : IN STD_LOGIC;
        imgwidth_out_write : OUT STD_LOGIC );
    end component;


    component xFPackNMS1096 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_mat_data_V_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_mat_data_V_empty_n : IN STD_LOGIC;
        p_src_mat_data_V_read : OUT STD_LOGIC;
        p_dst_mat_data_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        p_dst_mat_data_V_full_n : IN STD_LOGIC;
        p_dst_mat_data_V_write : OUT STD_LOGIC;
        imgheight_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        imgheight_empty_n : IN STD_LOGIC;
        imgheight_read : OUT STD_LOGIC;
        imgwidth_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        imgwidth_empty_n : IN STD_LOGIC;
        imgwidth_read : OUT STD_LOGIC );
    end component;


    component fifo_w8_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w11_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w14_d5760_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (13 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (13 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w2_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xFCannyncg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xFSupprocq IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xFSobelpcA IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xFDupliqcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xFAnglercU IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xFMagnisc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xFPackNtde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    xFCannyKernel_entry2_U0 : component xFCannyKernel_entry2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFCannyKernel_entry2_U0_ap_start,
        start_full_n => xFCannyKernel_entry2_U0_start_full_n,
        ap_done => xFCannyKernel_entry2_U0_ap_done,
        ap_continue => xFCannyKernel_entry2_U0_ap_continue,
        ap_idle => xFCannyKernel_entry2_U0_ap_idle,
        ap_ready => xFCannyKernel_entry2_U0_ap_ready,
        start_out => xFCannyKernel_entry2_U0_start_out,
        start_write => xFCannyKernel_entry2_U0_start_write,
        p_lowthreshold => p_lowthreshold,
        p_highthreshold => p_highthreshold,
        img_height => img_height,
        img_width => img_width,
        p_lowthreshold_out_din => xFCannyKernel_entry2_U0_p_lowthreshold_out_din,
        p_lowthreshold_out_full_n => p_lowthreshold_c_full_n,
        p_lowthreshold_out_write => xFCannyKernel_entry2_U0_p_lowthreshold_out_write,
        p_highthreshold_out_din => xFCannyKernel_entry2_U0_p_highthreshold_out_din,
        p_highthreshold_out_full_n => p_highthreshold_c_full_n,
        p_highthreshold_out_write => xFCannyKernel_entry2_U0_p_highthreshold_out_write,
        img_height_out_din => xFCannyKernel_entry2_U0_img_height_out_din,
        img_height_out_full_n => img_height_c_full_n,
        img_height_out_write => xFCannyKernel_entry2_U0_img_height_out_write,
        img_height_out1_din => xFCannyKernel_entry2_U0_img_height_out1_din,
        img_height_out1_full_n => img_height_c19_full_n,
        img_height_out1_write => xFCannyKernel_entry2_U0_img_height_out1_write,
        img_width_out_din => xFCannyKernel_entry2_U0_img_width_out_din,
        img_width_out_full_n => img_width_c_full_n,
        img_width_out_write => xFCannyKernel_entry2_U0_img_width_out_write,
        img_width_out2_din => xFCannyKernel_entry2_U0_img_width_out2_din,
        img_width_out2_full_n => img_width_c20_full_n,
        img_width_out2_write => xFCannyKernel_entry2_U0_img_width_out2_write);

    xFAverageGaussianMas_U0 : component xFAverageGaussianMas
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFAverageGaussianMas_U0_ap_start,
        start_full_n => start_for_xFSobel_U0_full_n,
        ap_done => xFAverageGaussianMas_U0_ap_done,
        ap_continue => xFAverageGaussianMas_U0_ap_continue,
        ap_idle => xFAverageGaussianMas_U0_ap_idle,
        ap_ready => xFAverageGaussianMas_U0_ap_ready,
        start_out => xFAverageGaussianMas_U0_start_out,
        start_write => xFAverageGaussianMas_U0_start_write,
        p_src_mat_data_V_dout => p_src_mat_data_V_dout,
        p_src_mat_data_V_empty_n => p_src_mat_data_V_empty_n,
        p_src_mat_data_V_read => xFAverageGaussianMas_U0_p_src_mat_data_V_read,
        p_out_mat_data_V_din => xFAverageGaussianMas_U0_p_out_mat_data_V_din,
        p_out_mat_data_V_full_n => gaussian_mat_data_V_full_n,
        p_out_mat_data_V_write => xFAverageGaussianMas_U0_p_out_mat_data_V_write,
        img_height_dout => img_height_c_dout,
        img_height_empty_n => img_height_c_empty_n,
        img_height_read => xFAverageGaussianMas_U0_img_height_read,
        img_width_dout => img_width_c_dout,
        img_width_empty_n => img_width_c_empty_n,
        img_width_read => xFAverageGaussianMas_U0_img_width_read,
        img_height_out_din => xFAverageGaussianMas_U0_img_height_out_din,
        img_height_out_full_n => img_height_c21_full_n,
        img_height_out_write => xFAverageGaussianMas_U0_img_height_out_write,
        img_width_out_din => xFAverageGaussianMas_U0_img_width_out_din,
        img_width_out_full_n => img_width_c22_full_n,
        img_width_out_write => xFAverageGaussianMas_U0_img_width_out_write);

    xFSobel_U0 : component xFSobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFSobel_U0_ap_start,
        start_full_n => start_for_xFDuplicate_rows_U0_full_n,
        ap_done => xFSobel_U0_ap_done,
        ap_continue => xFSobel_U0_ap_continue,
        ap_idle => xFSobel_U0_ap_idle,
        ap_ready => xFSobel_U0_ap_ready,
        start_out => xFSobel_U0_start_out,
        start_write => xFSobel_U0_start_write,
        p_src_data_V_dout => gaussian_mat_data_V_dout,
        p_src_data_V_empty_n => gaussian_mat_data_V_empty_n,
        p_src_data_V_read => xFSobel_U0_p_src_data_V_read,
        p_dst_data_V_din => xFSobel_U0_p_dst_data_V_din,
        p_dst_data_V_full_n => gradx_mat_data_V_full_n,
        p_dst_data_V_write => xFSobel_U0_p_dst_data_V_write,
        p_dst1_data_V_din => xFSobel_U0_p_dst1_data_V_din,
        p_dst1_data_V_full_n => grady_mat_data_V_full_n,
        p_dst1_data_V_write => xFSobel_U0_p_dst1_data_V_write,
        imgheight_dout => img_height_c21_dout,
        imgheight_empty_n => img_height_c21_empty_n,
        imgheight_read => xFSobel_U0_imgheight_read,
        imgwidth_dout => img_width_c22_dout,
        imgwidth_empty_n => img_width_c22_empty_n,
        imgwidth_read => xFSobel_U0_imgwidth_read,
        imgheight_out_din => xFSobel_U0_imgheight_out_din,
        imgheight_out_full_n => img_height_c23_full_n,
        imgheight_out_write => xFSobel_U0_imgheight_out_write,
        imgwidth_out_din => xFSobel_U0_imgwidth_out_din,
        imgwidth_out_full_n => img_width_c24_full_n,
        imgwidth_out_write => xFSobel_U0_imgwidth_out_write);

    xFDuplicate_rows_U0 : component xFDuplicate_rows
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFDuplicate_rows_U0_ap_start,
        start_full_n => start_for_xFAngleKernel_U0_full_n,
        ap_done => xFDuplicate_rows_U0_ap_done,
        ap_continue => xFDuplicate_rows_U0_ap_continue,
        ap_idle => xFDuplicate_rows_U0_ap_idle,
        ap_ready => xFDuplicate_rows_U0_ap_ready,
        start_out => xFDuplicate_rows_U0_start_out,
        start_write => xFDuplicate_rows_U0_start_write,
        p_src_mat_data_V_dout => gradx_mat_data_V_dout,
        p_src_mat_data_V_empty_n => gradx_mat_data_V_empty_n,
        p_src_mat_data_V_read => xFDuplicate_rows_U0_p_src_mat_data_V_read,
        p_src_mat1_data_V_dout => grady_mat_data_V_dout,
        p_src_mat1_data_V_empty_n => grady_mat_data_V_empty_n,
        p_src_mat1_data_V_read => xFDuplicate_rows_U0_p_src_mat1_data_V_read,
        p_dst1_mat_data_V_din => xFDuplicate_rows_U0_p_dst1_mat_data_V_din,
        p_dst1_mat_data_V_full_n => gradx1_mat_data_V_full_n,
        p_dst1_mat_data_V_write => xFDuplicate_rows_U0_p_dst1_mat_data_V_write,
        p_dst2_mat_data_V_din => xFDuplicate_rows_U0_p_dst2_mat_data_V_din,
        p_dst2_mat_data_V_full_n => gradx2_mat_data_V_full_n,
        p_dst2_mat_data_V_write => xFDuplicate_rows_U0_p_dst2_mat_data_V_write,
        p_dst1_out_mat_data_V_din => xFDuplicate_rows_U0_p_dst1_out_mat_data_V_din,
        p_dst1_out_mat_data_V_full_n => grady1_mat_data_V_full_n,
        p_dst1_out_mat_data_V_write => xFDuplicate_rows_U0_p_dst1_out_mat_data_V_write,
        p_dst2_out_mat_data_V_din => xFDuplicate_rows_U0_p_dst2_out_mat_data_V_din,
        p_dst2_out_mat_data_V_full_n => grady2_mat_data_V_full_n,
        p_dst2_out_mat_data_V_write => xFDuplicate_rows_U0_p_dst2_out_mat_data_V_write,
        img_height_dout => img_height_c23_dout,
        img_height_empty_n => img_height_c23_empty_n,
        img_height_read => xFDuplicate_rows_U0_img_height_read,
        img_width_dout => img_width_c24_dout,
        img_width_empty_n => img_width_c24_empty_n,
        img_width_read => xFDuplicate_rows_U0_img_width_read,
        img_height_out_din => xFDuplicate_rows_U0_img_height_out_din,
        img_height_out_full_n => img_height_c25_full_n,
        img_height_out_write => xFDuplicate_rows_U0_img_height_out_write,
        img_height_out1_din => xFDuplicate_rows_U0_img_height_out1_din,
        img_height_out1_full_n => img_height_c26_full_n,
        img_height_out1_write => xFDuplicate_rows_U0_img_height_out1_write,
        img_width_out_din => xFDuplicate_rows_U0_img_width_out_din,
        img_width_out_full_n => img_width_c27_full_n,
        img_width_out_write => xFDuplicate_rows_U0_img_width_out_write,
        img_width_out2_din => xFDuplicate_rows_U0_img_width_out2_din,
        img_width_out2_full_n => img_width_c28_full_n,
        img_width_out2_write => xFDuplicate_rows_U0_img_width_out2_write);

    xFCannyKernel_Block_U0 : component xFCannyKernel_Block_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFCannyKernel_Block_U0_ap_start,
        start_full_n => start_for_xFMagnitudeKernel_U0_full_n,
        ap_done => xFCannyKernel_Block_U0_ap_done,
        ap_continue => xFCannyKernel_Block_U0_ap_continue,
        ap_idle => xFCannyKernel_Block_U0_ap_idle,
        ap_ready => xFCannyKernel_Block_U0_ap_ready,
        start_out => xFCannyKernel_Block_U0_start_out,
        start_write => xFCannyKernel_Block_U0_start_write,
        img_width_dout => img_width_c20_dout,
        img_width_empty_n => img_width_c20_empty_n,
        img_width_read => xFCannyKernel_Block_U0_img_width_read,
        img_height_dout => img_height_c19_dout,
        img_height_empty_n => img_height_c19_empty_n,
        img_height_read => xFCannyKernel_Block_U0_img_height_read,
        imgwidth_out_din => xFCannyKernel_Block_U0_imgwidth_out_din,
        imgwidth_out_full_n => imgwidth_c_full_n,
        imgwidth_out_write => xFCannyKernel_Block_U0_imgwidth_out_write,
        height_out_din => xFCannyKernel_Block_U0_height_out_din,
        height_out_full_n => height_c_full_n,
        height_out_write => xFCannyKernel_Block_U0_height_out_write);

    xFMagnitudeKernel_U0 : component xFMagnitudeKernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFMagnitudeKernel_U0_ap_start,
        ap_done => xFMagnitudeKernel_U0_ap_done,
        ap_continue => xFMagnitudeKernel_U0_ap_continue,
        ap_idle => xFMagnitudeKernel_U0_ap_idle,
        ap_ready => xFMagnitudeKernel_U0_ap_ready,
        p_src1_data_V_dout => gradx1_mat_data_V_dout,
        p_src1_data_V_empty_n => gradx1_mat_data_V_empty_n,
        p_src1_data_V_read => xFMagnitudeKernel_U0_p_src1_data_V_read,
        p_src2_data_V_dout => grady1_mat_data_V_dout,
        p_src2_data_V_empty_n => grady1_mat_data_V_empty_n,
        p_src2_data_V_read => xFMagnitudeKernel_U0_p_src2_data_V_read,
        p_dst_mat_data_V_din => xFMagnitudeKernel_U0_p_dst_mat_data_V_din,
        p_dst_mat_data_V_full_n => magnitude_mat_data_V_full_n,
        p_dst_mat_data_V_write => xFMagnitudeKernel_U0_p_dst_mat_data_V_write,
        imgheight_dout => height_c_dout,
        imgheight_empty_n => height_c_empty_n,
        imgheight_read => xFMagnitudeKernel_U0_imgheight_read,
        imgwidth_dout => imgwidth_c_dout,
        imgwidth_empty_n => imgwidth_c_empty_n,
        imgwidth_read => xFMagnitudeKernel_U0_imgwidth_read);

    xFAngleKernel_U0 : component xFAngleKernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFAngleKernel_U0_ap_start,
        ap_done => xFAngleKernel_U0_ap_done,
        ap_continue => xFAngleKernel_U0_ap_continue,
        ap_idle => xFAngleKernel_U0_ap_idle,
        ap_ready => xFAngleKernel_U0_ap_ready,
        p_src1_data_V_dout => gradx2_mat_data_V_dout,
        p_src1_data_V_empty_n => gradx2_mat_data_V_empty_n,
        p_src1_data_V_read => xFAngleKernel_U0_p_src1_data_V_read,
        p_src2_data_V_dout => grady2_mat_data_V_dout,
        p_src2_data_V_empty_n => grady2_mat_data_V_empty_n,
        p_src2_data_V_read => xFAngleKernel_U0_p_src2_data_V_read,
        p_dst_data_V_din => xFAngleKernel_U0_p_dst_data_V_din,
        p_dst_data_V_full_n => phase_mat_data_V_full_n,
        p_dst_data_V_write => xFAngleKernel_U0_p_dst_data_V_write,
        imgheight_dout => img_height_c25_dout,
        imgheight_empty_n => img_height_c25_empty_n,
        imgheight_read => xFAngleKernel_U0_imgheight_read,
        imgwidth_dout => img_width_c27_dout,
        imgwidth_empty_n => img_width_c27_empty_n,
        imgwidth_read => xFAngleKernel_U0_imgwidth_read);

    xFSuppression3x3_U0 : component xFSuppression3x3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFSuppression3x3_U0_ap_start,
        start_full_n => start_for_xFPackNMS1096_U0_full_n,
        ap_done => xFSuppression3x3_U0_ap_done,
        ap_continue => xFSuppression3x3_U0_ap_continue,
        ap_idle => xFSuppression3x3_U0_ap_idle,
        ap_ready => xFSuppression3x3_U0_ap_ready,
        start_out => xFSuppression3x3_U0_start_out,
        start_write => xFSuppression3x3_U0_start_write,
        p_magnitude_mat_data_V_dout => magnitude_mat_data_V_dout,
        p_magnitude_mat_data_V_empty_n => magnitude_mat_data_V_empty_n,
        p_magnitude_mat_data_V_read => xFSuppression3x3_U0_p_magnitude_mat_data_V_read,
        p_phase_mat_data_V_dout => phase_mat_data_V_dout,
        p_phase_mat_data_V_empty_n => phase_mat_data_V_empty_n,
        p_phase_mat_data_V_read => xFSuppression3x3_U0_p_phase_mat_data_V_read,
        p_dst_mat_data_V_din => xFSuppression3x3_U0_p_dst_mat_data_V_din,
        p_dst_mat_data_V_full_n => nms_mat_data_V_full_n,
        p_dst_mat_data_V_write => xFSuppression3x3_U0_p_dst_mat_data_V_write,
        low_threshold_dout => p_lowthreshold_c_dout,
        low_threshold_empty_n => p_lowthreshold_c_empty_n,
        low_threshold_read => xFSuppression3x3_U0_low_threshold_read,
        high_threshold_dout => p_highthreshold_c_dout,
        high_threshold_empty_n => p_highthreshold_c_empty_n,
        high_threshold_read => xFSuppression3x3_U0_high_threshold_read,
        imgheight_dout => img_height_c26_dout,
        imgheight_empty_n => img_height_c26_empty_n,
        imgheight_read => xFSuppression3x3_U0_imgheight_read,
        imgwidth_dout => img_width_c28_dout,
        imgwidth_empty_n => img_width_c28_empty_n,
        imgwidth_read => xFSuppression3x3_U0_imgwidth_read,
        imgheight_out_din => xFSuppression3x3_U0_imgheight_out_din,
        imgheight_out_full_n => img_height_c29_full_n,
        imgheight_out_write => xFSuppression3x3_U0_imgheight_out_write,
        imgwidth_out_din => xFSuppression3x3_U0_imgwidth_out_din,
        imgwidth_out_full_n => img_width_c30_full_n,
        imgwidth_out_write => xFSuppression3x3_U0_imgwidth_out_write);

    xFPackNMS1096_U0 : component xFPackNMS1096
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xFPackNMS1096_U0_ap_start,
        ap_done => xFPackNMS1096_U0_ap_done,
        ap_continue => xFPackNMS1096_U0_ap_continue,
        ap_idle => xFPackNMS1096_U0_ap_idle,
        ap_ready => xFPackNMS1096_U0_ap_ready,
        p_src_mat_data_V_dout => nms_mat_data_V_dout,
        p_src_mat_data_V_empty_n => nms_mat_data_V_empty_n,
        p_src_mat_data_V_read => xFPackNMS1096_U0_p_src_mat_data_V_read,
        p_dst_mat_data_V_din => xFPackNMS1096_U0_p_dst_mat_data_V_din,
        p_dst_mat_data_V_full_n => p_dst_mat_data_V_full_n,
        p_dst_mat_data_V_write => xFPackNMS1096_U0_p_dst_mat_data_V_write,
        imgheight_dout => img_height_c29_dout,
        imgheight_empty_n => img_height_c29_empty_n,
        imgheight_read => xFPackNMS1096_U0_imgheight_read,
        imgwidth_dout => img_width_c30_dout,
        imgwidth_empty_n => img_width_c30_empty_n,
        imgwidth_read => xFPackNMS1096_U0_imgwidth_read);

    p_lowthreshold_c_U : component fifo_w8_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFCannyKernel_entry2_U0_p_lowthreshold_out_din,
        if_full_n => p_lowthreshold_c_full_n,
        if_write => xFCannyKernel_entry2_U0_p_lowthreshold_out_write,
        if_dout => p_lowthreshold_c_dout,
        if_empty_n => p_lowthreshold_c_empty_n,
        if_read => xFSuppression3x3_U0_low_threshold_read);

    p_highthreshold_c_U : component fifo_w8_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFCannyKernel_entry2_U0_p_highthreshold_out_din,
        if_full_n => p_highthreshold_c_full_n,
        if_write => xFCannyKernel_entry2_U0_p_highthreshold_out_write,
        if_dout => p_highthreshold_c_dout,
        if_empty_n => p_highthreshold_c_empty_n,
        if_read => xFSuppression3x3_U0_high_threshold_read);

    img_height_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFCannyKernel_entry2_U0_img_height_out_din,
        if_full_n => img_height_c_full_n,
        if_write => xFCannyKernel_entry2_U0_img_height_out_write,
        if_dout => img_height_c_dout,
        if_empty_n => img_height_c_empty_n,
        if_read => xFAverageGaussianMas_U0_img_height_read);

    img_height_c19_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFCannyKernel_entry2_U0_img_height_out1_din,
        if_full_n => img_height_c19_full_n,
        if_write => xFCannyKernel_entry2_U0_img_height_out1_write,
        if_dout => img_height_c19_dout,
        if_empty_n => img_height_c19_empty_n,
        if_read => xFCannyKernel_Block_U0_img_height_read);

    img_width_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFCannyKernel_entry2_U0_img_width_out_din,
        if_full_n => img_width_c_full_n,
        if_write => xFCannyKernel_entry2_U0_img_width_out_write,
        if_dout => img_width_c_dout,
        if_empty_n => img_width_c_empty_n,
        if_read => xFAverageGaussianMas_U0_img_width_read);

    img_width_c20_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFCannyKernel_entry2_U0_img_width_out2_din,
        if_full_n => img_width_c20_full_n,
        if_write => xFCannyKernel_entry2_U0_img_width_out2_write,
        if_dout => img_width_c20_dout,
        if_empty_n => img_width_c20_empty_n,
        if_read => xFCannyKernel_Block_U0_img_width_read);

    gaussian_mat_data_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFAverageGaussianMas_U0_p_out_mat_data_V_din,
        if_full_n => gaussian_mat_data_V_full_n,
        if_write => xFAverageGaussianMas_U0_p_out_mat_data_V_write,
        if_dout => gaussian_mat_data_V_dout,
        if_empty_n => gaussian_mat_data_V_empty_n,
        if_read => xFSobel_U0_p_src_data_V_read);

    img_height_c21_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFAverageGaussianMas_U0_img_height_out_din,
        if_full_n => img_height_c21_full_n,
        if_write => xFAverageGaussianMas_U0_img_height_out_write,
        if_dout => img_height_c21_dout,
        if_empty_n => img_height_c21_empty_n,
        if_read => xFSobel_U0_imgheight_read);

    img_width_c22_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFAverageGaussianMas_U0_img_width_out_din,
        if_full_n => img_width_c22_full_n,
        if_write => xFAverageGaussianMas_U0_img_width_out_write,
        if_dout => img_width_c22_dout,
        if_empty_n => img_width_c22_empty_n,
        if_read => xFSobel_U0_imgwidth_read);

    gradx_mat_data_V_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFSobel_U0_p_dst_data_V_din,
        if_full_n => gradx_mat_data_V_full_n,
        if_write => xFSobel_U0_p_dst_data_V_write,
        if_dout => gradx_mat_data_V_dout,
        if_empty_n => gradx_mat_data_V_empty_n,
        if_read => xFDuplicate_rows_U0_p_src_mat_data_V_read);

    grady_mat_data_V_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFSobel_U0_p_dst1_data_V_din,
        if_full_n => grady_mat_data_V_full_n,
        if_write => xFSobel_U0_p_dst1_data_V_write,
        if_dout => grady_mat_data_V_dout,
        if_empty_n => grady_mat_data_V_empty_n,
        if_read => xFDuplicate_rows_U0_p_src_mat1_data_V_read);

    img_height_c23_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFSobel_U0_imgheight_out_din,
        if_full_n => img_height_c23_full_n,
        if_write => xFSobel_U0_imgheight_out_write,
        if_dout => img_height_c23_dout,
        if_empty_n => img_height_c23_empty_n,
        if_read => xFDuplicate_rows_U0_img_height_read);

    img_width_c24_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFSobel_U0_imgwidth_out_din,
        if_full_n => img_width_c24_full_n,
        if_write => xFSobel_U0_imgwidth_out_write,
        if_dout => img_width_c24_dout,
        if_empty_n => img_width_c24_empty_n,
        if_read => xFDuplicate_rows_U0_img_width_read);

    gradx1_mat_data_V_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFDuplicate_rows_U0_p_dst1_mat_data_V_din,
        if_full_n => gradx1_mat_data_V_full_n,
        if_write => xFDuplicate_rows_U0_p_dst1_mat_data_V_write,
        if_dout => gradx1_mat_data_V_dout,
        if_empty_n => gradx1_mat_data_V_empty_n,
        if_read => xFMagnitudeKernel_U0_p_src1_data_V_read);

    gradx2_mat_data_V_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFDuplicate_rows_U0_p_dst2_mat_data_V_din,
        if_full_n => gradx2_mat_data_V_full_n,
        if_write => xFDuplicate_rows_U0_p_dst2_mat_data_V_write,
        if_dout => gradx2_mat_data_V_dout,
        if_empty_n => gradx2_mat_data_V_empty_n,
        if_read => xFAngleKernel_U0_p_src1_data_V_read);

    grady1_mat_data_V_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFDuplicate_rows_U0_p_dst1_out_mat_data_V_din,
        if_full_n => grady1_mat_data_V_full_n,
        if_write => xFDuplicate_rows_U0_p_dst1_out_mat_data_V_write,
        if_dout => grady1_mat_data_V_dout,
        if_empty_n => grady1_mat_data_V_empty_n,
        if_read => xFMagnitudeKernel_U0_p_src2_data_V_read);

    grady2_mat_data_V_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFDuplicate_rows_U0_p_dst2_out_mat_data_V_din,
        if_full_n => grady2_mat_data_V_full_n,
        if_write => xFDuplicate_rows_U0_p_dst2_out_mat_data_V_write,
        if_dout => grady2_mat_data_V_dout,
        if_empty_n => grady2_mat_data_V_empty_n,
        if_read => xFAngleKernel_U0_p_src2_data_V_read);

    img_height_c25_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFDuplicate_rows_U0_img_height_out_din,
        if_full_n => img_height_c25_full_n,
        if_write => xFDuplicate_rows_U0_img_height_out_write,
        if_dout => img_height_c25_dout,
        if_empty_n => img_height_c25_empty_n,
        if_read => xFAngleKernel_U0_imgheight_read);

    img_height_c26_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFDuplicate_rows_U0_img_height_out1_din,
        if_full_n => img_height_c26_full_n,
        if_write => xFDuplicate_rows_U0_img_height_out1_write,
        if_dout => img_height_c26_dout,
        if_empty_n => img_height_c26_empty_n,
        if_read => xFSuppression3x3_U0_imgheight_read);

    img_width_c27_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFDuplicate_rows_U0_img_width_out_din,
        if_full_n => img_width_c27_full_n,
        if_write => xFDuplicate_rows_U0_img_width_out_write,
        if_dout => img_width_c27_dout,
        if_empty_n => img_width_c27_empty_n,
        if_read => xFAngleKernel_U0_imgwidth_read);

    img_width_c28_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFDuplicate_rows_U0_img_width_out2_din,
        if_full_n => img_width_c28_full_n,
        if_write => xFDuplicate_rows_U0_img_width_out2_write,
        if_dout => img_width_c28_dout,
        if_empty_n => img_width_c28_empty_n,
        if_read => xFSuppression3x3_U0_imgwidth_read);

    imgwidth_c_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFCannyKernel_Block_U0_imgwidth_out_din,
        if_full_n => imgwidth_c_full_n,
        if_write => xFCannyKernel_Block_U0_imgwidth_out_write,
        if_dout => imgwidth_c_dout,
        if_empty_n => imgwidth_c_empty_n,
        if_read => xFMagnitudeKernel_U0_imgwidth_read);

    height_c_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFCannyKernel_Block_U0_height_out_din,
        if_full_n => height_c_full_n,
        if_write => xFCannyKernel_Block_U0_height_out_write,
        if_dout => height_c_dout,
        if_empty_n => height_c_empty_n,
        if_read => xFMagnitudeKernel_U0_imgheight_read);

    magnitude_mat_data_V_U : component fifo_w14_d5760_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFMagnitudeKernel_U0_p_dst_mat_data_V_din,
        if_full_n => magnitude_mat_data_V_full_n,
        if_write => xFMagnitudeKernel_U0_p_dst_mat_data_V_write,
        if_dout => magnitude_mat_data_V_dout,
        if_empty_n => magnitude_mat_data_V_empty_n,
        if_read => xFSuppression3x3_U0_p_magnitude_mat_data_V_read);

    phase_mat_data_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFAngleKernel_U0_p_dst_data_V_din,
        if_full_n => phase_mat_data_V_full_n,
        if_write => xFAngleKernel_U0_p_dst_data_V_write,
        if_dout => phase_mat_data_V_dout,
        if_empty_n => phase_mat_data_V_empty_n,
        if_read => xFSuppression3x3_U0_p_phase_mat_data_V_read);

    nms_mat_data_V_U : component fifo_w2_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFSuppression3x3_U0_p_dst_mat_data_V_din,
        if_full_n => nms_mat_data_V_full_n,
        if_write => xFSuppression3x3_U0_p_dst_mat_data_V_write,
        if_dout => nms_mat_data_V_dout,
        if_empty_n => nms_mat_data_V_empty_n,
        if_read => xFPackNMS1096_U0_p_src_mat_data_V_read);

    img_height_c29_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFSuppression3x3_U0_imgheight_out_din,
        if_full_n => img_height_c29_full_n,
        if_write => xFSuppression3x3_U0_imgheight_out_write,
        if_dout => img_height_c29_dout,
        if_empty_n => img_height_c29_empty_n,
        if_read => xFPackNMS1096_U0_imgheight_read);

    img_width_c30_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFSuppression3x3_U0_imgwidth_out_din,
        if_full_n => img_width_c30_full_n,
        if_write => xFSuppression3x3_U0_imgwidth_out_write,
        if_dout => img_width_c30_dout,
        if_empty_n => img_width_c30_empty_n,
        if_read => xFPackNMS1096_U0_imgwidth_read);

    start_for_xFCannyncg_U : component start_for_xFCannyncg
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xFCannyKernel_Block_U0_din,
        if_full_n => start_for_xFCannyKernel_Block_U0_full_n,
        if_write => xFCannyKernel_entry2_U0_start_write,
        if_dout => start_for_xFCannyKernel_Block_U0_dout,
        if_empty_n => start_for_xFCannyKernel_Block_U0_empty_n,
        if_read => xFCannyKernel_Block_U0_ap_ready);

    start_for_xFSupprocq_U : component start_for_xFSupprocq
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xFSuppression3x3_U0_din,
        if_full_n => start_for_xFSuppression3x3_U0_full_n,
        if_write => xFCannyKernel_entry2_U0_start_write,
        if_dout => start_for_xFSuppression3x3_U0_dout,
        if_empty_n => start_for_xFSuppression3x3_U0_empty_n,
        if_read => xFSuppression3x3_U0_ap_ready);

    start_for_xFSobelpcA_U : component start_for_xFSobelpcA
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xFSobel_U0_din,
        if_full_n => start_for_xFSobel_U0_full_n,
        if_write => xFAverageGaussianMas_U0_start_write,
        if_dout => start_for_xFSobel_U0_dout,
        if_empty_n => start_for_xFSobel_U0_empty_n,
        if_read => xFSobel_U0_ap_ready);

    start_for_xFDupliqcK_U : component start_for_xFDupliqcK
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xFDuplicate_rows_U0_din,
        if_full_n => start_for_xFDuplicate_rows_U0_full_n,
        if_write => xFSobel_U0_start_write,
        if_dout => start_for_xFDuplicate_rows_U0_dout,
        if_empty_n => start_for_xFDuplicate_rows_U0_empty_n,
        if_read => xFDuplicate_rows_U0_ap_ready);

    start_for_xFAnglercU_U : component start_for_xFAnglercU
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xFAngleKernel_U0_din,
        if_full_n => start_for_xFAngleKernel_U0_full_n,
        if_write => xFDuplicate_rows_U0_start_write,
        if_dout => start_for_xFAngleKernel_U0_dout,
        if_empty_n => start_for_xFAngleKernel_U0_empty_n,
        if_read => xFAngleKernel_U0_ap_ready);

    start_for_xFMagnisc4_U : component start_for_xFMagnisc4
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xFMagnitudeKernel_U0_din,
        if_full_n => start_for_xFMagnitudeKernel_U0_full_n,
        if_write => xFCannyKernel_Block_U0_start_write,
        if_dout => start_for_xFMagnitudeKernel_U0_dout,
        if_empty_n => start_for_xFMagnitudeKernel_U0_empty_n,
        if_read => xFMagnitudeKernel_U0_ap_ready);

    start_for_xFPackNtde_U : component start_for_xFPackNtde
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xFPackNMS1096_U0_din,
        if_full_n => start_for_xFPackNMS1096_U0_full_n,
        if_write => xFSuppression3x3_U0_start_write,
        if_dout => start_for_xFPackNMS1096_U0_dout,
        if_empty_n => start_for_xFPackNMS1096_U0_empty_n,
        if_read => xFPackNMS1096_U0_ap_ready);





    ap_sync_reg_xFAverageGaussianMas_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_xFAverageGaussianMas_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_xFAverageGaussianMas_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_xFAverageGaussianMas_U0_ap_ready <= ap_sync_xFAverageGaussianMas_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_xFCannyKernel_entry2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_xFCannyKernel_entry2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_xFCannyKernel_entry2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_xFCannyKernel_entry2_U0_ap_ready <= ap_sync_xFCannyKernel_entry2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    xFAverageGaussianMas_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (xFAverageGaussianMas_U0_ap_ready = ap_const_logic_0))) then 
                xFAverageGaussianMas_U0_ap_ready_count <= std_logic_vector(unsigned(xFAverageGaussianMas_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((xFAverageGaussianMas_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                xFAverageGaussianMas_U0_ap_ready_count <= std_logic_vector(unsigned(xFAverageGaussianMas_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    xFCannyKernel_entry2_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (xFCannyKernel_entry2_U0_ap_ready = ap_const_logic_0))) then 
                xFCannyKernel_entry2_U0_ap_ready_count <= std_logic_vector(unsigned(xFCannyKernel_entry2_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (xFCannyKernel_entry2_U0_ap_ready = ap_const_logic_1))) then 
                xFCannyKernel_entry2_U0_ap_ready_count <= std_logic_vector(unsigned(xFCannyKernel_entry2_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_done <= xFPackNMS1096_U0_ap_done;
    ap_idle <= (xFSuppression3x3_U0_ap_idle and xFSobel_U0_ap_idle and xFPackNMS1096_U0_ap_idle and xFMagnitudeKernel_U0_ap_idle and xFDuplicate_rows_U0_ap_idle and xFCannyKernel_entry2_U0_ap_idle and xFCannyKernel_Block_U0_ap_idle and xFAverageGaussianMas_U0_ap_idle and xFAngleKernel_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= xFPackNMS1096_U0_ap_done;
    ap_sync_ready <= (ap_sync_xFCannyKernel_entry2_U0_ap_ready and ap_sync_xFAverageGaussianMas_U0_ap_ready);
    ap_sync_xFAverageGaussianMas_U0_ap_ready <= (xFAverageGaussianMas_U0_ap_ready or ap_sync_reg_xFAverageGaussianMas_U0_ap_ready);
    ap_sync_xFCannyKernel_entry2_U0_ap_ready <= (xFCannyKernel_entry2_U0_ap_ready or ap_sync_reg_xFCannyKernel_entry2_U0_ap_ready);
    p_dst_mat_data_V_din <= xFPackNMS1096_U0_p_dst_mat_data_V_din;
    p_dst_mat_data_V_write <= xFPackNMS1096_U0_p_dst_mat_data_V_write;
    p_src_mat_data_V_read <= xFAverageGaussianMas_U0_p_src_mat_data_V_read;
    start_for_xFAngleKernel_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xFCannyKernel_Block_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xFDuplicate_rows_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xFMagnitudeKernel_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xFPackNMS1096_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xFSobel_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xFSuppression3x3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    xFAngleKernel_U0_ap_continue <= ap_const_logic_1;
    xFAngleKernel_U0_ap_start <= start_for_xFAngleKernel_U0_empty_n;
    xFAngleKernel_U0_start_full_n <= ap_const_logic_1;
    xFAngleKernel_U0_start_write <= ap_const_logic_0;
    xFAverageGaussianMas_U0_ap_continue <= ap_const_logic_1;
    xFAverageGaussianMas_U0_ap_start <= ((ap_sync_reg_xFAverageGaussianMas_U0_ap_ready xor ap_const_logic_1) and ap_start);
    xFCannyKernel_Block_U0_ap_continue <= ap_const_logic_1;
    xFCannyKernel_Block_U0_ap_start <= start_for_xFCannyKernel_Block_U0_empty_n;
    xFCannyKernel_entry2_U0_ap_continue <= ap_const_logic_1;
    xFCannyKernel_entry2_U0_ap_start <= ((ap_sync_reg_xFCannyKernel_entry2_U0_ap_ready xor ap_const_logic_1) and ap_start);
    xFCannyKernel_entry2_U0_start_full_n <= (start_for_xFSuppression3x3_U0_full_n and start_for_xFCannyKernel_Block_U0_full_n);
    xFDuplicate_rows_U0_ap_continue <= ap_const_logic_1;
    xFDuplicate_rows_U0_ap_start <= start_for_xFDuplicate_rows_U0_empty_n;
    xFMagnitudeKernel_U0_ap_continue <= ap_const_logic_1;
    xFMagnitudeKernel_U0_ap_start <= start_for_xFMagnitudeKernel_U0_empty_n;
    xFMagnitudeKernel_U0_start_full_n <= ap_const_logic_1;
    xFMagnitudeKernel_U0_start_write <= ap_const_logic_0;
    xFPackNMS1096_U0_ap_continue <= ap_continue;
    xFPackNMS1096_U0_ap_start <= start_for_xFPackNMS1096_U0_empty_n;
    xFPackNMS1096_U0_start_full_n <= ap_const_logic_1;
    xFPackNMS1096_U0_start_write <= ap_const_logic_0;
    xFSobel_U0_ap_continue <= ap_const_logic_1;
    xFSobel_U0_ap_start <= start_for_xFSobel_U0_empty_n;
    xFSuppression3x3_U0_ap_continue <= ap_const_logic_1;
    xFSuppression3x3_U0_ap_start <= start_for_xFSuppression3x3_U0_empty_n;
end behav;
