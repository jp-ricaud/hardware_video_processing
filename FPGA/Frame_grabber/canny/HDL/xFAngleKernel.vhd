-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xFAngleKernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src1_data_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    p_src1_data_V_empty_n : IN STD_LOGIC;
    p_src1_data_V_read : OUT STD_LOGIC;
    p_src2_data_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    p_src2_data_V_empty_n : IN STD_LOGIC;
    p_src2_data_V_read : OUT STD_LOGIC;
    p_dst_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_V_full_n : IN STD_LOGIC;
    p_dst_data_V_write : OUT STD_LOGIC;
    imgheight_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    imgheight_empty_n : IN STD_LOGIC;
    imgheight_read : OUT STD_LOGIC;
    imgwidth_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    imgwidth_empty_n : IN STD_LOGIC;
    imgwidth_read : OUT STD_LOGIC );
end;


architecture behav of xFAngleKernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv31_3505 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000011010100000101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src1_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln431_reg_343 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src2_data_V_blk_n : STD_LOGIC;
    signal p_dst_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln431_reg_343_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal imgheight_blk_n : STD_LOGIC;
    signal imgwidth_blk_n : STD_LOGIC;
    signal t_V_13_reg_133 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgheight_read_reg_324 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal imgwidth_read_reg_329 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln887_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_V_reg_338 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln431_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln431_reg_343_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln431_reg_343_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln431_reg_343_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln431_reg_343_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln431_reg_343_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln431_reg_343_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1597_reg_347 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_src1_data_V_read_reg_352 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src1_data_V_read_reg_352_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src1_data_V_read_reg_352_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src1_data_V_read_reg_352_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src1_data_V_read_reg_352_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src1_data_V_read_reg_352_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src1_data_V_read_reg_352_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src2_data_V_read_reg_358 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src2_data_V_read_reg_358_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src2_data_V_read_reg_358_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src2_data_V_read_reg_358_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src2_data_V_read_reg_358_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src2_data_V_read_reg_358_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src2_data_V_read_reg_358_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_364_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_369_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_369_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_369_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_369_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_369_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln421_fu_187_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln421_reg_374 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln452_reg_380 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_fu_196_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_reg_385 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_reg_385_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_reg_385_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_reg_385_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln452_1_fu_214_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln452_1_reg_396 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln459_reg_402 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln459_reg_402_pp0_iter6_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln453_reg_408 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_1_fu_243_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_1_reg_423 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln464_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln461_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln461_reg_433 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln465_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln465_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln465_2_fu_316_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln465_2_reg_444 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal t_V_reg_121 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_phi_mux_t_V_13_phi_fu_137_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln887_fu_145_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_171_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_179_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln452_fu_201_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_226_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_237_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_248_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln453_fu_255_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln453_1_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln468_fu_273_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln461_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln465_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln465_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln465_fu_295_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln465_1_fu_308_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_165_ce : STD_LOGIC;
    signal grp_fu_190_ce : STD_LOGIC;
    signal grp_fu_208_ce : STD_LOGIC;
    signal grp_fu_217_ce : STD_LOGIC;
    signal grp_fu_237_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_208_p00 : STD_LOGIC_VECTOR (30 downto 0);

    component ip_accel_app_add_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component ip_accel_app_add_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component ip_accel_app_sub_xdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component ip_accel_app_mul_zec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component ip_accel_app_add_Aem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ip_accel_app_add_g8j_U199 : component ip_accel_app_add_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t_V_reg_121,
        din1 => ap_const_lv13_1,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p2);

    ip_accel_app_add_fYi_U200 : component ip_accel_app_add_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_t_V_13_phi_fu_137_p4,
        din1 => ap_const_lv16_1,
        ce => grp_fu_165_ce,
        dout => grp_fu_165_p2);

    ip_accel_app_sub_xdS_U201 : component ip_accel_app_sub_xdS
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv12_0,
        din1 => grp_fu_190_p1,
        ce => grp_fu_190_ce,
        dout => grp_fu_190_p2);

    ip_accel_app_mul_zec_U202 : component ip_accel_app_mul_zec
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_208_p0,
        din1 => grp_fu_208_p1,
        ce => grp_fu_208_ce,
        dout => grp_fu_208_p2);

    ip_accel_app_sub_xdS_U203 : component ip_accel_app_sub_xdS
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv12_0,
        din1 => grp_fu_217_p1,
        ce => grp_fu_217_ce,
        dout => grp_fu_217_p2);

    ip_accel_app_add_Aem_U204 : component ip_accel_app_add_Aem
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_237_p0,
        din1 => grp_fu_237_p1,
        ce => grp_fu_237_ce,
        dout => grp_fu_237_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln887_reg_334 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_reg_334 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_reg_334 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_13_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_343 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_13_reg_133 <= add_ln1597_reg_347;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_reg_334 = ap_const_lv1_1))) then 
                t_V_13_reg_133 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    t_V_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                t_V_reg_121 <= i_V_reg_338;
            elsif ((not(((imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_121 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln1597_reg_347 <= grp_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_343_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln464_reg_428 <= grp_fu_237_p2;
                p_Val2_1_reg_423 <= p_Val2_1_fu_243_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_V_reg_338 <= grp_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln431_reg_343 <= icmp_ln431_fu_160_p2;
                icmp_ln431_reg_343_pp0_iter1_reg <= icmp_ln431_reg_343;
                icmp_ln431_reg_343_pp0_iter2_reg <= icmp_ln431_reg_343_pp0_iter1_reg;
                icmp_ln431_reg_343_pp0_iter3_reg <= icmp_ln431_reg_343_pp0_iter2_reg;
                icmp_ln431_reg_343_pp0_iter4_reg <= icmp_ln431_reg_343_pp0_iter3_reg;
                icmp_ln431_reg_343_pp0_iter5_reg <= icmp_ln431_reg_343_pp0_iter4_reg;
                icmp_ln431_reg_343_pp0_iter6_reg <= icmp_ln431_reg_343_pp0_iter5_reg;
                icmp_ln431_reg_343_pp0_iter7_reg <= icmp_ln431_reg_343_pp0_iter6_reg;
                p_Val2_s_reg_385_pp0_iter3_reg <= p_Val2_s_reg_385;
                p_Val2_s_reg_385_pp0_iter4_reg <= p_Val2_s_reg_385_pp0_iter3_reg;
                p_Val2_s_reg_385_pp0_iter5_reg <= p_Val2_s_reg_385_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_343_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln461_reg_433 <= icmp_ln461_fu_263_p2;
                icmp_ln465_reg_439 <= icmp_ln465_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln887_reg_334 <= icmp_ln887_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                imgheight_read_reg_324 <= imgheight_dout;
                imgwidth_read_reg_329 <= imgwidth_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_343_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_ln459_reg_402 <= grp_fu_208_p2;
                sext_ln452_1_reg_396 <= sext_ln452_1_fu_214_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_ln459_reg_402_pp0_iter6_reg <= mul_ln459_reg_402;
                p_src1_data_V_read_reg_352_pp0_iter1_reg <= p_src1_data_V_read_reg_352;
                p_src1_data_V_read_reg_352_pp0_iter2_reg <= p_src1_data_V_read_reg_352_pp0_iter1_reg;
                p_src1_data_V_read_reg_352_pp0_iter3_reg <= p_src1_data_V_read_reg_352_pp0_iter2_reg;
                p_src1_data_V_read_reg_352_pp0_iter4_reg <= p_src1_data_V_read_reg_352_pp0_iter3_reg;
                p_src1_data_V_read_reg_352_pp0_iter5_reg <= p_src1_data_V_read_reg_352_pp0_iter4_reg;
                p_src1_data_V_read_reg_352_pp0_iter6_reg <= p_src1_data_V_read_reg_352_pp0_iter5_reg;
                p_src2_data_V_read_reg_358_pp0_iter1_reg <= p_src2_data_V_read_reg_358;
                p_src2_data_V_read_reg_358_pp0_iter2_reg <= p_src2_data_V_read_reg_358_pp0_iter1_reg;
                p_src2_data_V_read_reg_358_pp0_iter3_reg <= p_src2_data_V_read_reg_358_pp0_iter2_reg;
                p_src2_data_V_read_reg_358_pp0_iter4_reg <= p_src2_data_V_read_reg_358_pp0_iter3_reg;
                p_src2_data_V_read_reg_358_pp0_iter5_reg <= p_src2_data_V_read_reg_358_pp0_iter4_reg;
                p_src2_data_V_read_reg_358_pp0_iter6_reg <= p_src2_data_V_read_reg_358_pp0_iter5_reg;
                tmp_17_reg_369_pp0_iter1_reg <= tmp_17_reg_369;
                tmp_17_reg_369_pp0_iter2_reg <= tmp_17_reg_369_pp0_iter1_reg;
                tmp_17_reg_369_pp0_iter3_reg <= tmp_17_reg_369_pp0_iter2_reg;
                tmp_17_reg_369_pp0_iter4_reg <= tmp_17_reg_369_pp0_iter3_reg;
                tmp_17_reg_369_pp0_iter5_reg <= tmp_17_reg_369_pp0_iter4_reg;
                tmp_reg_364_pp0_iter1_reg <= tmp_reg_364;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_343_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_s_reg_385 <= p_Val2_s_fu_196_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_343 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                p_src1_data_V_read_reg_352 <= p_src1_data_V_dout;
                p_src2_data_V_read_reg_358 <= p_src2_data_V_dout;
                tmp_17_reg_369 <= tmp_17_fu_179_p1(10 downto 10);
                tmp_reg_364 <= tmp_fu_171_p1(10 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_343_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln465_2_reg_444 <= select_ln465_2_fu_316_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_343 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sext_ln421_reg_374 <= sext_ln421_fu_187_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_343_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_364 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sub_ln452_reg_380 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_343_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_17_reg_369_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln453_reg_408 <= grp_fu_217_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, imgheight_empty_n, imgwidth_empty_n, ap_enable_reg_pp0_iter0, icmp_ln431_reg_343, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln887_reg_334, ap_CS_fsm_state3, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln887_reg_334 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((icmp_ln431_reg_343 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln431_reg_343 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    and_ln465_fu_290_p2 <= (xor_ln461_fu_285_p2 and icmp_ln465_reg_439);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(5);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_dst_data_V_full_n, ap_enable_reg_pp0_iter8, icmp_ln431_reg_343_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln431_reg_343_pp0_iter7_reg = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_dst_data_V_full_n, ap_enable_reg_pp0_iter8, icmp_ln431_reg_343_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln431_reg_343_pp0_iter7_reg = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_dst_data_V_full_n, ap_enable_reg_pp0_iter8, icmp_ln431_reg_343_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln431_reg_343_pp0_iter7_reg = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(p_src1_data_V_empty_n, p_src2_data_V_empty_n, ap_enable_reg_pp0_iter0, icmp_ln431_reg_343)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln431_reg_343 = ap_const_lv1_0) and (p_src2_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln431_reg_343 = ap_const_lv1_0) and (p_src1_data_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(p_src1_data_V_empty_n, p_src2_data_V_empty_n, ap_enable_reg_pp0_iter0, icmp_ln431_reg_343)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln431_reg_343 = ap_const_lv1_0) and (p_src2_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln431_reg_343 = ap_const_lv1_0) and (p_src1_data_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, imgheight_empty_n, imgwidth_empty_n)
    begin
                ap_block_state1 <= ((imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp0_stage0_iter8_assign_proc : process(p_dst_data_V_full_n, icmp_ln431_reg_343_pp0_iter7_reg)
    begin
                ap_block_state20_pp0_stage0_iter8 <= ((icmp_ln431_reg_343_pp0_iter7_reg = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage1_iter0_assign_proc : process(p_src1_data_V_empty_n, p_src2_data_V_empty_n, icmp_ln431_reg_343)
    begin
                ap_block_state5_pp0_stage1_iter0 <= (((icmp_ln431_reg_343 = ap_const_lv1_0) and (p_src2_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln431_reg_343 = ap_const_lv1_0) and (p_src1_data_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln431_reg_343)
    begin
        if ((icmp_ln431_reg_343 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln887_reg_334, ap_CS_fsm_state3)
    begin
        if (((icmp_ln887_reg_334 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_t_V_13_phi_fu_137_p4_assign_proc : process(icmp_ln431_reg_343, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, t_V_13_reg_133, add_ln1597_reg_347, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln431_reg_343 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_t_V_13_phi_fu_137_p4 <= add_ln1597_reg_347;
        else 
            ap_phi_mux_t_V_13_phi_fu_137_p4 <= t_V_13_reg_133;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln887_reg_334, ap_CS_fsm_state3)
    begin
        if (((icmp_ln887_reg_334 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_165_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_165_ce <= ap_const_logic_1;
        else 
            grp_fu_165_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_190_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_190_ce <= ap_const_logic_1;
        else 
            grp_fu_190_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_src1_data_V_read_reg_352),12));


    grp_fu_208_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_208_ce <= ap_const_logic_1;
        else 
            grp_fu_208_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_208_p0 <= grp_fu_208_p00(16 - 1 downto 0);
    grp_fu_208_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln452_fu_201_p1),31));
    grp_fu_208_p1 <= ap_const_lv31_3505(15 - 1 downto 0);

    grp_fu_217_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_217_ce <= ap_const_logic_1;
        else 
            grp_fu_217_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_src2_data_V_read_reg_358_pp0_iter4_reg),12));


    grp_fu_237_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_237_ce <= ap_const_logic_1;
        else 
            grp_fu_237_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_237_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln459_reg_402),32));
        grp_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_226_p3),32));

    icmp_ln431_fu_160_p2 <= "1" when (ap_phi_mux_t_V_13_phi_fu_137_p4 = imgwidth_read_reg_329) else "0";
    icmp_ln461_fu_263_p2 <= "1" when (unsigned(sext_ln453_fu_255_p1) < unsigned(mul_ln459_reg_402_pp0_iter6_reg)) else "0";
    icmp_ln465_fu_268_p2 <= "1" when (signed(zext_ln453_1_fu_259_p1) > signed(add_ln464_reg_428)) else "0";
    icmp_ln887_fu_149_p2 <= "1" when (unsigned(zext_ln887_fu_145_p1) < unsigned(imgheight_read_reg_324)) else "0";

    imgheight_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgheight_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgheight_blk_n <= imgheight_empty_n;
        else 
            imgheight_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgheight_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgheight_empty_n, imgwidth_empty_n)
    begin
        if ((not(((imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgheight_read <= ap_const_logic_1;
        else 
            imgheight_read <= ap_const_logic_0;
        end if; 
    end process;


    imgwidth_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgwidth_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgwidth_blk_n <= imgwidth_empty_n;
        else 
            imgwidth_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgwidth_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgheight_empty_n, imgwidth_empty_n)
    begin
        if ((not(((imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgwidth_read <= ap_const_logic_1;
        else 
            imgwidth_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln465_fu_303_p2 <= (icmp_ln461_reg_433 or and_ln465_fu_290_p2);
    p_Val2_1_fu_243_p3 <= 
        sub_ln453_reg_408 when (tmp_17_reg_369_pp0_iter5_reg(0) = '1') else 
        sext_ln452_1_reg_396;
    p_Val2_s_fu_196_p3 <= 
        sub_ln452_reg_380 when (tmp_reg_364_pp0_iter1_reg(0) = '1') else 
        sext_ln421_reg_374;

    p_dst_data_V_blk_n_assign_proc : process(p_dst_data_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, icmp_ln431_reg_343_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln431_reg_343_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst_data_V_blk_n <= p_dst_data_V_full_n;
        else 
            p_dst_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_V_din <= select_ln465_2_reg_444;

    p_dst_data_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln431_reg_343_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln431_reg_343_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_dst_data_V_write <= ap_const_logic_1;
        else 
            p_dst_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src1_data_V_blk_n_assign_proc : process(p_src1_data_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln431_reg_343)
    begin
        if (((icmp_ln431_reg_343 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_src1_data_V_blk_n <= p_src1_data_V_empty_n;
        else 
            p_src1_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src1_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln431_reg_343, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln431_reg_343 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            p_src1_data_V_read <= ap_const_logic_1;
        else 
            p_src1_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src2_data_V_blk_n_assign_proc : process(p_src2_data_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln431_reg_343)
    begin
        if (((icmp_ln431_reg_343 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_src2_data_V_blk_n <= p_src2_data_V_empty_n;
        else 
            p_src2_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src2_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln431_reg_343, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln431_reg_343 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            p_src2_data_V_read <= ap_const_logic_1;
        else 
            p_src2_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln465_1_fu_308_p3 <= 
        ap_const_lv8_2D when (tmp_20_fu_277_p3(0) = '1') else 
        ap_const_lv8_87;
    select_ln465_2_fu_316_p3 <= 
        select_ln465_fu_295_p3 when (or_ln465_fu_303_p2(0) = '1') else 
        select_ln465_1_fu_308_p3;
    select_ln465_fu_295_p3 <= 
        ap_const_lv8_5A when (and_ln465_fu_290_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln421_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_src1_data_V_read_reg_352),12));

        sext_ln452_1_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_src2_data_V_read_reg_358_pp0_iter4_reg),12));

        sext_ln452_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_385),16));

        sext_ln453_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_248_p3),31));

    tmp_17_fu_179_p1 <= p_src2_data_V_dout;
    tmp_18_fu_248_p3 <= (p_Val2_1_reg_423 & ap_const_lv15_0);
    tmp_19_fu_226_p3 <= (p_Val2_s_reg_385_pp0_iter5_reg & ap_const_lv16_0);
    tmp_20_fu_277_p3 <= xor_ln468_fu_273_p2(10 downto 10);
    tmp_fu_171_p1 <= p_src1_data_V_dout;
    xor_ln461_fu_285_p2 <= (icmp_ln461_reg_433 xor ap_const_lv1_1);
    xor_ln468_fu_273_p2 <= (p_src2_data_V_read_reg_358_pp0_iter6_reg xor p_src1_data_V_read_reg_352_pp0_iter6_reg);
    zext_ln453_1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln453_fu_255_p1),32));
    zext_ln887_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_121),16));
end behav;
