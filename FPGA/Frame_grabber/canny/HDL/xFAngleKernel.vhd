-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xFAngleKernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src1_data_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    p_src1_data_V_empty_n : IN STD_LOGIC;
    p_src1_data_V_read : OUT STD_LOGIC;
    p_src2_data_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    p_src2_data_V_empty_n : IN STD_LOGIC;
    p_src2_data_V_read : OUT STD_LOGIC;
    p_dst_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_V_full_n : IN STD_LOGIC;
    p_dst_data_V_write : OUT STD_LOGIC;
    imgheight_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    imgheight_empty_n : IN STD_LOGIC;
    imgheight_read : OUT STD_LOGIC;
    imgwidth_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    imgwidth_empty_n : IN STD_LOGIC;
    imgwidth_read : OUT STD_LOGIC );
end;


architecture behav of xFAngleKernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv31_3505 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000011010100000101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src1_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln431_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src2_data_V_blk_n : STD_LOGIC;
    signal p_dst_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln431_reg_412_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal imgheight_blk_n : STD_LOGIC;
    signal imgwidth_blk_n : STD_LOGIC;
    signal t_V_13_reg_188 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgheight_read_reg_393 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal imgwidth_read_reg_398 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln887_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_208_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_V_reg_407 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln431_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln1597_fu_219_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_src1_data_V_read_reg_421 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_src2_data_V_read_reg_426 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_s_fu_243_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_reg_432 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal t_V_reg_177 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln887_fu_199_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln421_fu_225_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_229_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln421_fu_225_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln452_fu_237_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln452_fu_251_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_259_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_267_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_267_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln452_1_fu_273_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln453_fu_276_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_1_fu_282_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_fu_289_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln453_fu_297_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_19_fu_315_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln459_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln464_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln453_1_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln464_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln468_fu_338_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln461_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln465_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln461_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln465_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_342_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln465_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln465_fu_362_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln465_1_fu_376_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_267_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_267_p00 : STD_LOGIC_VECTOR (30 downto 0);

    component ip_accel_app_mul_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    ip_accel_app_mul_g8j_U129 : component ip_accel_app_mul_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_267_p0,
        din1 => grp_fu_267_p1,
        ce => grp_fu_267_ce,
        dout => grp_fu_267_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln887_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln887_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln887_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_13_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_13_reg_188 <= add_ln1597_fu_219_p2;
            elsif (((icmp_ln887_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_13_reg_188 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    t_V_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_reg_177 <= i_V_reg_407;
            elsif ((not(((ap_start = ap_const_logic_0) or (imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_177 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_407 <= i_V_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln431_reg_412 <= icmp_ln431_fu_214_p2;
                icmp_ln431_reg_412_pp0_iter1_reg <= icmp_ln431_reg_412;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                imgheight_read_reg_393 <= imgheight_dout;
                imgwidth_read_reg_398 <= imgwidth_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_412 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_s_reg_432 <= p_Val2_s_fu_243_p3;
                p_src1_data_V_read_reg_421 <= p_src1_data_V_dout;
                p_src2_data_V_read_reg_426 <= p_src2_data_V_dout;
                tmp_17_reg_442 <= tmp_17_fu_259_p1(10 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, imgheight_empty_n, imgwidth_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln887_fu_203_p2, ap_CS_fsm_state2, icmp_ln431_fu_214_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln431_fu_214_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln431_fu_214_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1597_fu_219_p2 <= std_logic_vector(unsigned(t_V_13_reg_188) + unsigned(ap_const_lv16_1));
    add_ln464_fu_326_p2 <= std_logic_vector(unsigned(zext_ln459_fu_305_p1) + unsigned(sext_ln464_fu_322_p1));
    and_ln465_fu_356_p2 <= (xor_ln461_fu_350_p2 and icmp_ln465_fu_332_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src1_data_V_empty_n, p_src2_data_V_empty_n, p_dst_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln431_reg_412, ap_enable_reg_pp0_iter2, icmp_ln431_reg_412_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln431_reg_412_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln431_reg_412 = ap_const_lv1_0) and (p_src2_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln431_reg_412 = ap_const_lv1_0) and (p_src1_data_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src1_data_V_empty_n, p_src2_data_V_empty_n, p_dst_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln431_reg_412, ap_enable_reg_pp0_iter2, icmp_ln431_reg_412_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln431_reg_412_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln431_reg_412 = ap_const_lv1_0) and (p_src2_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln431_reg_412 = ap_const_lv1_0) and (p_src1_data_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src1_data_V_empty_n, p_src2_data_V_empty_n, p_dst_data_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln431_reg_412, ap_enable_reg_pp0_iter2, icmp_ln431_reg_412_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln431_reg_412_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln431_reg_412 = ap_const_lv1_0) and (p_src2_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln431_reg_412 = ap_const_lv1_0) and (p_src1_data_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, imgheight_empty_n, imgwidth_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src1_data_V_empty_n, p_src2_data_V_empty_n, icmp_ln431_reg_412)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((icmp_ln431_reg_412 = ap_const_lv1_0) and (p_src2_data_V_empty_n = ap_const_logic_0)) or ((icmp_ln431_reg_412 = ap_const_lv1_0) and (p_src1_data_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(p_dst_data_V_full_n, icmp_ln431_reg_412_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((icmp_ln431_reg_412_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_data_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln431_fu_214_p2)
    begin
        if ((icmp_ln431_fu_214_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln887_fu_203_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln887_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln887_fu_203_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln887_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_267_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_267_ce <= ap_const_logic_1;
        else 
            grp_fu_267_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_267_p0 <= grp_fu_267_p00(16 - 1 downto 0);
    grp_fu_267_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln452_fu_251_p1),31));
    grp_fu_267_p1 <= ap_const_lv31_3505(15 - 1 downto 0);
    i_V_fu_208_p2 <= std_logic_vector(unsigned(t_V_reg_177) + unsigned(ap_const_lv13_1));
    icmp_ln431_fu_214_p2 <= "1" when (t_V_13_reg_188 = imgwidth_read_reg_398) else "0";
    icmp_ln461_fu_309_p2 <= "1" when (unsigned(sext_ln453_fu_297_p1) < unsigned(grp_fu_267_p2)) else "0";
    icmp_ln465_fu_332_p2 <= "1" when (signed(zext_ln453_1_fu_301_p1) > signed(add_ln464_fu_326_p2)) else "0";
    icmp_ln887_fu_203_p2 <= "1" when (unsigned(zext_ln887_fu_199_p1) < unsigned(imgheight_read_reg_393)) else "0";

    imgheight_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgheight_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgheight_blk_n <= imgheight_empty_n;
        else 
            imgheight_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgheight_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgheight_empty_n, imgwidth_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgheight_read <= ap_const_logic_1;
        else 
            imgheight_read <= ap_const_logic_0;
        end if; 
    end process;


    imgwidth_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgwidth_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgwidth_blk_n <= imgwidth_empty_n;
        else 
            imgwidth_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgwidth_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, imgheight_empty_n, imgwidth_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (imgwidth_empty_n = ap_const_logic_0) or (imgheight_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imgwidth_read <= ap_const_logic_1;
        else 
            imgwidth_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln465_fu_370_p2 <= (icmp_ln461_fu_309_p2 or and_ln465_fu_356_p2);
    p_Val2_1_fu_282_p3 <= 
        sub_ln453_fu_276_p2 when (tmp_17_reg_442(0) = '1') else 
        sext_ln452_1_fu_273_p1;
    p_Val2_s_fu_243_p3 <= 
        sub_ln452_fu_237_p2 when (tmp_fu_229_p3(0) = '1') else 
        sext_ln421_fu_225_p1;

    p_dst_data_V_blk_n_assign_proc : process(p_dst_data_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln431_reg_412_pp0_iter1_reg)
    begin
        if (((icmp_ln431_reg_412_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dst_data_V_blk_n <= p_dst_data_V_full_n;
        else 
            p_dst_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_V_din <= 
        select_ln465_fu_362_p3 when (or_ln465_fu_370_p2(0) = '1') else 
        select_ln465_1_fu_376_p3;

    p_dst_data_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln431_reg_412_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln431_reg_412_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_dst_data_V_write <= ap_const_logic_1;
        else 
            p_dst_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src1_data_V_blk_n_assign_proc : process(p_src1_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln431_reg_412)
    begin
        if (((icmp_ln431_reg_412 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src1_data_V_blk_n <= p_src1_data_V_empty_n;
        else 
            p_src1_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src1_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln431_reg_412, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln431_reg_412 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_src1_data_V_read <= ap_const_logic_1;
        else 
            p_src1_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src2_data_V_blk_n_assign_proc : process(p_src2_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln431_reg_412)
    begin
        if (((icmp_ln431_reg_412 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src2_data_V_blk_n <= p_src2_data_V_empty_n;
        else 
            p_src2_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src2_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln431_reg_412, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln431_reg_412 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_src2_data_V_read <= ap_const_logic_1;
        else 
            p_src2_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln465_1_fu_376_p3 <= 
        ap_const_lv8_2D when (tmp_20_fu_342_p3(0) = '1') else 
        ap_const_lv8_87;
    select_ln465_fu_362_p3 <= 
        ap_const_lv8_5A when (and_ln465_fu_356_p2(0) = '1') else 
        ap_const_lv8_0;
    sext_ln421_fu_225_p0 <= p_src1_data_V_dout;
        sext_ln421_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln421_fu_225_p0),12));

        sext_ln452_1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_src2_data_V_read_reg_426),12));

        sext_ln452_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_243_p3),16));

        sext_ln453_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_289_p3),31));

        sext_ln464_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_315_p3),32));

    sub_ln452_fu_237_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln421_fu_225_p1));
    sub_ln453_fu_276_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln452_1_fu_273_p1));
    tmp_17_fu_259_p1 <= p_src2_data_V_dout;
    tmp_18_fu_289_p3 <= (p_Val2_1_fu_282_p3 & ap_const_lv15_0);
    tmp_19_fu_315_p3 <= (p_Val2_s_reg_432 & ap_const_lv16_0);
    tmp_20_fu_342_p3 <= xor_ln468_fu_338_p2(10 downto 10);
    tmp_fu_229_p1 <= p_src1_data_V_dout;
    tmp_fu_229_p3 <= tmp_fu_229_p1(10 downto 10);
    xor_ln461_fu_350_p2 <= (icmp_ln461_fu_309_p2 xor ap_const_lv1_1);
    xor_ln468_fu_338_p2 <= (p_src2_data_V_read_reg_426 xor p_src1_data_V_read_reg_421);
    zext_ln453_1_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln453_fu_297_p1),32));
    zext_ln459_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_267_p2),32));
    zext_ln887_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_177),16));
end behav;
