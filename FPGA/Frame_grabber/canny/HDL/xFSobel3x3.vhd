-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xFSobel3x3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_mat_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_mat_data_V_empty_n : IN STD_LOGIC;
    p_src_mat_data_V_read : OUT STD_LOGIC;
    p_out_mat_data_V_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_out_mat_data_V_full_n : IN STD_LOGIC;
    p_out_mat_data_V_write : OUT STD_LOGIC;
    p_out_mat1_data_V_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_out_mat1_data_V_full_n : IN STD_LOGIC;
    p_out_mat1_data_V_write : OUT STD_LOGIC;
    img_height : IN STD_LOGIC_VECTOR (15 downto 0);
    img_width : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of xFSobel3x3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv18_2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_mat_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln439_reg_1158 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln887_6_reg_1324 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_reg_1348 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_out_mat_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal icmp_ln891_reg_1367 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_reg_1367_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_out_mat1_data_V_blk_n : STD_LOGIC;
    signal index_assign_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_reg_327 : STD_LOGIC_VECTOR (12 downto 0);
    signal t_V_8_reg_396 : STD_LOGIC_VECTOR (12 downto 0);
    signal t_V_8_reg_396_pp1_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state23_pp1_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op212_read_state25 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal src_buf_2_1_0_reg_408 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_2_0_0_reg_420 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_1_1_0_reg_432 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_1_0_0_reg_444 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_0_1_0_reg_456 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf_0_0_0_reg_468 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_480 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state6_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal buf_0_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal icmp_ln887_6_reg_1324_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_491 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_495 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_ind_2_V_load_reg_1100 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_ind_2_V_1_load_reg_1105 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_ind_2_V_2_load_reg_1111 : STD_LOGIC_VECTOR (12 downto 0);
    signal init_row_ind_fu_514_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal init_buf_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln429_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln439_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln439_reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln887_fu_546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln887_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln321_2_fu_560_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_2_reg_1144 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln887_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_555_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal readind_1_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln321_fu_563_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_reg_1154 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln439_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_573_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_2_reg_1162 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal readind_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_603_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_reg_1185 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal buf_0_V_addr_reg_1190 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln887_3_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_625_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_649_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_1217 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_628_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_reg_1222 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_637_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln193_reg_1227 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_643_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln330_reg_1232 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln887_5_fu_664_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln887_5_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_5_reg_1246 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_4_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_reg_1251 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_683_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_reg_1258 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln895_3_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_3_reg_1269 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_691_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_2_reg_1274 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal trunc_ln544_fu_702_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln544_reg_1279 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_reg_1284 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_2_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_2_reg_1289 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal and_ln330_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_reg_1294 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal and_ln330_1_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_1_reg_1299 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_2_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_2_reg_1304 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln321_3_fu_731_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_3_reg_1309 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_4_fu_735_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_4_reg_1314 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_5_fu_739_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_5_reg_1319 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln887_6_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_6_reg_1324_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_6_reg_1324_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_6_reg_1324_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_6_reg_1324_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_6_reg_1324_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_6_reg_1324_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_7_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_7_reg_1328 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_7_reg_1328_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_7_reg_1328_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_7_reg_1328_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln321_6_fu_778_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_6_reg_1336 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_6_reg_1336_pp1_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_6_reg_1336_pp1_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_6_reg_1336_pp1_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_756_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_3_reg_1343 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state24_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state26_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state28_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_state30_pp1_stage1_iter3 : BOOLEAN;
    signal ap_block_state32_pp1_stage1_iter4 : BOOLEAN;
    signal ap_block_state34_pp1_stage1_iter5 : BOOLEAN;
    signal ap_block_state36_pp1_stage1_iter6 : BOOLEAN;
    signal ap_block_state38_pp1_stage1_iter7 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal and_ln198_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_reg_1367_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_reg_1367_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_reg_1367_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_reg_1367_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_cop_0_V_1_fu_893_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_0_V_1_reg_1374 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_1_V_1_fu_900_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_1_V_1_reg_1381 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_2_V_1_fu_907_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_2_V_1_reg_1388 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_914_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_reg_1395 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_2_fu_922_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_2_reg_1400 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_3_fu_926_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_3_reg_1406 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_4_fu_944_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_947_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_2_fu_966_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_2_reg_1434 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_2_reg_1434_pp1_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3_fu_974_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3_reg_1439 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3_reg_1439_pp1_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3_reg_1439_pp1_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal buf_cop_0_V_2_fu_992_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_0_V_2_reg_1444 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal buf_cop_1_V_2_fu_998_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_1_V_2_reg_1449 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_2_V_2_fu_1004_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_2_V_2_reg_1454 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_950_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_3_reg_1459 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_956_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_4_reg_1464 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_4_reg_1464_pp1_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_960_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln68_reg_1469 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_982_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_5_reg_1474 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_987_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_6_reg_1479 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1016_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln68_reg_1504 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1028_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln68_2_reg_1509 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1037_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal g_x_V_reg_1529 : STD_LOGIC_VECTOR (10 downto 0);
    signal g_x_V_reg_1529_pp1_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1048_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln68_3_reg_1534 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1057_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal g_y_V_reg_1544 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1062_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state24 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal buf_0_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_0_V_ce0 : STD_LOGIC;
    signal buf_0_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_0_V_ce1 : STD_LOGIC;
    signal buf_0_V_we1 : STD_LOGIC;
    signal buf_0_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_1_V_ce0 : STD_LOGIC;
    signal buf_1_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_1_V_ce1 : STD_LOGIC;
    signal buf_1_V_we1 : STD_LOGIC;
    signal buf_2_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_2_V_ce0 : STD_LOGIC;
    signal buf_2_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_2_V_ce1 : STD_LOGIC;
    signal buf_2_V_we1 : STD_LOGIC;
    signal ap_phi_mux_i_op_assign_phi_fu_277_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_op_assign_reg_273 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal readind_0_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_1_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_index_assign_phi_fu_319_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_t_V_phi_fu_331_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal t_V_6_reg_339 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal row_ind_1_V_1_reg_351 : STD_LOGIC_VECTOR (12 downto 0);
    signal zero_ind_V_reg_372 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_ind_0_V_reg_361 : STD_LOGIC_VECTOR (12 downto 0);
    signal t_V_7_reg_384 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_t_V_8_phi_fu_400_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_src_buf_2_1_0_phi_fu_412_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_phi_mux_src_buf_2_0_0_phi_fu_424_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_src_buf_1_1_0_phi_fu_436_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_src_buf_1_0_0_phi_fu_448_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_src_buf_0_1_0_phi_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_src_buf_0_0_0_phi_fu_472_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln544_2_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_3_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_4_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_ind_2_V_fu_106 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_ind_0_V_2_fu_520_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_ind_2_V_1_fu_110 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_ind_2_V_2_fu_114 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln887_3_fu_609_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_637_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln887_4_fu_660_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_691_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln887_7_fu_747_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln887_6_fu_743_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_767_p5 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_806_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_817_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_835_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_846_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_864_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_875_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_0_V_fu_828_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_1_V_fu_857_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_cop_2_V_fu_886_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_1_fu_933_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_960_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_960_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1016_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1016_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1028_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1028_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1037_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1048_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1048_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1057_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_573_ce : STD_LOGIC;
    signal grp_fu_579_ce : STD_LOGIC;
    signal grp_fu_756_ce : STD_LOGIC;
    signal grp_fu_950_ce : STD_LOGIC;
    signal grp_fu_956_ce : STD_LOGIC;
    signal grp_fu_960_ce : STD_LOGIC;
    signal grp_fu_982_ce : STD_LOGIC;
    signal grp_fu_987_ce : STD_LOGIC;
    signal grp_fu_1016_ce : STD_LOGIC;
    signal grp_fu_1028_ce : STD_LOGIC;
    signal grp_fu_1037_ce : STD_LOGIC;
    signal grp_fu_1048_ce : STD_LOGIC;
    signal grp_fu_1057_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component ip_accel_app_add_ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_accel_app_add_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component ip_accel_app_add_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component ip_accel_app_add_ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component ip_accel_app_add_pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component ip_accel_app_mux_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ip_accel_app_sub_qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component ip_accel_app_sub_rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component ip_accel_app_mux_sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component ip_accel_app_add_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component ip_accel_app_sub_tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component ip_accel_app_add_udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component ip_accel_app_sub_vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component ip_accel_app_sub_wdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component ip_accel_app_add_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component xFAverageGaussiancud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buf_0_V_U : component xFAverageGaussiancud
    generic map (
        DataWidth => 8,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_0_V_address0,
        ce0 => buf_0_V_ce0,
        q0 => buf_0_V_q0,
        address1 => buf_0_V_address1,
        ce1 => buf_0_V_ce1,
        we1 => buf_0_V_we1,
        d1 => buf_0_V_d1);

    buf_1_V_U : component xFAverageGaussiancud
    generic map (
        DataWidth => 8,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_1_V_address0,
        ce0 => buf_1_V_ce0,
        q0 => buf_1_V_q0,
        address1 => buf_1_V_address1,
        ce1 => buf_1_V_ce1,
        we1 => buf_1_V_we1,
        d1 => reg_480);

    buf_2_V_U : component xFAverageGaussiancud
    generic map (
        DataWidth => 8,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_2_V_address0,
        ce0 => buf_2_V_ce0,
        q0 => buf_2_V_q0,
        address1 => buf_2_V_address1,
        ce1 => buf_2_V_ce1,
        we1 => buf_2_V_we1,
        d1 => reg_480);

    ip_accel_app_add_ncg_U116 : component ip_accel_app_add_ncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln439_reg_1129,
        din1 => readind_0_reg_294,
        ce => ap_const_logic_1,
        dout => grp_fu_555_p2);

    ip_accel_app_add_g8j_U117 : component ip_accel_app_add_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_t_V_phi_fu_331_p4,
        din1 => ap_const_lv13_1,
        ce => grp_fu_573_ce,
        dout => grp_fu_573_p2);

    ip_accel_app_add_ncg_U118 : component ip_accel_app_add_ncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_index_assign_phi_fu_319_p4,
        din1 => ap_const_lv32_1,
        ce => grp_fu_579_ce,
        dout => grp_fu_579_p2);

    ip_accel_app_add_ncg_U119 : component ip_accel_app_add_ncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_op_assign_1_reg_306,
        din1 => ap_const_lv32_1,
        ce => ap_const_logic_1,
        dout => grp_fu_592_p2);

    ip_accel_app_add_ncg_U120 : component ip_accel_app_add_ncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln439_reg_1129,
        din1 => indvars_iv_reg_284,
        ce => ap_const_logic_1,
        dout => grp_fu_598_p2);

    ip_accel_app_add_g8j_U121 : component ip_accel_app_add_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t_V_6_reg_339,
        din1 => ap_const_lv13_1,
        ce => ap_const_logic_1,
        dout => grp_fu_603_p2);

    ip_accel_app_add_hbi_U122 : component ip_accel_app_add_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv17_1,
        din1 => lhs_V_fu_625_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_628_p2);

    ip_accel_app_add_ocq_U123 : component ip_accel_app_add_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv14_1,
        din1 => grp_fu_637_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_637_p2);

    ip_accel_app_add_pcA_U124 : component ip_accel_app_add_pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv17_1FFFF,
        din1 => lhs_V_fu_625_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_643_p2);

    ip_accel_app_mux_ibs_U125 : component ip_accel_app_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_487,
        din1 => reg_491,
        din2 => reg_495,
        din3 => trunc_ln321_2_reg_1144,
        dout => tmp_6_fu_649_p5);

    ip_accel_app_sub_qcK_U126 : component ip_accel_app_sub_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln887_5_fu_664_p1,
        din1 => add_ln330_reg_1232,
        ce => ap_const_logic_1,
        dout => grp_fu_683_p2);

    ip_accel_app_sub_rcU_U127 : component ip_accel_app_sub_rcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv18_2,
        din1 => grp_fu_691_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_691_p2);

    ip_accel_app_add_g8j_U128 : component ip_accel_app_add_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_t_V_8_phi_fu_400_p4,
        din1 => ap_const_lv13_1,
        ce => grp_fu_756_ce,
        dout => grp_fu_756_p2);

    ip_accel_app_mux_sc4_U129 : component ip_accel_app_mux_sc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        din3_WIDTH => 2,
        dout_WIDTH => 13)
    port map (
        din0 => zero_ind_V_reg_372,
        din1 => row_ind_0_V_reg_361,
        din2 => row_ind_1_V_1_reg_351,
        din3 => trunc_ln544_reg_1279,
        dout => tmp_7_fu_767_p5);

    ip_accel_app_mux_ibs_U130 : component ip_accel_app_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_487,
        din1 => reg_491,
        din2 => reg_495,
        din3 => trunc_ln321_6_reg_1336_pp1_iter3_reg,
        dout => tmp_s_fu_806_p5);

    ip_accel_app_mux_ibs_U131 : component ip_accel_app_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_487,
        din1 => reg_491,
        din2 => reg_495,
        din3 => trunc_ln321_4_reg_1314,
        dout => tmp_2_fu_817_p5);

    ip_accel_app_mux_ibs_U132 : component ip_accel_app_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_487,
        din1 => reg_491,
        din2 => reg_495,
        din3 => trunc_ln321_6_reg_1336_pp1_iter3_reg,
        dout => tmp_10_fu_835_p5);

    ip_accel_app_mux_ibs_U133 : component ip_accel_app_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_487,
        din1 => reg_491,
        din2 => reg_495,
        din3 => trunc_ln321_5_reg_1319,
        dout => tmp_11_fu_846_p5);

    ip_accel_app_mux_ibs_U134 : component ip_accel_app_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_487,
        din1 => reg_491,
        din2 => reg_495,
        din3 => trunc_ln321_6_reg_1336_pp1_iter3_reg,
        dout => tmp_12_fu_864_p5);

    ip_accel_app_mux_ibs_U135 : component ip_accel_app_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_487,
        din1 => reg_491,
        din2 => reg_495,
        din3 => trunc_ln321_3_reg_1309,
        dout => tmp_13_fu_875_p5);

    ip_accel_app_add_jbC_U136 : component ip_accel_app_add_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => lhs_V_4_fu_944_p1,
        din1 => rhs_V_fu_947_p1,
        ce => grp_fu_950_ce,
        dout => grp_fu_950_p2);

    ip_accel_app_add_jbC_U137 : component ip_accel_app_add_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => lhs_V_2_reg_1400,
        din1 => rhs_V_3_reg_1406,
        ce => grp_fu_956_ce,
        dout => grp_fu_956_p2);

    ip_accel_app_sub_tde_U138 : component ip_accel_app_sub_tde
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_960_p0,
        din1 => grp_fu_960_p1,
        ce => grp_fu_960_ce,
        dout => grp_fu_960_p2);

    ip_accel_app_add_jbC_U139 : component ip_accel_app_add_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rhs_V_fu_947_p1,
        din1 => rhs_V_3_reg_1406,
        ce => grp_fu_982_ce,
        dout => grp_fu_982_p2);

    ip_accel_app_add_jbC_U140 : component ip_accel_app_add_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => lhs_V_4_fu_944_p1,
        din1 => lhs_V_2_reg_1400,
        ce => grp_fu_987_ce,
        dout => grp_fu_987_p2);

    ip_accel_app_add_udo_U141 : component ip_accel_app_add_udo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1016_p0,
        din1 => grp_fu_1016_p1,
        ce => grp_fu_1016_ce,
        dout => grp_fu_1016_p2);

    ip_accel_app_sub_tde_U142 : component ip_accel_app_sub_tde
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1028_p0,
        din1 => grp_fu_1028_p1,
        ce => grp_fu_1028_ce,
        dout => grp_fu_1028_p2);

    ip_accel_app_sub_vdy_U143 : component ip_accel_app_sub_vdy
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln68_reg_1504,
        din1 => grp_fu_1037_p1,
        ce => grp_fu_1037_ce,
        dout => grp_fu_1037_p2);

    ip_accel_app_sub_wdI_U144 : component ip_accel_app_sub_wdI
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1048_p0,
        din1 => grp_fu_1048_p1,
        ce => grp_fu_1048_ce,
        dout => grp_fu_1048_p2);

    ip_accel_app_add_lbW_U145 : component ip_accel_app_add_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1057_p0,
        din1 => sub_ln68_3_reg_1534,
        ce => grp_fu_1057_ce,
        dout => grp_fu_1057_p2);

    ip_accel_app_add_g8j_U146 : component ip_accel_app_add_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t_V_7_reg_384,
        din1 => ap_const_lv13_1,
        ce => ap_const_logic_1,
        dout => grp_fu_1062_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state24) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state24)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state24);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln429_fu_508_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_op_assign_1_reg_306 <= init_buf_fu_539_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_op_assign_1_reg_306 <= grp_fu_592_p2;
            end if; 
        end if;
    end process;

    i_op_assign_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln429_fu_508_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_op_assign_reg_273 <= init_row_ind_fu_514_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_op_assign_reg_273 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    index_assign_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln439_reg_1158 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                index_assign_reg_316 <= readind_reg_1167;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                index_assign_reg_316 <= readind_0_reg_294;
            end if; 
        end if;
    end process;

    indvars_iv_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln429_fu_508_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv_reg_284 <= zext_ln439_fu_543_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvars_iv_reg_284 <= grp_fu_598_p2;
            end if; 
        end if;
    end process;

    readind_0_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln429_fu_508_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                readind_0_reg_294 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                readind_0_reg_294 <= readind_1_reg_1149;
            end if; 
        end if;
    end process;

    row_ind_0_V_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                row_ind_0_V_reg_361 <= row_ind_1_V_1_reg_351;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                row_ind_0_V_reg_361 <= row_ind_2_V_1_load_reg_1105;
            end if; 
        end if;
    end process;

    row_ind_1_V_1_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                row_ind_1_V_1_reg_351 <= zero_ind_V_reg_372;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                row_ind_1_V_1_reg_351 <= row_ind_2_V_2_load_reg_1111;
            end if; 
        end if;
    end process;

    src_buf_0_0_0_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                src_buf_0_0_0_reg_468 <= buf_cop_0_V_2_reg_1444;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                src_buf_0_0_0_reg_468 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf_0_1_0_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                src_buf_0_1_0_reg_456 <= buf_cop_0_V_1_reg_1374;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                src_buf_0_1_0_reg_456 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf_1_0_0_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                src_buf_1_0_0_reg_444 <= buf_cop_1_V_2_reg_1449;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                src_buf_1_0_0_reg_444 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf_1_1_0_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                src_buf_1_1_0_reg_432 <= buf_cop_1_V_1_reg_1381;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                src_buf_1_1_0_reg_432 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf_2_0_0_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                src_buf_2_0_0_reg_420 <= buf_cop_2_V_2_reg_1454;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                src_buf_2_0_0_reg_420 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf_2_1_0_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                src_buf_2_1_0_reg_408 <= buf_cop_2_V_1_reg_1388;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                src_buf_2_1_0_reg_408 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    t_V_6_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_550_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_V_6_reg_339 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                t_V_6_reg_339 <= col_V_reg_1185;
            end if; 
        end if;
    end process;

    t_V_7_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                t_V_7_reg_384 <= grp_fu_1062_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                t_V_7_reg_384 <= ap_const_lv13_1;
            end if; 
        end if;
    end process;

    t_V_8_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                t_V_8_reg_396 <= col_V_3_reg_1343;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                t_V_8_reg_396 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    t_V_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln439_reg_1158 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_reg_327 <= col_V_2_reg_1162;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                t_V_reg_327 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    zero_ind_V_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                zero_ind_V_reg_372 <= row_ind_0_V_reg_361;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                zero_ind_V_reg_372 <= row_ind_2_V_load_reg_1100;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln193_reg_1227 <= grp_fu_637_p2;
                add_ln330_reg_1232 <= grp_fu_643_p2;
                ret_V_reg_1222 <= grp_fu_628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter5_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                add_ln68_reg_1504 <= grp_fu_1016_p2;
                sub_ln68_2_reg_1509 <= grp_fu_1028_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                and_ln198_reg_1348 <= and_ln198_fu_782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                and_ln330_1_reg_1299 <= and_ln330_1_fu_723_p2;
                and_ln330_2_reg_1304 <= and_ln330_2_fu_727_p2;
                and_ln330_reg_1294 <= and_ln330_fu_719_p2;
                trunc_ln321_3_reg_1309 <= trunc_ln321_3_fu_731_p1;
                trunc_ln321_4_reg_1314 <= trunc_ln321_4_fu_735_p1;
                trunc_ln321_5_reg_1319 <= trunc_ln321_5_fu_739_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_3_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                buf_0_V_addr_reg_1190 <= zext_ln544_fu_618_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then
                buf_cop_0_V_1_reg_1374 <= buf_cop_0_V_1_fu_893_p3;
                buf_cop_1_V_1_reg_1381 <= buf_cop_1_V_1_fu_900_p3;
                buf_cop_2_V_1_reg_1388 <= buf_cop_2_V_1_fu_907_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                buf_cop_0_V_2_reg_1444 <= buf_cop_0_V_2_fu_992_p3;
                buf_cop_1_V_2_reg_1449 <= buf_cop_1_V_2_fu_998_p3;
                buf_cop_2_V_2_reg_1454 <= buf_cop_2_V_2_fu_1004_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                col_V_2_reg_1162 <= grp_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                col_V_3_reg_1343 <= grp_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                col_V_reg_1185 <= grp_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter6_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                g_x_V_reg_1529 <= grp_fu_1037_p2;
                sub_ln68_3_reg_1534 <= grp_fu_1048_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                g_x_V_reg_1529_pp1_iter7_reg <= g_x_V_reg_1529;
                ret_V_4_reg_1464_pp1_iter5_reg <= ret_V_4_reg_1464;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter7_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                g_y_V_reg_1544 <= grp_fu_1057_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln439_reg_1158 <= icmp_ln439_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_4_fu_668_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                icmp_ln887_5_reg_1246 <= icmp_ln887_5_fu_673_p2;
                icmp_ln895_reg_1251 <= icmp_ln895_fu_678_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln887_6_reg_1324 <= icmp_ln887_6_fu_751_p2;
                icmp_ln887_6_reg_1324_pp1_iter1_reg <= icmp_ln887_6_reg_1324;
                icmp_ln887_6_reg_1324_pp1_iter2_reg <= icmp_ln887_6_reg_1324_pp1_iter1_reg;
                icmp_ln887_6_reg_1324_pp1_iter3_reg <= icmp_ln887_6_reg_1324_pp1_iter2_reg;
                icmp_ln887_6_reg_1324_pp1_iter4_reg <= icmp_ln887_6_reg_1324_pp1_iter3_reg;
                icmp_ln887_6_reg_1324_pp1_iter5_reg <= icmp_ln887_6_reg_1324_pp1_iter4_reg;
                icmp_ln887_6_reg_1324_pp1_iter6_reg <= icmp_ln887_6_reg_1324_pp1_iter5_reg;
                icmp_ln887_6_reg_1324_pp1_iter7_reg <= icmp_ln887_6_reg_1324_pp1_iter6_reg;
                icmp_ln887_7_reg_1328_pp1_iter1_reg <= icmp_ln887_7_reg_1328;
                icmp_ln887_7_reg_1328_pp1_iter2_reg <= icmp_ln887_7_reg_1328_pp1_iter1_reg;
                icmp_ln887_7_reg_1328_pp1_iter3_reg <= icmp_ln887_7_reg_1328_pp1_iter2_reg;
                icmp_ln891_reg_1367_pp1_iter3_reg <= icmp_ln891_reg_1367;
                icmp_ln891_reg_1367_pp1_iter4_reg <= icmp_ln891_reg_1367_pp1_iter3_reg;
                icmp_ln891_reg_1367_pp1_iter5_reg <= icmp_ln891_reg_1367_pp1_iter4_reg;
                icmp_ln891_reg_1367_pp1_iter6_reg <= icmp_ln891_reg_1367_pp1_iter5_reg;
                icmp_ln891_reg_1367_pp1_iter7_reg <= icmp_ln891_reg_1367_pp1_iter6_reg;
                    r_V_2_reg_1434_pp1_iter5_reg(8 downto 1) <= r_V_2_reg_1434(8 downto 1);
                    r_V_3_reg_1439_pp1_iter5_reg(8 downto 1) <= r_V_3_reg_1439(8 downto 1);
                    r_V_3_reg_1439_pp1_iter6_reg(8 downto 1) <= r_V_3_reg_1439_pp1_iter5_reg(8 downto 1);
                t_V_8_reg_396_pp1_iter1_reg <= t_V_8_reg_396;
                trunc_ln321_6_reg_1336_pp1_iter1_reg <= trunc_ln321_6_reg_1336;
                trunc_ln321_6_reg_1336_pp1_iter2_reg <= trunc_ln321_6_reg_1336_pp1_iter1_reg;
                trunc_ln321_6_reg_1336_pp1_iter3_reg <= trunc_ln321_6_reg_1336_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_fu_751_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln887_7_reg_1328 <= icmp_ln887_7_fu_762_p2;
                trunc_ln321_6_reg_1336 <= trunc_ln321_6_fu_778_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln891_reg_1367 <= icmp_ln891_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                icmp_ln895_2_reg_1289 <= icmp_ln895_2_fu_714_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                icmp_ln895_3_reg_1269 <= icmp_ln895_3_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                    lhs_V_2_reg_1400(7 downto 0) <= lhs_V_2_fu_922_p1(7 downto 0);
                    r_V_reg_1395(8 downto 1) <= r_V_fu_914_p3(8 downto 1);
                    rhs_V_3_reg_1406(7 downto 0) <= rhs_V_3_fu_926_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    r_V_2_reg_1434(8 downto 1) <= r_V_2_fu_966_p3(8 downto 1);
                    r_V_3_reg_1439(8 downto 1) <= r_V_3_fu_974_p3(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                readind_1_reg_1149 <= grp_fu_555_p2;
                trunc_ln321_reg_1154 <= trunc_ln321_fu_563_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln439_reg_1158 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                readind_reg_1167 <= grp_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_predicate_op212_read_state25 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln439_reg_1158 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_480 <= p_src_mat_data_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln887_6_reg_1324_pp1_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then
                reg_487 <= buf_0_V_q0;
                reg_491 <= buf_1_V_q0;
                reg_495 <= buf_2_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                ret_V_1_reg_1258 <= grp_fu_683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                ret_V_2_reg_1274 <= grp_fu_691_p2;
                tmp_14_reg_1284 <= grp_fu_691_p2(17 downto 17);
                trunc_ln544_reg_1279 <= trunc_ln544_fu_702_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                ret_V_3_reg_1459 <= grp_fu_950_p2;
                ret_V_4_reg_1464 <= grp_fu_956_p2;
                ret_V_5_reg_1474 <= grp_fu_982_p2;
                ret_V_6_reg_1479 <= grp_fu_987_p2;
                sub_ln68_reg_1469 <= grp_fu_960_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln429_fu_508_p2 = ap_const_lv1_0) and (ap_phi_mux_i_op_assign_phi_fu_277_p4 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    row_ind_2_V_1_fu_110(1 downto 0) <= row_ind_0_V_2_fu_520_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    row_ind_2_V_1_load_reg_1105(1 downto 0) <= row_ind_2_V_1_fu_110(1 downto 0);
                    row_ind_2_V_2_load_reg_1111(1 downto 0) <= row_ind_2_V_2_fu_114(1 downto 0);
                    row_ind_2_V_load_reg_1100(1 downto 0) <= row_ind_2_V_fu_106(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_phi_mux_i_op_assign_phi_fu_277_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_op_assign_phi_fu_277_p4 = ap_const_lv2_0)) and (icmp_ln429_fu_508_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    row_ind_2_V_2_fu_114(1 downto 0) <= row_ind_0_V_2_fu_520_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln429_fu_508_p2 = ap_const_lv1_0) and (ap_phi_mux_i_op_assign_phi_fu_277_p4 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    row_ind_2_V_fu_106(1 downto 0) <= row_ind_0_V_2_fu_520_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_6_reg_1217 <= tmp_6_fu_649_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_550_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln321_2_reg_1144 <= trunc_ln321_2_fu_560_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln429_fu_508_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln439_reg_1129(15 downto 0) <= zext_ln439_fu_543_p1(15 downto 0);
                    zext_ln887_reg_1136(1 downto 0) <= zext_ln887_fu_546_p1(1 downto 0);
            end if;
        end if;
    end process;
    row_ind_2_V_load_reg_1100(12 downto 2) <= "00000000000";
    row_ind_2_V_1_load_reg_1105(12 downto 2) <= "00000000000";
    row_ind_2_V_2_load_reg_1111(12 downto 2) <= "00000000000";
    zext_ln439_reg_1129(31 downto 16) <= "0000000000000000";
    zext_ln887_reg_1136(31 downto 2) <= "000000000000000000000000000000";
    r_V_reg_1395(0) <= '0';
    lhs_V_2_reg_1400(8) <= '0';
    rhs_V_3_reg_1406(8) <= '0';
    r_V_2_reg_1434(0) <= '0';
    r_V_2_reg_1434_pp1_iter5_reg(0) <= '0';
    r_V_3_reg_1439(0) <= '0';
    r_V_3_reg_1439_pp1_iter5_reg(0) <= '0';
    r_V_3_reg_1439_pp1_iter6_reg(0) <= '0';
    row_ind_2_V_fu_106(12 downto 2) <= "00000000000";
    row_ind_2_V_1_fu_110(12 downto 2) <= "00000000000";
    row_ind_2_V_2_fu_114(12 downto 2) <= "00000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln439_reg_1158, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln887_6_reg_1324, ap_enable_reg_pp1_iter8, ap_CS_fsm_state2, icmp_ln429_fu_508_p2, ap_CS_fsm_state3, icmp_ln887_fu_550_p2, ap_CS_fsm_state11, icmp_ln887_3_fu_613_p2, ap_CS_fsm_state17, icmp_ln887_4_fu_668_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage1_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter7, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln429_fu_508_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln887_fu_550_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((icmp_ln439_reg_1158 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln439_reg_1158 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln887_3_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln887_4_fu_668_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln887_6_reg_1324 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln887_6_reg_1324 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln198_fu_782_p2 <= (icmp_ln887_7_reg_1328 and icmp_ln887_5_reg_1246);
    and_ln330_1_fu_723_p2 <= (icmp_ln895_reg_1251 and icmp_ln895_2_reg_1289);
    and_ln330_2_fu_727_p2 <= (icmp_ln895_reg_1251 and icmp_ln895_3_reg_1269);
    and_ln330_fu_719_p2 <= (tmp_14_reg_1284 and icmp_ln895_reg_1251);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(22);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(23);
    ap_CS_fsm_state41 <= ap_CS_fsm(24);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(p_src_mat_data_V_empty_n, ap_enable_reg_pp0_iter0, icmp_ln439_reg_1158)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln439_reg_1158 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(p_src_mat_data_V_empty_n, ap_enable_reg_pp0_iter0, icmp_ln439_reg_1158)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln439_reg_1158 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(p_src_mat_data_V_empty_n, p_out_mat_data_V_full_n, p_out_mat1_data_V_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, icmp_ln891_reg_1367_pp1_iter7_reg, ap_predicate_op212_read_state25)
    begin
                ap_block_pp1_stage0_01001 <= (((ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (((icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat1_data_V_full_n = ap_const_logic_0)) or ((icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat_data_V_full_n = ap_const_logic_0)))) or ((ap_predicate_op212_read_state25 = ap_const_boolean_1) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(p_src_mat_data_V_empty_n, p_out_mat_data_V_full_n, p_out_mat1_data_V_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, icmp_ln891_reg_1367_pp1_iter7_reg, ap_predicate_op212_read_state25)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (((icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat1_data_V_full_n = ap_const_logic_0)) or ((icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat_data_V_full_n = ap_const_logic_0)))) or ((ap_predicate_op212_read_state25 = ap_const_boolean_1) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(p_src_mat_data_V_empty_n, p_out_mat_data_V_full_n, p_out_mat1_data_V_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, icmp_ln891_reg_1367_pp1_iter7_reg, ap_predicate_op212_read_state25)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (((icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat1_data_V_full_n = ap_const_logic_0)) or ((icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat_data_V_full_n = ap_const_logic_0)))) or ((ap_predicate_op212_read_state25 = ap_const_boolean_1) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_pp1_stage0_iter1_assign_proc : process(p_src_mat_data_V_empty_n, ap_predicate_op212_read_state25)
    begin
                ap_block_state25_pp1_stage0_iter1 <= ((ap_predicate_op212_read_state25 = ap_const_boolean_1) and (p_src_mat_data_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state26_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_pp1_stage0_iter8_assign_proc : process(p_out_mat_data_V_full_n, p_out_mat1_data_V_full_n, icmp_ln891_reg_1367_pp1_iter7_reg)
    begin
                ap_block_state39_pp1_stage0_iter8 <= (((icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat1_data_V_full_n = ap_const_logic_0)) or ((icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat_data_V_full_n = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage1_iter0_assign_proc : process(p_src_mat_data_V_empty_n, icmp_ln439_reg_1158)
    begin
                ap_block_state6_pp0_stage1_iter0 <= ((icmp_ln439_reg_1158 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln439_reg_1158)
    begin
        if ((icmp_ln439_reg_1158 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state24_assign_proc : process(icmp_ln887_6_reg_1324)
    begin
        if ((icmp_ln887_6_reg_1324 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17, icmp_ln887_4_fu_668_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln887_4_fu_668_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7)
    begin
        if (((ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_op_assign_phi_fu_277_p4 <= i_op_assign_reg_273;

    ap_phi_mux_index_assign_phi_fu_319_p4_assign_proc : process(icmp_ln439_reg_1158, index_assign_reg_316, ap_CS_fsm_pp0_stage0, readind_reg_1167, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln439_reg_1158 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_index_assign_phi_fu_319_p4 <= readind_reg_1167;
        else 
            ap_phi_mux_index_assign_phi_fu_319_p4 <= index_assign_reg_316;
        end if; 
    end process;


    ap_phi_mux_src_buf_0_0_0_phi_fu_472_p4_assign_proc : process(src_buf_0_0_0_reg_468, icmp_ln887_6_reg_1324_pp1_iter4_reg, ap_CS_fsm_pp1_stage1, buf_cop_0_V_2_reg_1444, ap_enable_reg_pp1_iter4, ap_block_pp1_stage1)
    begin
        if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            ap_phi_mux_src_buf_0_0_0_phi_fu_472_p4 <= buf_cop_0_V_2_reg_1444;
        else 
            ap_phi_mux_src_buf_0_0_0_phi_fu_472_p4 <= src_buf_0_0_0_reg_468;
        end if; 
    end process;


    ap_phi_mux_src_buf_0_1_0_phi_fu_460_p4_assign_proc : process(src_buf_0_1_0_reg_456, icmp_ln887_6_reg_1324_pp1_iter4_reg, ap_CS_fsm_pp1_stage1, buf_cop_0_V_1_reg_1374, ap_enable_reg_pp1_iter4, ap_block_pp1_stage1)
    begin
        if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            ap_phi_mux_src_buf_0_1_0_phi_fu_460_p4 <= buf_cop_0_V_1_reg_1374;
        else 
            ap_phi_mux_src_buf_0_1_0_phi_fu_460_p4 <= src_buf_0_1_0_reg_456;
        end if; 
    end process;


    ap_phi_mux_src_buf_1_0_0_phi_fu_448_p4_assign_proc : process(src_buf_1_0_0_reg_444, icmp_ln887_6_reg_1324_pp1_iter4_reg, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter4, buf_cop_1_V_2_reg_1449, ap_block_pp1_stage1)
    begin
        if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            ap_phi_mux_src_buf_1_0_0_phi_fu_448_p4 <= buf_cop_1_V_2_reg_1449;
        else 
            ap_phi_mux_src_buf_1_0_0_phi_fu_448_p4 <= src_buf_1_0_0_reg_444;
        end if; 
    end process;


    ap_phi_mux_src_buf_1_1_0_phi_fu_436_p4_assign_proc : process(src_buf_1_1_0_reg_432, icmp_ln887_6_reg_1324_pp1_iter4_reg, ap_CS_fsm_pp1_stage1, buf_cop_1_V_1_reg_1381, ap_enable_reg_pp1_iter4, ap_block_pp1_stage1)
    begin
        if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            ap_phi_mux_src_buf_1_1_0_phi_fu_436_p4 <= buf_cop_1_V_1_reg_1381;
        else 
            ap_phi_mux_src_buf_1_1_0_phi_fu_436_p4 <= src_buf_1_1_0_reg_432;
        end if; 
    end process;


    ap_phi_mux_src_buf_2_0_0_phi_fu_424_p4_assign_proc : process(src_buf_2_0_0_reg_420, icmp_ln887_6_reg_1324_pp1_iter4_reg, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter4, buf_cop_2_V_2_reg_1454, ap_block_pp1_stage1)
    begin
        if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            ap_phi_mux_src_buf_2_0_0_phi_fu_424_p4 <= buf_cop_2_V_2_reg_1454;
        else 
            ap_phi_mux_src_buf_2_0_0_phi_fu_424_p4 <= src_buf_2_0_0_reg_420;
        end if; 
    end process;


    ap_phi_mux_src_buf_2_1_0_phi_fu_412_p4_assign_proc : process(src_buf_2_1_0_reg_408, icmp_ln887_6_reg_1324_pp1_iter4_reg, ap_CS_fsm_pp1_stage1, buf_cop_2_V_1_reg_1388, ap_enable_reg_pp1_iter4, ap_block_pp1_stage1)
    begin
        if (((icmp_ln887_6_reg_1324_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            ap_phi_mux_src_buf_2_1_0_phi_fu_412_p4 <= buf_cop_2_V_1_reg_1388;
        else 
            ap_phi_mux_src_buf_2_1_0_phi_fu_412_p4 <= src_buf_2_1_0_reg_408;
        end if; 
    end process;


    ap_phi_mux_t_V_8_phi_fu_400_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln887_6_reg_1324, t_V_8_reg_396, col_V_3_reg_1343)
    begin
        if (((icmp_ln887_6_reg_1324 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_t_V_8_phi_fu_400_p4 <= col_V_3_reg_1343;
        else 
            ap_phi_mux_t_V_8_phi_fu_400_p4 <= t_V_8_reg_396;
        end if; 
    end process;


    ap_phi_mux_t_V_phi_fu_331_p4_assign_proc : process(icmp_ln439_reg_1158, t_V_reg_327, ap_CS_fsm_pp0_stage0, col_V_2_reg_1162, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln439_reg_1158 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_t_V_phi_fu_331_p4 <= col_V_2_reg_1162;
        else 
            ap_phi_mux_t_V_phi_fu_331_p4 <= t_V_reg_327;
        end if; 
    end process;


    ap_predicate_op212_read_state25_assign_proc : process(icmp_ln887_6_reg_1324, and_ln198_reg_1348)
    begin
                ap_predicate_op212_read_state25 <= ((ap_const_lv1_1 = and_ln198_reg_1348) and (icmp_ln887_6_reg_1324 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, icmp_ln887_4_fu_668_p2)
    begin
        if (((icmp_ln887_4_fu_668_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state11, ap_enable_reg_pp1_iter2, zext_ln544_fu_618_p1, zext_ln544_4_fu_793_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            buf_0_V_address0 <= zext_ln544_4_fu_793_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buf_0_V_address0 <= zext_ln544_fu_618_p1(12 - 1 downto 0);
        else 
            buf_0_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf_0_V_address1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_CS_fsm_pp0_stage0, buf_0_V_addr_reg_1190, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state15, ap_block_pp1_stage1, zext_ln544_2_fu_585_p1, zext_ln544_3_fu_786_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            buf_0_V_address1 <= zext_ln544_3_fu_786_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_0_V_address1 <= buf_0_V_addr_reg_1190;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_0_V_address1 <= zext_ln544_2_fu_585_p1(12 - 1 downto 0);
        else 
            buf_0_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf_0_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state13, ap_enable_reg_pp1_iter3, ap_CS_fsm_state11, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            buf_0_V_ce0 <= ap_const_logic_1;
        else 
            buf_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_V_ce1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_0_V_ce1 <= ap_const_logic_1;
        else 
            buf_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_V_d1_assign_proc : process(ap_enable_reg_pp1_iter1, reg_480, ap_CS_fsm_pp0_stage0, tmp_6_reg_1217, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state15, ap_block_pp1_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_0_V_d1 <= tmp_6_reg_1217;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_0_V_d1 <= reg_480;
        else 
            buf_0_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_0_V_we1_assign_proc : process(ap_enable_reg_pp1_iter1, and_ln198_reg_1348, trunc_ln321_reg_1154, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, trunc_ln321_3_reg_1309, icmp_ln887_6_reg_1324_pp1_iter1_reg, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_lv1_1 = and_ln198_reg_1348) and (icmp_ln887_6_reg_1324_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (trunc_ln321_3_reg_1309 = ap_const_lv2_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln321_reg_1154 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_0_V_we1 <= ap_const_logic_1;
        else 
            buf_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state11, ap_enable_reg_pp1_iter2, zext_ln544_fu_618_p1, zext_ln544_4_fu_793_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            buf_1_V_address0 <= zext_ln544_4_fu_793_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buf_1_V_address0 <= zext_ln544_fu_618_p1(12 - 1 downto 0);
        else 
            buf_1_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf_1_V_address1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp1_stage1, zext_ln544_2_fu_585_p1, zext_ln544_3_fu_786_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            buf_1_V_address1 <= zext_ln544_3_fu_786_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_1_V_address1 <= zext_ln544_2_fu_585_p1(12 - 1 downto 0);
        else 
            buf_1_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf_1_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state13, ap_enable_reg_pp1_iter3, ap_CS_fsm_state11, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            buf_1_V_ce0 <= ap_const_logic_1;
        else 
            buf_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_V_ce1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_1_V_ce1 <= ap_const_logic_1;
        else 
            buf_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_V_we1_assign_proc : process(ap_enable_reg_pp1_iter1, and_ln198_reg_1348, trunc_ln321_reg_1154, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, trunc_ln321_3_reg_1309, icmp_ln887_6_reg_1324_pp1_iter1_reg, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = and_ln198_reg_1348) and (icmp_ln887_6_reg_1324_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (trunc_ln321_3_reg_1309 = ap_const_lv2_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln321_reg_1154 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_1_V_we1 <= ap_const_logic_1;
        else 
            buf_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state11, ap_enable_reg_pp1_iter2, zext_ln544_fu_618_p1, zext_ln544_4_fu_793_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            buf_2_V_address0 <= zext_ln544_4_fu_793_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buf_2_V_address0 <= zext_ln544_fu_618_p1(12 - 1 downto 0);
        else 
            buf_2_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf_2_V_address1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp1_stage1, zext_ln544_2_fu_585_p1, zext_ln544_3_fu_786_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            buf_2_V_address1 <= zext_ln544_3_fu_786_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2_V_address1 <= zext_ln544_2_fu_585_p1(12 - 1 downto 0);
        else 
            buf_2_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf_2_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state13, ap_enable_reg_pp1_iter3, ap_CS_fsm_state11, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            buf_2_V_ce0 <= ap_const_logic_1;
        else 
            buf_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_V_ce1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_2_V_ce1 <= ap_const_logic_1;
        else 
            buf_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_V_we1_assign_proc : process(ap_enable_reg_pp1_iter1, and_ln198_reg_1348, trunc_ln321_reg_1154, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, trunc_ln321_3_reg_1309, icmp_ln887_6_reg_1324_pp1_iter1_reg, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((not((trunc_ln321_3_reg_1309 = ap_const_lv2_0)) and not((trunc_ln321_3_reg_1309 = ap_const_lv2_1)) and (ap_const_lv1_1 = and_ln198_reg_1348) and (icmp_ln887_6_reg_1324_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or (not((trunc_ln321_reg_1154 = ap_const_lv2_0)) and not((trunc_ln321_reg_1154 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_2_V_we1 <= ap_const_logic_1;
        else 
            buf_2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_cop_0_V_1_fu_893_p3 <= 
        buf_cop_0_V_fu_828_p3 when (icmp_ln887_7_reg_1328_pp1_iter3_reg(0) = '1') else 
        ap_phi_mux_src_buf_0_1_0_phi_fu_460_p4;
    buf_cop_0_V_2_fu_992_p3 <= 
        buf_cop_0_V_1_reg_1374 when (icmp_ln891_reg_1367_pp1_iter3_reg(0) = '1') else 
        src_buf_0_1_0_reg_456;
    buf_cop_0_V_fu_828_p3 <= 
        tmp_s_fu_806_p5 when (and_ln330_reg_1294(0) = '1') else 
        tmp_2_fu_817_p5;
    buf_cop_1_V_1_fu_900_p3 <= 
        buf_cop_1_V_fu_857_p3 when (icmp_ln887_7_reg_1328_pp1_iter3_reg(0) = '1') else 
        ap_phi_mux_src_buf_1_1_0_phi_fu_436_p4;
    buf_cop_1_V_2_fu_998_p3 <= 
        buf_cop_1_V_1_reg_1381 when (icmp_ln891_reg_1367_pp1_iter3_reg(0) = '1') else 
        src_buf_1_1_0_reg_432;
    buf_cop_1_V_fu_857_p3 <= 
        tmp_10_fu_835_p5 when (and_ln330_1_reg_1299(0) = '1') else 
        tmp_11_fu_846_p5;
    buf_cop_2_V_1_fu_907_p3 <= 
        buf_cop_2_V_fu_886_p3 when (icmp_ln887_7_reg_1328_pp1_iter3_reg(0) = '1') else 
        ap_phi_mux_src_buf_2_1_0_phi_fu_412_p4;
    buf_cop_2_V_2_fu_1004_p3 <= 
        buf_cop_2_V_1_reg_1388 when (icmp_ln891_reg_1367_pp1_iter3_reg(0) = '1') else 
        src_buf_2_1_0_reg_408;
    buf_cop_2_V_fu_886_p3 <= 
        tmp_12_fu_864_p5 when (and_ln330_2_reg_1304(0) = '1') else 
        tmp_13_fu_875_p5;

    grp_fu_1016_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_1016_ce <= ap_const_logic_1;
        else 
            grp_fu_1016_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1016_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_3_reg_1459),11));
        grp_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln68_reg_1469),11));


    grp_fu_1028_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_1028_ce <= ap_const_logic_1;
        else 
            grp_fu_1028_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1028_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_5_reg_1474),10));
    grp_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_6_reg_1479),10));

    grp_fu_1037_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_1037_ce <= ap_const_logic_1;
        else 
            grp_fu_1037_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_4_reg_1464_pp1_iter5_reg),11));

    grp_fu_1048_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_1048_ce <= ap_const_logic_1;
        else 
            grp_fu_1048_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_1048_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln68_2_reg_1509),11));

    grp_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_reg_1434_pp1_iter5_reg),11));

    grp_fu_1057_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_1057_ce <= ap_const_logic_1;
        else 
            grp_fu_1057_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1057_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_reg_1439_pp1_iter6_reg),11));

    grp_fu_573_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_573_ce <= ap_const_logic_1;
        else 
            grp_fu_573_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_579_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_579_ce <= ap_const_logic_1;
        else 
            grp_fu_579_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_637_p1 <= img_width(14 - 1 downto 0);
        grp_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_1_reg_1258),18));


    grp_fu_756_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_756_ce <= ap_const_logic_1;
        else 
            grp_fu_756_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_950_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_950_ce <= ap_const_logic_1;
        else 
            grp_fu_950_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_956_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_956_ce <= ap_const_logic_1;
        else 
            grp_fu_956_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_960_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_960_ce <= ap_const_logic_1;
        else 
            grp_fu_960_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_960_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_933_p3),10));
    grp_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_1395),10));

    grp_fu_982_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_982_ce <= ap_const_logic_1;
        else 
            grp_fu_982_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_987_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_987_ce <= ap_const_logic_1;
        else 
            grp_fu_987_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln429_fu_508_p2 <= "1" when (i_op_assign_reg_273 = ap_const_lv2_3) else "0";
    icmp_ln439_fu_567_p2 <= "1" when (ap_phi_mux_index_assign_phi_fu_319_p4 = indvars_iv_reg_284) else "0";
    icmp_ln887_3_fu_613_p2 <= "1" when (unsigned(zext_ln887_3_fu_609_p1) < unsigned(img_width)) else "0";
    icmp_ln887_4_fu_668_p2 <= "1" when (unsigned(zext_ln887_5_fu_664_p1) < unsigned(ret_V_reg_1222)) else "0";
    icmp_ln887_5_fu_673_p2 <= "1" when (unsigned(zext_ln887_4_fu_660_p1) < unsigned(img_height)) else "0";
    icmp_ln887_6_fu_751_p2 <= "1" when (unsigned(zext_ln887_7_fu_747_p1) < unsigned(add_ln193_reg_1227)) else "0";
    icmp_ln887_7_fu_762_p2 <= "1" when (unsigned(zext_ln887_6_fu_743_p1) < unsigned(img_width)) else "0";
    icmp_ln887_fu_550_p2 <= "1" when (signed(i_op_assign_1_reg_306) < signed(zext_ln887_reg_1136)) else "0";
    icmp_ln891_fu_800_p2 <= "1" when (t_V_8_reg_396_pp1_iter1_reg = ap_const_lv13_0) else "0";
    icmp_ln895_2_fu_714_p2 <= "1" when (signed(ret_V_2_reg_1274) < signed(ap_const_lv18_1)) else "0";
    icmp_ln895_3_fu_697_p2 <= "1" when (signed(ret_V_1_reg_1258) > signed(ap_const_lv17_0)) else "0";
    icmp_ln895_fu_678_p2 <= "1" when (signed(zext_ln887_5_fu_664_p1) > signed(add_ln330_reg_1232)) else "0";
    init_buf_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_ind_2_V_1_fu_110),32));
    init_row_ind_fu_514_p2 <= std_logic_vector(unsigned(i_op_assign_reg_273) + unsigned(ap_const_lv2_1));
    lhs_V_2_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_src_buf_0_0_0_phi_fu_472_p4),9));
    lhs_V_4_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buf_cop_0_V_1_reg_1374),9));
    lhs_V_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_height),17));

    p_out_mat1_data_V_blk_n_assign_proc : process(p_out_mat1_data_V_full_n, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter8, icmp_ln891_reg_1367_pp1_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_out_mat1_data_V_blk_n <= p_out_mat1_data_V_full_n;
        else 
            p_out_mat1_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out_mat1_data_V_din <= g_y_V_reg_1544;

    p_out_mat1_data_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter8, icmp_ln891_reg_1367_pp1_iter7_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            p_out_mat1_data_V_write <= ap_const_logic_1;
        else 
            p_out_mat1_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out_mat_data_V_blk_n_assign_proc : process(p_out_mat_data_V_full_n, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter8, icmp_ln891_reg_1367_pp1_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_out_mat_data_V_blk_n <= p_out_mat_data_V_full_n;
        else 
            p_out_mat_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out_mat_data_V_din <= g_x_V_reg_1529_pp1_iter7_reg;

    p_out_mat_data_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter8, icmp_ln891_reg_1367_pp1_iter7_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln891_reg_1367_pp1_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            p_out_mat_data_V_write <= ap_const_logic_1;
        else 
            p_out_mat_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_mat_data_V_blk_n_assign_proc : process(p_src_mat_data_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln439_reg_1158, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln887_6_reg_1324, and_ln198_reg_1348)
    begin
        if ((((ap_const_lv1_1 = and_ln198_reg_1348) and (icmp_ln887_6_reg_1324 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln439_reg_1158 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            p_src_mat_data_V_blk_n <= p_src_mat_data_V_empty_n;
        else 
            p_src_mat_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_mat_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln439_reg_1158, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_predicate_op212_read_state25, ap_block_pp1_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_predicate_op212_read_state25 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln439_reg_1158 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            p_src_mat_data_V_read <= ap_const_logic_1;
        else 
            p_src_mat_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_933_p3 <= (buf_cop_1_V_1_reg_1381 & ap_const_lv1_0);
    r_V_2_fu_966_p3 <= (src_buf_0_1_0_reg_456 & ap_const_lv1_0);
    r_V_3_fu_974_p3 <= (src_buf_2_1_0_reg_408 & ap_const_lv1_0);
    r_V_fu_914_p3 <= (ap_phi_mux_src_buf_1_0_0_phi_fu_448_p4 & ap_const_lv1_0);
    rhs_V_3_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_src_buf_2_0_0_phi_fu_424_p4),9));
    rhs_V_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buf_cop_2_V_1_reg_1388),9));
    row_ind_0_V_2_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_273),13));
    trunc_ln321_2_fu_560_p1 <= row_ind_2_V_1_load_reg_1105(2 - 1 downto 0);
    trunc_ln321_3_fu_731_p1 <= row_ind_1_V_1_reg_351(2 - 1 downto 0);
    trunc_ln321_4_fu_735_p1 <= zero_ind_V_reg_372(2 - 1 downto 0);
    trunc_ln321_5_fu_739_p1 <= row_ind_0_V_reg_361(2 - 1 downto 0);
    trunc_ln321_6_fu_778_p1 <= tmp_7_fu_767_p5(2 - 1 downto 0);
    trunc_ln321_fu_563_p1 <= i_op_assign_1_reg_306(2 - 1 downto 0);
    trunc_ln544_fu_702_p1 <= grp_fu_691_p2(2 - 1 downto 0);
    zext_ln439_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_width),32));
    zext_ln544_2_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_327),64));
    zext_ln544_3_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_8_reg_396_pp1_iter1_reg),64));
    zext_ln544_4_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_8_reg_396_pp1_iter1_reg),64));
    zext_ln544_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_6_reg_339),64));
    zext_ln887_3_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_6_reg_339),16));
    zext_ln887_4_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_7_reg_384),16));
    zext_ln887_5_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_7_reg_384),17));
    zext_ln887_6_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_8_phi_fu_400_p4),16));
    zext_ln887_7_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_8_phi_fu_400_p4),14));
    zext_ln887_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_ind_2_V_2_fu_114),32));
end behav;
