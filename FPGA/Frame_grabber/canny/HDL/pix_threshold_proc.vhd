-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pix_threshold_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    VideoIn_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    VideoIn_TVALID : IN STD_LOGIC;
    VideoIn_TREADY : OUT STD_LOGIC;
    VideoIn_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    VideoOut_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    VideoOut_TVALID : OUT STD_LOGIC;
    VideoOut_TREADY : IN STD_LOGIC;
    VideoOut_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    threshold_value_V : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of pix_threshold_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100111";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal DataBuf_Data_V : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal VideoIn_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_fu_306_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_fu_1329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal VideoOut_TDATA_blk_n : STD_LOGIC;
    signal tmp_4_fu_314_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln647_fu_322_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_predicate_op24_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal tmp_6_fu_334_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op34_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal p_Val2_3_reg_223 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_DataBuf_User_V_3_phi_fu_278_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal inFrame_0_reg_248 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_236 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_User_V_5_reg_262 : STD_LOGIC_VECTOR (3 downto 0);
    signal DataBuf_User_V_3_reg_274 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_Data_V_2_fu_1324_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal trunc_ln647_1_fu_342_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_1_fu_365_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_1_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_1_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_2_fu_394_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_2_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_2_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_3_fu_423_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_3_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_3_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_4_fu_452_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_4_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_4_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_5_fu_481_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_5_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_5_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_6_fu_510_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_6_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_6_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_7_fu_539_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_7_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_7_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_8_fu_568_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_8_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_8_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_9_fu_597_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_9_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_9_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_s_fu_626_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_10_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_10_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_10_fu_655_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_11_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_11_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_11_fu_684_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_12_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_12_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_12_fu_713_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_13_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_13_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_13_fu_742_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_14_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_14_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_14_fu_771_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_15_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_15_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_15_fu_800_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_16_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_16_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_16_fu_829_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_17_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_17_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_17_fu_858_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_18_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_18_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_18_fu_887_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_19_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_19_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_19_fu_916_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_20_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_20_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_20_fu_945_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_21_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_21_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_21_fu_974_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_22_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_22_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_22_fu_1003_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_23_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_23_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_23_fu_1032_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_24_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_24_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_24_fu_1061_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_25_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_25_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_25_fu_1090_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_26_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_26_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_26_fu_1119_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_27_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_27_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_27_fu_1148_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_28_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_28_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_28_fu_1177_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_29_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_29_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_29_fu_1206_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_30_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_30_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_30_fu_1235_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln891_31_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_31_fu_1250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln243_30_fu_1227_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_29_fu_1198_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_28_fu_1169_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_27_fu_1140_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_26_fu_1111_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_25_fu_1082_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_24_fu_1053_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_23_fu_1024_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_22_fu_995_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_21_fu_966_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_20_fu_937_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_19_fu_908_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_18_fu_879_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_17_fu_850_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_16_fu_821_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_15_fu_792_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_14_fu_763_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_13_fu_734_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_12_fu_705_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_11_fu_676_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_10_fu_647_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_9_fu_618_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_8_fu_589_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_7_fu_560_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_6_fu_531_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_5_fu_502_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_4_fu_473_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_3_fu_444_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_2_fu_415_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_1_fu_386_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln243_fu_357_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_1256_p33 : STD_LOGIC_VECTOR (248 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_condition_92 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    DataBuf_User_V_3_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (tmp_6_fu_334_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                DataBuf_User_V_3_reg_274 <= p_Val2_s_reg_236;
            elsif (((tmp_6_reg_1390 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                DataBuf_User_V_3_reg_274 <= tmp_User_V_5_reg_262;
            end if; 
        end if;
    end process;

    inFrame_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_92)) then
                if ((tmp_3_fu_306_p3 = ap_const_lv1_0)) then 
                    inFrame_0_reg_248 <= ap_const_lv1_1;
                elsif ((tmp_3_fu_306_p3 = ap_const_lv1_1)) then 
                    inFrame_0_reg_248 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_3_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inFrame_0_reg_248 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_Val2_3_reg_223 <= ap_phi_mux_DataBuf_User_V_3_phi_fu_278_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_3_reg_223 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_92)) then
                if ((tmp_3_fu_306_p3 = ap_const_lv1_0)) then 
                    p_Val2_s_reg_236 <= VideoIn_TUSER;
                elsif ((tmp_3_fu_306_p3 = ap_const_lv1_1)) then 
                    p_Val2_s_reg_236 <= p_Val2_3_reg_223;
                end if;
            end if; 
        end if;
    end process;

    tmp_User_V_5_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (tmp_6_fu_334_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tmp_User_V_5_reg_262 <= p_Val2_s_reg_236;
            elsif ((not(((ap_const_logic_0 = VideoOut_TREADY) or ((tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                tmp_User_V_5_reg_262 <= VideoIn_TUSER;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = VideoOut_TREADY) or ((tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_boolean_1 = ap_block_state2_io) or ((tmp_3_fu_306_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_3_fu_306_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                DataBuf_Data_V <= VideoIn_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_6_reg_1390 <= p_Val2_s_reg_236(1 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, VideoIn_TVALID, VideoOut_TREADY, ap_CS_fsm_state2, tmp_3_fu_306_p3, ap_CS_fsm_state4, tmp_7_fu_1329_p3, ap_CS_fsm_state3, ap_block_state2_io, tmp_6_fu_334_p3, ap_block_state3_io, ap_CS_fsm_state5, inFrame_0_reg_248)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((tmp_3_fu_306_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (tmp_6_fu_334_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_boolean_0 = ap_block_state3_io) and (tmp_6_fu_334_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_const_logic_0 = VideoOut_TREADY) or ((tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((ap_const_logic_0 = VideoOut_TREADY) or ((tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_7_fu_1329_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((inFrame_0_reg_248 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    VideoIn_TDATA_blk_n_assign_proc : process(VideoIn_TVALID, ap_CS_fsm_state2, tmp_3_fu_306_p3, ap_CS_fsm_state4, tmp_7_fu_1329_p3)
    begin
        if ((((tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_3_fu_306_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            VideoIn_TDATA_blk_n <= VideoIn_TVALID;
        else 
            VideoIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    VideoIn_TREADY_assign_proc : process(VideoIn_TVALID, VideoOut_TREADY, ap_CS_fsm_state2, tmp_3_fu_306_p3, ap_CS_fsm_state4, tmp_7_fu_1329_p3, ap_block_state2_io)
    begin
        if (((not(((ap_const_logic_0 = VideoOut_TREADY) or ((tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_boolean_1 = ap_block_state2_io) or ((tmp_3_fu_306_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (tmp_3_fu_306_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            VideoIn_TREADY <= ap_const_logic_1;
        else 
            VideoIn_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    VideoOut_TDATA_assign_proc : process(VideoIn_TVALID, DataBuf_Data_V, ap_CS_fsm_state2, tmp_3_fu_306_p3, ap_CS_fsm_state4, tmp_7_fu_1329_p3, ap_CS_fsm_state3, ap_predicate_op24_write_state2, ap_predicate_op34_write_state3, tmp_Data_V_2_fu_1324_p1)
    begin
        if ((not(((tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            VideoOut_TDATA <= tmp_Data_V_2_fu_1324_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_predicate_op34_write_state3 = ap_const_boolean_1))) then 
            VideoOut_TDATA <= DataBuf_Data_V;
        elsif ((not(((tmp_3_fu_306_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op24_write_state2 = ap_const_boolean_1))) then 
            VideoOut_TDATA <= ap_const_lv256_lc_1;
        else 
            VideoOut_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    VideoOut_TDATA_blk_n_assign_proc : process(VideoOut_TREADY, ap_CS_fsm_state2, tmp_3_fu_306_p3, ap_CS_fsm_state4, tmp_4_fu_314_p3, ap_CS_fsm_state3, trunc_ln647_fu_322_p1, tmp_5_fu_326_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((trunc_ln647_fu_322_p1 = ap_const_lv1_1) and (tmp_5_fu_326_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_4_fu_314_p3 = ap_const_lv1_0) and (tmp_3_fu_306_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            VideoOut_TDATA_blk_n <= VideoOut_TREADY;
        else 
            VideoOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    VideoOut_TUSER_assign_proc : process(VideoIn_TVALID, ap_CS_fsm_state2, tmp_3_fu_306_p3, ap_CS_fsm_state4, tmp_7_fu_1329_p3, ap_CS_fsm_state3, ap_predicate_op24_write_state2, ap_predicate_op34_write_state3, p_Val2_3_reg_223, p_Val2_s_reg_236, tmp_User_V_5_reg_262)
    begin
        if ((not(((tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            VideoOut_TUSER <= tmp_User_V_5_reg_262;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_predicate_op34_write_state3 = ap_const_boolean_1))) then 
            VideoOut_TUSER <= p_Val2_s_reg_236;
        elsif ((not(((tmp_3_fu_306_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op24_write_state2 = ap_const_boolean_1))) then 
            VideoOut_TUSER <= p_Val2_3_reg_223;
        else 
            VideoOut_TUSER <= "XXXX";
        end if; 
    end process;


    VideoOut_TVALID_assign_proc : process(VideoIn_TVALID, VideoOut_TREADY, ap_CS_fsm_state2, tmp_3_fu_306_p3, ap_CS_fsm_state4, tmp_7_fu_1329_p3, ap_CS_fsm_state3, ap_predicate_op24_write_state2, ap_block_state2_io, ap_predicate_op34_write_state3, ap_block_state3_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_predicate_op34_write_state3 = ap_const_boolean_1)) or (not(((ap_const_logic_0 = VideoOut_TREADY) or ((tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_const_boolean_1 = ap_block_state2_io) or ((tmp_3_fu_306_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op24_write_state2 = ap_const_boolean_1)))) then 
            VideoOut_TVALID <= ap_const_logic_1;
        else 
            VideoOut_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state2_assign_proc : process(VideoIn_TVALID, tmp_3_fu_306_p3)
    begin
                ap_block_state2 <= ((tmp_3_fu_306_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID));
    end process;


    ap_block_state2_io_assign_proc : process(VideoOut_TREADY, ap_predicate_op24_write_state2)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = VideoOut_TREADY) and (ap_predicate_op24_write_state2 = ap_const_boolean_1));
    end process;


    ap_block_state3_io_assign_proc : process(VideoOut_TREADY, ap_predicate_op34_write_state3)
    begin
                ap_block_state3_io <= ((ap_const_logic_0 = VideoOut_TREADY) and (ap_predicate_op34_write_state3 = ap_const_boolean_1));
    end process;


    ap_block_state4_assign_proc : process(VideoIn_TVALID, tmp_7_fu_1329_p3)
    begin
                ap_block_state4 <= ((tmp_7_fu_1329_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID));
    end process;


    ap_condition_92_assign_proc : process(VideoIn_TVALID, ap_CS_fsm_state2, tmp_3_fu_306_p3, ap_block_state2_io)
    begin
                ap_condition_92 <= (not(((ap_const_boolean_1 = ap_block_state2_io) or ((tmp_3_fu_306_p3 = ap_const_lv1_0) and (ap_const_logic_0 = VideoIn_TVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state2));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, inFrame_0_reg_248)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((inFrame_0_reg_248 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_DataBuf_User_V_3_phi_fu_278_p4_assign_proc : process(tmp_6_reg_1390, ap_CS_fsm_state5, tmp_User_V_5_reg_262, DataBuf_User_V_3_reg_274)
    begin
        if (((tmp_6_reg_1390 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_DataBuf_User_V_3_phi_fu_278_p4 <= tmp_User_V_5_reg_262;
        else 
            ap_phi_mux_DataBuf_User_V_3_phi_fu_278_p4 <= DataBuf_User_V_3_reg_274;
        end if; 
    end process;


    ap_predicate_op24_write_state2_assign_proc : process(tmp_3_fu_306_p3, tmp_4_fu_314_p3)
    begin
                ap_predicate_op24_write_state2 <= ((tmp_4_fu_314_p3 = ap_const_lv1_0) and (tmp_3_fu_306_p3 = ap_const_lv1_1));
    end process;


    ap_predicate_op34_write_state3_assign_proc : process(trunc_ln647_fu_322_p1, tmp_5_fu_326_p3)
    begin
                ap_predicate_op34_write_state3 <= ((trunc_ln647_fu_322_p1 = ap_const_lv1_1) and (tmp_5_fu_326_p3 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, inFrame_0_reg_248)
    begin
        if (((inFrame_0_reg_248 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln891_10_fu_636_p2 <= "1" when (unsigned(p_Result_5_s_fu_626_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_11_fu_665_p2 <= "1" when (unsigned(p_Result_5_10_fu_655_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_12_fu_694_p2 <= "1" when (unsigned(p_Result_5_11_fu_684_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_13_fu_723_p2 <= "1" when (unsigned(p_Result_5_12_fu_713_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_14_fu_752_p2 <= "1" when (unsigned(p_Result_5_13_fu_742_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_15_fu_781_p2 <= "1" when (unsigned(p_Result_5_14_fu_771_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_16_fu_810_p2 <= "1" when (unsigned(p_Result_5_15_fu_800_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_17_fu_839_p2 <= "1" when (unsigned(p_Result_5_16_fu_829_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_18_fu_868_p2 <= "1" when (unsigned(p_Result_5_17_fu_858_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_19_fu_897_p2 <= "1" when (unsigned(p_Result_5_18_fu_887_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_1_fu_375_p2 <= "1" when (unsigned(p_Result_5_1_fu_365_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_20_fu_926_p2 <= "1" when (unsigned(p_Result_5_19_fu_916_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_21_fu_955_p2 <= "1" when (unsigned(p_Result_5_20_fu_945_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_22_fu_984_p2 <= "1" when (unsigned(p_Result_5_21_fu_974_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_23_fu_1013_p2 <= "1" when (unsigned(p_Result_5_22_fu_1003_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_24_fu_1042_p2 <= "1" when (unsigned(p_Result_5_23_fu_1032_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_25_fu_1071_p2 <= "1" when (unsigned(p_Result_5_24_fu_1061_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_26_fu_1100_p2 <= "1" when (unsigned(p_Result_5_25_fu_1090_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_27_fu_1129_p2 <= "1" when (unsigned(p_Result_5_26_fu_1119_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_28_fu_1158_p2 <= "1" when (unsigned(p_Result_5_27_fu_1148_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_29_fu_1187_p2 <= "1" when (unsigned(p_Result_5_28_fu_1177_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_2_fu_404_p2 <= "1" when (unsigned(p_Result_5_2_fu_394_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_30_fu_1216_p2 <= "1" when (unsigned(p_Result_5_29_fu_1206_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_31_fu_1245_p2 <= "1" when (unsigned(p_Result_5_30_fu_1235_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_3_fu_433_p2 <= "1" when (unsigned(p_Result_5_3_fu_423_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_4_fu_462_p2 <= "1" when (unsigned(p_Result_5_4_fu_452_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_5_fu_491_p2 <= "1" when (unsigned(p_Result_5_5_fu_481_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_6_fu_520_p2 <= "1" when (unsigned(p_Result_5_6_fu_510_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_7_fu_549_p2 <= "1" when (unsigned(p_Result_5_7_fu_539_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_8_fu_578_p2 <= "1" when (unsigned(p_Result_5_8_fu_568_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_9_fu_607_p2 <= "1" when (unsigned(p_Result_5_9_fu_597_p4) < unsigned(threshold_value_V)) else "0";
    icmp_ln891_fu_346_p2 <= "1" when (unsigned(trunc_ln647_1_fu_342_p1) < unsigned(threshold_value_V)) else "0";
    p_Result_5_10_fu_655_p4 <= DataBuf_Data_V(95 downto 88);
    p_Result_5_11_fu_684_p4 <= DataBuf_Data_V(103 downto 96);
    p_Result_5_12_fu_713_p4 <= DataBuf_Data_V(111 downto 104);
    p_Result_5_13_fu_742_p4 <= DataBuf_Data_V(119 downto 112);
    p_Result_5_14_fu_771_p4 <= DataBuf_Data_V(127 downto 120);
    p_Result_5_15_fu_800_p4 <= DataBuf_Data_V(135 downto 128);
    p_Result_5_16_fu_829_p4 <= DataBuf_Data_V(143 downto 136);
    p_Result_5_17_fu_858_p4 <= DataBuf_Data_V(151 downto 144);
    p_Result_5_18_fu_887_p4 <= DataBuf_Data_V(159 downto 152);
    p_Result_5_19_fu_916_p4 <= DataBuf_Data_V(167 downto 160);
    p_Result_5_1_fu_365_p4 <= DataBuf_Data_V(15 downto 8);
    p_Result_5_20_fu_945_p4 <= DataBuf_Data_V(175 downto 168);
    p_Result_5_21_fu_974_p4 <= DataBuf_Data_V(183 downto 176);
    p_Result_5_22_fu_1003_p4 <= DataBuf_Data_V(191 downto 184);
    p_Result_5_23_fu_1032_p4 <= DataBuf_Data_V(199 downto 192);
    p_Result_5_24_fu_1061_p4 <= DataBuf_Data_V(207 downto 200);
    p_Result_5_25_fu_1090_p4 <= DataBuf_Data_V(215 downto 208);
    p_Result_5_26_fu_1119_p4 <= DataBuf_Data_V(223 downto 216);
    p_Result_5_27_fu_1148_p4 <= DataBuf_Data_V(231 downto 224);
    p_Result_5_28_fu_1177_p4 <= DataBuf_Data_V(239 downto 232);
    p_Result_5_29_fu_1206_p4 <= DataBuf_Data_V(247 downto 240);
    p_Result_5_2_fu_394_p4 <= DataBuf_Data_V(23 downto 16);
    p_Result_5_30_fu_1235_p4 <= DataBuf_Data_V(255 downto 248);
    p_Result_5_3_fu_423_p4 <= DataBuf_Data_V(31 downto 24);
    p_Result_5_4_fu_452_p4 <= DataBuf_Data_V(39 downto 32);
    p_Result_5_5_fu_481_p4 <= DataBuf_Data_V(47 downto 40);
    p_Result_5_6_fu_510_p4 <= DataBuf_Data_V(55 downto 48);
    p_Result_5_7_fu_539_p4 <= DataBuf_Data_V(63 downto 56);
    p_Result_5_8_fu_568_p4 <= DataBuf_Data_V(71 downto 64);
    p_Result_5_9_fu_597_p4 <= DataBuf_Data_V(79 downto 72);
    p_Result_5_s_fu_626_p4 <= DataBuf_Data_V(87 downto 80);
    select_ln243_10_fu_647_p3 <= 
        ap_const_lv8_FF when (xor_ln891_10_fu_641_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_11_fu_676_p3 <= 
        ap_const_lv8_FF when (xor_ln891_11_fu_670_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_12_fu_705_p3 <= 
        ap_const_lv8_FF when (xor_ln891_12_fu_699_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_13_fu_734_p3 <= 
        ap_const_lv8_FF when (xor_ln891_13_fu_728_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_14_fu_763_p3 <= 
        ap_const_lv8_FF when (xor_ln891_14_fu_757_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_15_fu_792_p3 <= 
        ap_const_lv8_FF when (xor_ln891_15_fu_786_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_16_fu_821_p3 <= 
        ap_const_lv8_FF when (xor_ln891_16_fu_815_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_17_fu_850_p3 <= 
        ap_const_lv8_FF when (xor_ln891_17_fu_844_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_18_fu_879_p3 <= 
        ap_const_lv8_FF when (xor_ln891_18_fu_873_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_19_fu_908_p3 <= 
        ap_const_lv8_FF when (xor_ln891_19_fu_902_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_1_fu_386_p3 <= 
        ap_const_lv8_FF when (xor_ln891_1_fu_380_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_20_fu_937_p3 <= 
        ap_const_lv8_FF when (xor_ln891_20_fu_931_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_21_fu_966_p3 <= 
        ap_const_lv8_FF when (xor_ln891_21_fu_960_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_22_fu_995_p3 <= 
        ap_const_lv8_FF when (xor_ln891_22_fu_989_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_23_fu_1024_p3 <= 
        ap_const_lv8_FF when (xor_ln891_23_fu_1018_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_24_fu_1053_p3 <= 
        ap_const_lv8_FF when (xor_ln891_24_fu_1047_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_25_fu_1082_p3 <= 
        ap_const_lv8_FF when (xor_ln891_25_fu_1076_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_26_fu_1111_p3 <= 
        ap_const_lv8_FF when (xor_ln891_26_fu_1105_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_27_fu_1140_p3 <= 
        ap_const_lv8_FF when (xor_ln891_27_fu_1134_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_28_fu_1169_p3 <= 
        ap_const_lv8_FF when (xor_ln891_28_fu_1163_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_29_fu_1198_p3 <= 
        ap_const_lv8_FF when (xor_ln891_29_fu_1192_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_2_fu_415_p3 <= 
        ap_const_lv8_FF when (xor_ln891_2_fu_409_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_30_fu_1227_p3 <= 
        ap_const_lv8_FF when (xor_ln891_30_fu_1221_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_3_fu_444_p3 <= 
        ap_const_lv8_FF when (xor_ln891_3_fu_438_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_4_fu_473_p3 <= 
        ap_const_lv8_FF when (xor_ln891_4_fu_467_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_5_fu_502_p3 <= 
        ap_const_lv8_FF when (xor_ln891_5_fu_496_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_6_fu_531_p3 <= 
        ap_const_lv8_FF when (xor_ln891_6_fu_525_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_7_fu_560_p3 <= 
        ap_const_lv8_FF when (xor_ln891_7_fu_554_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_8_fu_589_p3 <= 
        ap_const_lv8_FF when (xor_ln891_8_fu_583_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_9_fu_618_p3 <= 
        ap_const_lv8_FF when (xor_ln891_9_fu_612_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln243_fu_357_p3 <= 
        ap_const_lv8_FF when (xor_ln891_fu_351_p2(0) = '1') else 
        ap_const_lv8_0;
    tmp_2_fu_1256_p33 <= (((((((((((((((((((((((((((((((xor_ln891_31_fu_1250_p2 & select_ln243_30_fu_1227_p3) & select_ln243_29_fu_1198_p3) & select_ln243_28_fu_1169_p3) & select_ln243_27_fu_1140_p3) & select_ln243_26_fu_1111_p3) & select_ln243_25_fu_1082_p3) & select_ln243_24_fu_1053_p3) & select_ln243_23_fu_1024_p3) & select_ln243_22_fu_995_p3) & select_ln243_21_fu_966_p3) & select_ln243_20_fu_937_p3) & select_ln243_19_fu_908_p3) & select_ln243_18_fu_879_p3) & select_ln243_17_fu_850_p3) & select_ln243_16_fu_821_p3) & select_ln243_15_fu_792_p3) & select_ln243_14_fu_763_p3) & select_ln243_13_fu_734_p3) & select_ln243_12_fu_705_p3) & select_ln243_11_fu_676_p3) & select_ln243_10_fu_647_p3) & select_ln243_9_fu_618_p3) & select_ln243_8_fu_589_p3) & select_ln243_7_fu_560_p3) & select_ln243_6_fu_531_p3) & select_ln243_5_fu_502_p3) & select_ln243_4_fu_473_p3) & select_ln243_3_fu_444_p3) & select_ln243_2_fu_415_p3) & select_ln243_1_fu_386_p3) & select_ln243_fu_357_p3);
    tmp_3_fu_306_p3 <= p_Val2_3_reg_223(3 downto 3);
    tmp_4_fu_314_p3 <= p_Val2_3_reg_223(2 downto 2);
    tmp_5_fu_326_p3 <= p_Val2_s_reg_236(1 downto 1);
    tmp_6_fu_334_p3 <= p_Val2_s_reg_236(1 downto 1);
    tmp_7_fu_1329_p3 <= tmp_User_V_5_reg_262(2 downto 2);
        tmp_Data_V_2_fu_1324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_1256_p33),256));

    trunc_ln647_1_fu_342_p1 <= DataBuf_Data_V(8 - 1 downto 0);
    trunc_ln647_fu_322_p1 <= p_Val2_s_reg_236(1 - 1 downto 0);
    xor_ln891_10_fu_641_p2 <= (icmp_ln891_10_fu_636_p2 xor ap_const_lv1_1);
    xor_ln891_11_fu_670_p2 <= (icmp_ln891_11_fu_665_p2 xor ap_const_lv1_1);
    xor_ln891_12_fu_699_p2 <= (icmp_ln891_12_fu_694_p2 xor ap_const_lv1_1);
    xor_ln891_13_fu_728_p2 <= (icmp_ln891_13_fu_723_p2 xor ap_const_lv1_1);
    xor_ln891_14_fu_757_p2 <= (icmp_ln891_14_fu_752_p2 xor ap_const_lv1_1);
    xor_ln891_15_fu_786_p2 <= (icmp_ln891_15_fu_781_p2 xor ap_const_lv1_1);
    xor_ln891_16_fu_815_p2 <= (icmp_ln891_16_fu_810_p2 xor ap_const_lv1_1);
    xor_ln891_17_fu_844_p2 <= (icmp_ln891_17_fu_839_p2 xor ap_const_lv1_1);
    xor_ln891_18_fu_873_p2 <= (icmp_ln891_18_fu_868_p2 xor ap_const_lv1_1);
    xor_ln891_19_fu_902_p2 <= (icmp_ln891_19_fu_897_p2 xor ap_const_lv1_1);
    xor_ln891_1_fu_380_p2 <= (icmp_ln891_1_fu_375_p2 xor ap_const_lv1_1);
    xor_ln891_20_fu_931_p2 <= (icmp_ln891_20_fu_926_p2 xor ap_const_lv1_1);
    xor_ln891_21_fu_960_p2 <= (icmp_ln891_21_fu_955_p2 xor ap_const_lv1_1);
    xor_ln891_22_fu_989_p2 <= (icmp_ln891_22_fu_984_p2 xor ap_const_lv1_1);
    xor_ln891_23_fu_1018_p2 <= (icmp_ln891_23_fu_1013_p2 xor ap_const_lv1_1);
    xor_ln891_24_fu_1047_p2 <= (icmp_ln891_24_fu_1042_p2 xor ap_const_lv1_1);
    xor_ln891_25_fu_1076_p2 <= (icmp_ln891_25_fu_1071_p2 xor ap_const_lv1_1);
    xor_ln891_26_fu_1105_p2 <= (icmp_ln891_26_fu_1100_p2 xor ap_const_lv1_1);
    xor_ln891_27_fu_1134_p2 <= (icmp_ln891_27_fu_1129_p2 xor ap_const_lv1_1);
    xor_ln891_28_fu_1163_p2 <= (icmp_ln891_28_fu_1158_p2 xor ap_const_lv1_1);
    xor_ln891_29_fu_1192_p2 <= (icmp_ln891_29_fu_1187_p2 xor ap_const_lv1_1);
    xor_ln891_2_fu_409_p2 <= (icmp_ln891_2_fu_404_p2 xor ap_const_lv1_1);
    xor_ln891_30_fu_1221_p2 <= (icmp_ln891_30_fu_1216_p2 xor ap_const_lv1_1);
    xor_ln891_31_fu_1250_p2 <= (icmp_ln891_31_fu_1245_p2 xor ap_const_lv1_1);
    xor_ln891_3_fu_438_p2 <= (icmp_ln891_3_fu_433_p2 xor ap_const_lv1_1);
    xor_ln891_4_fu_467_p2 <= (icmp_ln891_4_fu_462_p2 xor ap_const_lv1_1);
    xor_ln891_5_fu_496_p2 <= (icmp_ln891_5_fu_491_p2 xor ap_const_lv1_1);
    xor_ln891_6_fu_525_p2 <= (icmp_ln891_6_fu_520_p2 xor ap_const_lv1_1);
    xor_ln891_7_fu_554_p2 <= (icmp_ln891_7_fu_549_p2 xor ap_const_lv1_1);
    xor_ln891_8_fu_583_p2 <= (icmp_ln891_8_fu_578_p2 xor ap_const_lv1_1);
    xor_ln891_9_fu_612_p2 <= (icmp_ln891_9_fu_607_p2 xor ap_const_lv1_1);
    xor_ln891_fu_351_p2 <= (icmp_ln891_fu_346_p2 xor ap_const_lv1_1);
end behav;
