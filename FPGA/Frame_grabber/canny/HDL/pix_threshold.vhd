-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pix_threshold is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    VideoIn_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    VideoIn_TVALID : IN STD_LOGIC;
    VideoIn_TREADY : OUT STD_LOGIC;
    VideoIn_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    VideoOut_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    VideoOut_TVALID : OUT STD_LOGIC;
    VideoOut_TREADY : IN STD_LOGIC;
    VideoOut_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    MetaIn_StreamId : IN STD_LOGIC_VECTOR (7 downto 0);
    MetaIn_StreamId_ap_vld : IN STD_LOGIC;
    MetaIn_SourceTag : IN STD_LOGIC_VECTOR (15 downto 0);
    MetaIn_SourceTag_ap_vld : IN STD_LOGIC;
    MetaIn_Xsize_V : IN STD_LOGIC_VECTOR (23 downto 0);
    MetaIn_Xsize_V_ap_vld : IN STD_LOGIC;
    MetaIn_Xoffs_V : IN STD_LOGIC_VECTOR (23 downto 0);
    MetaIn_Xoffs_V_ap_vld : IN STD_LOGIC;
    MetaIn_Ysize_V : IN STD_LOGIC_VECTOR (23 downto 0);
    MetaIn_Ysize_V_ap_vld : IN STD_LOGIC;
    MetaIn_Yoffs_V : IN STD_LOGIC_VECTOR (23 downto 0);
    MetaIn_Yoffs_V_ap_vld : IN STD_LOGIC;
    MetaIn_DsizeL_V : IN STD_LOGIC_VECTOR (23 downto 0);
    MetaIn_DsizeL_V_ap_vld : IN STD_LOGIC;
    MetaIn_PixelF : IN STD_LOGIC_VECTOR (15 downto 0);
    MetaIn_PixelF_ap_vld : IN STD_LOGIC;
    MetaIn_TapG : IN STD_LOGIC_VECTOR (15 downto 0);
    MetaIn_TapG_ap_vld : IN STD_LOGIC;
    MetaIn_Flags : IN STD_LOGIC_VECTOR (7 downto 0);
    MetaIn_Flags_ap_vld : IN STD_LOGIC;
    MetaIn_Timestamp : IN STD_LOGIC_VECTOR (31 downto 0);
    MetaIn_Timestamp_ap_vld : IN STD_LOGIC;
    MetaIn_PixProcessingFlgs : IN STD_LOGIC_VECTOR (7 downto 0);
    MetaIn_PixProcessingFlgs_ap_vld : IN STD_LOGIC;
    MetaIn_ModPixelF : IN STD_LOGIC_VECTOR (31 downto 0);
    MetaIn_ModPixelF_ap_vld : IN STD_LOGIC;
    MetaIn_Status : IN STD_LOGIC_VECTOR (31 downto 0);
    MetaIn_Status_ap_vld : IN STD_LOGIC;
    MetaOut_StreamId : OUT STD_LOGIC_VECTOR (7 downto 0);
    MetaOut_SourceTag : OUT STD_LOGIC_VECTOR (15 downto 0);
    MetaOut_Xsize_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_Xoffs_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_Ysize_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_Yoffs_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_DsizeL_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_PixelF : OUT STD_LOGIC_VECTOR (15 downto 0);
    MetaOut_TapG : OUT STD_LOGIC_VECTOR (15 downto 0);
    MetaOut_Flags : OUT STD_LOGIC_VECTOR (7 downto 0);
    MetaOut_Timestamp : OUT STD_LOGIC_VECTOR (31 downto 0);
    MetaOut_PixProcessingFlgs : OUT STD_LOGIC_VECTOR (7 downto 0);
    MetaOut_ModPixelF : OUT STD_LOGIC_VECTOR (31 downto 0);
    MetaOut_Status : OUT STD_LOGIC_VECTOR (31 downto 0);
    threshold_value_V : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of pix_threshold is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pix_threshold,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku035-fbva676-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.200000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1931,HLS_SYN_LUT=951,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal VideoIn_V_Data_V_0_data_out : STD_LOGIC_VECTOR (255 downto 0);
    signal VideoIn_V_Data_V_0_vld_in : STD_LOGIC;
    signal VideoIn_V_Data_V_0_vld_out : STD_LOGIC;
    signal VideoIn_V_Data_V_0_ack_in : STD_LOGIC;
    signal VideoIn_V_Data_V_0_ack_out : STD_LOGIC;
    signal VideoIn_V_Data_V_0_payload_A : STD_LOGIC_VECTOR (255 downto 0);
    signal VideoIn_V_Data_V_0_payload_B : STD_LOGIC_VECTOR (255 downto 0);
    signal VideoIn_V_Data_V_0_sel_rd : STD_LOGIC := '0';
    signal VideoIn_V_Data_V_0_sel_wr : STD_LOGIC := '0';
    signal VideoIn_V_Data_V_0_sel : STD_LOGIC;
    signal VideoIn_V_Data_V_0_load_A : STD_LOGIC;
    signal VideoIn_V_Data_V_0_load_B : STD_LOGIC;
    signal VideoIn_V_Data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal VideoIn_V_Data_V_0_state_cmp_full : STD_LOGIC;
    signal VideoIn_V_User_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal VideoIn_V_User_V_0_vld_in : STD_LOGIC;
    signal VideoIn_V_User_V_0_vld_out : STD_LOGIC;
    signal VideoIn_V_User_V_0_ack_in : STD_LOGIC;
    signal VideoIn_V_User_V_0_ack_out : STD_LOGIC;
    signal VideoIn_V_User_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal VideoIn_V_User_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal VideoIn_V_User_V_0_sel_rd : STD_LOGIC := '0';
    signal VideoIn_V_User_V_0_sel_wr : STD_LOGIC := '0';
    signal VideoIn_V_User_V_0_sel : STD_LOGIC;
    signal VideoIn_V_User_V_0_load_A : STD_LOGIC;
    signal VideoIn_V_User_V_0_load_B : STD_LOGIC;
    signal VideoIn_V_User_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal VideoIn_V_User_V_0_state_cmp_full : STD_LOGIC;
    signal VideoOut_V_Data_V_1_data_out : STD_LOGIC_VECTOR (255 downto 0);
    signal VideoOut_V_Data_V_1_vld_in : STD_LOGIC;
    signal VideoOut_V_Data_V_1_vld_out : STD_LOGIC;
    signal VideoOut_V_Data_V_1_ack_in : STD_LOGIC;
    signal VideoOut_V_Data_V_1_ack_out : STD_LOGIC;
    signal VideoOut_V_Data_V_1_payload_A : STD_LOGIC_VECTOR (255 downto 0);
    signal VideoOut_V_Data_V_1_payload_B : STD_LOGIC_VECTOR (255 downto 0);
    signal VideoOut_V_Data_V_1_sel_rd : STD_LOGIC := '0';
    signal VideoOut_V_Data_V_1_sel_wr : STD_LOGIC := '0';
    signal VideoOut_V_Data_V_1_sel : STD_LOGIC;
    signal VideoOut_V_Data_V_1_load_A : STD_LOGIC;
    signal VideoOut_V_Data_V_1_load_B : STD_LOGIC;
    signal VideoOut_V_Data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal VideoOut_V_Data_V_1_state_cmp_full : STD_LOGIC;
    signal VideoOut_V_User_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal VideoOut_V_User_V_1_vld_in : STD_LOGIC;
    signal VideoOut_V_User_V_1_vld_out : STD_LOGIC;
    signal VideoOut_V_User_V_1_ack_in : STD_LOGIC;
    signal VideoOut_V_User_V_1_ack_out : STD_LOGIC;
    signal VideoOut_V_User_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal VideoOut_V_User_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal VideoOut_V_User_V_1_sel_rd : STD_LOGIC := '0';
    signal VideoOut_V_User_V_1_sel_wr : STD_LOGIC := '0';
    signal VideoOut_V_User_V_1_sel : STD_LOGIC;
    signal VideoOut_V_User_V_1_load_A : STD_LOGIC;
    signal VideoOut_V_User_V_1_load_B : STD_LOGIC;
    signal VideoOut_V_User_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal VideoOut_V_User_V_1_state_cmp_full : STD_LOGIC;
    signal MetaIn_StreamId_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal MetaIn_StreamId_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_SourceTag_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal MetaIn_SourceTag_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_Xsize_V_preg : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaIn_Xsize_V_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_Xoffs_V_preg : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaIn_Xoffs_V_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_Ysize_V_preg : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaIn_Ysize_V_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_Yoffs_V_preg : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaIn_Yoffs_V_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_DsizeL_V_preg : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaIn_DsizeL_V_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_PixelF_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal MetaIn_PixelF_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_TapG_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal MetaIn_TapG_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_Flags_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal MetaIn_Flags_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_Timestamp_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal MetaIn_Timestamp_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_PixProcessingFlgs_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal MetaIn_PixProcessingFlgs_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_ModPixelF_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal MetaIn_ModPixelF_ap_vld_preg : STD_LOGIC := '0';
    signal MetaIn_Status_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal MetaIn_Status_ap_vld_preg : STD_LOGIC := '0';
    signal guard_variable_for_m : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal MetaTmp_StreamId : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal MetaTmp_SourceTag : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal MetaTmp_Xsize_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaTmp_Xoffs_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaTmp_Ysize_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaTmp_Yoffs_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaTmp_DsizeL_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaTmp_PixelF : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal MetaTmp_TapG : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal MetaTmp_Flags : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal MetaTmp_Timestamp : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal MetaTmp_PixProcessin : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal MetaTmp_ModPixelF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal MetaTmp_Status : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal MetaIn_StreamId_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal MetaIn_SourceTag_blk_n : STD_LOGIC;
    signal MetaIn_Xsize_V_blk_n : STD_LOGIC;
    signal MetaIn_Xoffs_V_blk_n : STD_LOGIC;
    signal MetaIn_Ysize_V_blk_n : STD_LOGIC;
    signal MetaIn_Yoffs_V_blk_n : STD_LOGIC;
    signal MetaIn_DsizeL_V_blk_n : STD_LOGIC;
    signal MetaIn_PixelF_blk_n : STD_LOGIC;
    signal MetaIn_TapG_blk_n : STD_LOGIC;
    signal MetaIn_Flags_blk_n : STD_LOGIC;
    signal MetaIn_Timestamp_blk_n : STD_LOGIC;
    signal MetaIn_PixProcessingFlgs_blk_n : STD_LOGIC;
    signal MetaIn_ModPixelF_blk_n : STD_LOGIC;
    signal MetaIn_Status_blk_n : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal grp_pix_threshold_proc_fu_330_ap_start : STD_LOGIC;
    signal grp_pix_threshold_proc_fu_330_ap_done : STD_LOGIC;
    signal grp_pix_threshold_proc_fu_330_ap_idle : STD_LOGIC;
    signal grp_pix_threshold_proc_fu_330_ap_ready : STD_LOGIC;
    signal grp_pix_threshold_proc_fu_330_VideoIn_TVALID : STD_LOGIC;
    signal grp_pix_threshold_proc_fu_330_VideoIn_TREADY : STD_LOGIC;
    signal grp_pix_threshold_proc_fu_330_VideoOut_TDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_pix_threshold_proc_fu_330_VideoOut_TVALID : STD_LOGIC;
    signal grp_pix_threshold_proc_fu_330_VideoOut_TREADY : STD_LOGIC;
    signal grp_pix_threshold_proc_fu_330_VideoOut_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pix_threshold_proc_fu_330_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call28 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal guard_variable_for_m_1_load_fu_346_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component pix_threshold_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        VideoIn_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        VideoIn_TVALID : IN STD_LOGIC;
        VideoIn_TREADY : OUT STD_LOGIC;
        VideoIn_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
        VideoOut_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        VideoOut_TVALID : OUT STD_LOGIC;
        VideoOut_TREADY : IN STD_LOGIC;
        VideoOut_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        threshold_value_V : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_pix_threshold_proc_fu_330 : component pix_threshold_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pix_threshold_proc_fu_330_ap_start,
        ap_done => grp_pix_threshold_proc_fu_330_ap_done,
        ap_idle => grp_pix_threshold_proc_fu_330_ap_idle,
        ap_ready => grp_pix_threshold_proc_fu_330_ap_ready,
        VideoIn_TDATA => VideoIn_V_Data_V_0_data_out,
        VideoIn_TVALID => grp_pix_threshold_proc_fu_330_VideoIn_TVALID,
        VideoIn_TREADY => grp_pix_threshold_proc_fu_330_VideoIn_TREADY,
        VideoIn_TUSER => VideoIn_V_User_V_0_data_out,
        VideoOut_TDATA => grp_pix_threshold_proc_fu_330_VideoOut_TDATA,
        VideoOut_TVALID => grp_pix_threshold_proc_fu_330_VideoOut_TVALID,
        VideoOut_TREADY => grp_pix_threshold_proc_fu_330_VideoOut_TREADY,
        VideoOut_TUSER => grp_pix_threshold_proc_fu_330_VideoOut_TUSER,
        threshold_value_V => threshold_value_V);





    MetaIn_DsizeL_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_DsizeL_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_DsizeL_V_ap_vld))) then 
                    MetaIn_DsizeL_V_ap_vld_preg <= MetaIn_DsizeL_V_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_DsizeL_V_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_DsizeL_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_DsizeL_V_preg <= ap_const_lv24_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_DsizeL_V_ap_vld))) then 
                    MetaIn_DsizeL_V_preg <= MetaIn_DsizeL_V;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Flags_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Flags_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Flags_ap_vld))) then 
                    MetaIn_Flags_ap_vld_preg <= MetaIn_Flags_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_Flags_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Flags_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Flags_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Flags_ap_vld))) then 
                    MetaIn_Flags_preg <= MetaIn_Flags;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_ModPixelF_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_ModPixelF_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_ModPixelF_ap_vld))) then 
                    MetaIn_ModPixelF_ap_vld_preg <= MetaIn_ModPixelF_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_ModPixelF_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_ModPixelF_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_ModPixelF_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_ModPixelF_ap_vld))) then 
                    MetaIn_ModPixelF_preg <= MetaIn_ModPixelF;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_PixProcessingFlgs_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_PixProcessingFlgs_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_PixProcessingFlgs_ap_vld))) then 
                    MetaIn_PixProcessingFlgs_ap_vld_preg <= MetaIn_PixProcessingFlgs_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_PixProcessingFlgs_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_PixProcessingFlgs_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_PixProcessingFlgs_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_PixProcessingFlgs_ap_vld))) then 
                    MetaIn_PixProcessingFlgs_preg <= MetaIn_PixProcessingFlgs;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_PixelF_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_PixelF_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_PixelF_ap_vld))) then 
                    MetaIn_PixelF_ap_vld_preg <= MetaIn_PixelF_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_PixelF_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_PixelF_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_PixelF_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_PixelF_ap_vld))) then 
                    MetaIn_PixelF_preg <= MetaIn_PixelF;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_SourceTag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_SourceTag_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_SourceTag_ap_vld))) then 
                    MetaIn_SourceTag_ap_vld_preg <= MetaIn_SourceTag_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_SourceTag_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_SourceTag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_SourceTag_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_SourceTag_ap_vld))) then 
                    MetaIn_SourceTag_preg <= MetaIn_SourceTag;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Status_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Status_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Status_ap_vld))) then 
                    MetaIn_Status_ap_vld_preg <= MetaIn_Status_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_Status_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Status_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Status_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Status_ap_vld))) then 
                    MetaIn_Status_preg <= MetaIn_Status;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_StreamId_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_StreamId_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_StreamId_ap_vld))) then 
                    MetaIn_StreamId_ap_vld_preg <= MetaIn_StreamId_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_StreamId_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_StreamId_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_StreamId_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_StreamId_ap_vld))) then 
                    MetaIn_StreamId_preg <= MetaIn_StreamId;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_TapG_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_TapG_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_TapG_ap_vld))) then 
                    MetaIn_TapG_ap_vld_preg <= MetaIn_TapG_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_TapG_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_TapG_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_TapG_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_TapG_ap_vld))) then 
                    MetaIn_TapG_preg <= MetaIn_TapG;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Timestamp_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Timestamp_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Timestamp_ap_vld))) then 
                    MetaIn_Timestamp_ap_vld_preg <= MetaIn_Timestamp_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_Timestamp_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Timestamp_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Timestamp_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Timestamp_ap_vld))) then 
                    MetaIn_Timestamp_preg <= MetaIn_Timestamp;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Xoffs_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Xoffs_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Xoffs_V_ap_vld))) then 
                    MetaIn_Xoffs_V_ap_vld_preg <= MetaIn_Xoffs_V_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_Xoffs_V_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Xoffs_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Xoffs_V_preg <= ap_const_lv24_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Xoffs_V_ap_vld))) then 
                    MetaIn_Xoffs_V_preg <= MetaIn_Xoffs_V;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Xsize_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Xsize_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Xsize_V_ap_vld))) then 
                    MetaIn_Xsize_V_ap_vld_preg <= MetaIn_Xsize_V_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_Xsize_V_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Xsize_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Xsize_V_preg <= ap_const_lv24_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Xsize_V_ap_vld))) then 
                    MetaIn_Xsize_V_preg <= MetaIn_Xsize_V;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Yoffs_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Yoffs_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Yoffs_V_ap_vld))) then 
                    MetaIn_Yoffs_V_ap_vld_preg <= MetaIn_Yoffs_V_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_Yoffs_V_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Yoffs_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Yoffs_V_preg <= ap_const_lv24_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Yoffs_V_ap_vld))) then 
                    MetaIn_Yoffs_V_preg <= MetaIn_Yoffs_V;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Ysize_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Ysize_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Ysize_V_ap_vld))) then 
                    MetaIn_Ysize_V_ap_vld_preg <= MetaIn_Ysize_V_ap_vld;
                elsif ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    MetaIn_Ysize_V_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    MetaIn_Ysize_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                MetaIn_Ysize_V_preg <= ap_const_lv24_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = MetaIn_Ysize_V_ap_vld))) then 
                    MetaIn_Ysize_V_preg <= MetaIn_Ysize_V;
                end if; 
            end if;
        end if;
    end process;


    VideoIn_V_Data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoIn_V_Data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VideoIn_V_Data_V_0_ack_out) and (ap_const_logic_1 = VideoIn_V_Data_V_0_vld_out))) then 
                                        VideoIn_V_Data_V_0_sel_rd <= not(VideoIn_V_Data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    VideoIn_V_Data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoIn_V_Data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VideoIn_V_Data_V_0_ack_in) and (ap_const_logic_1 = VideoIn_V_Data_V_0_vld_in))) then 
                                        VideoIn_V_Data_V_0_sel_wr <= not(VideoIn_V_Data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    VideoIn_V_Data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoIn_V_Data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = VideoIn_V_Data_V_0_state) and (ap_const_logic_0 = VideoIn_V_Data_V_0_vld_in)) or ((ap_const_lv2_3 = VideoIn_V_Data_V_0_state) and (ap_const_logic_0 = VideoIn_V_Data_V_0_vld_in) and (ap_const_logic_1 = VideoIn_V_Data_V_0_ack_out)))) then 
                    VideoIn_V_Data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = VideoIn_V_Data_V_0_state) and (ap_const_logic_0 = VideoIn_V_Data_V_0_ack_out)) or ((ap_const_lv2_3 = VideoIn_V_Data_V_0_state) and (ap_const_logic_0 = VideoIn_V_Data_V_0_ack_out) and (ap_const_logic_1 = VideoIn_V_Data_V_0_vld_in)))) then 
                    VideoIn_V_Data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = VideoIn_V_Data_V_0_vld_in) and (ap_const_logic_1 = VideoIn_V_Data_V_0_ack_out))) and not(((ap_const_logic_0 = VideoIn_V_Data_V_0_ack_out) and (ap_const_logic_1 = VideoIn_V_Data_V_0_vld_in))) and (ap_const_lv2_3 = VideoIn_V_Data_V_0_state)) or ((ap_const_lv2_1 = VideoIn_V_Data_V_0_state) and (ap_const_logic_1 = VideoIn_V_Data_V_0_ack_out)) or ((ap_const_lv2_2 = VideoIn_V_Data_V_0_state) and (ap_const_logic_1 = VideoIn_V_Data_V_0_vld_in)))) then 
                    VideoIn_V_Data_V_0_state <= ap_const_lv2_3;
                else 
                    VideoIn_V_Data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    VideoIn_V_User_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoIn_V_User_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VideoIn_V_User_V_0_vld_out) and (ap_const_logic_1 = VideoIn_V_User_V_0_ack_out))) then 
                                        VideoIn_V_User_V_0_sel_rd <= not(VideoIn_V_User_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    VideoIn_V_User_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoIn_V_User_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VideoIn_V_User_V_0_ack_in) and (ap_const_logic_1 = VideoIn_V_User_V_0_vld_in))) then 
                                        VideoIn_V_User_V_0_sel_wr <= not(VideoIn_V_User_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    VideoIn_V_User_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoIn_V_User_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = VideoIn_V_User_V_0_state) and (ap_const_logic_0 = VideoIn_V_User_V_0_vld_in)) or ((ap_const_lv2_3 = VideoIn_V_User_V_0_state) and (ap_const_logic_0 = VideoIn_V_User_V_0_vld_in) and (ap_const_logic_1 = VideoIn_V_User_V_0_ack_out)))) then 
                    VideoIn_V_User_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = VideoIn_V_User_V_0_state) and (ap_const_logic_0 = VideoIn_V_User_V_0_ack_out)) or ((ap_const_lv2_3 = VideoIn_V_User_V_0_state) and (ap_const_logic_0 = VideoIn_V_User_V_0_ack_out) and (ap_const_logic_1 = VideoIn_V_User_V_0_vld_in)))) then 
                    VideoIn_V_User_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = VideoIn_V_User_V_0_vld_in) and (ap_const_logic_1 = VideoIn_V_User_V_0_ack_out))) and not(((ap_const_logic_0 = VideoIn_V_User_V_0_ack_out) and (ap_const_logic_1 = VideoIn_V_User_V_0_vld_in))) and (ap_const_lv2_3 = VideoIn_V_User_V_0_state)) or ((ap_const_lv2_1 = VideoIn_V_User_V_0_state) and (ap_const_logic_1 = VideoIn_V_User_V_0_ack_out)) or ((ap_const_lv2_2 = VideoIn_V_User_V_0_state) and (ap_const_logic_1 = VideoIn_V_User_V_0_vld_in)))) then 
                    VideoIn_V_User_V_0_state <= ap_const_lv2_3;
                else 
                    VideoIn_V_User_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    VideoOut_V_Data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoOut_V_Data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VideoOut_V_Data_V_1_ack_out) and (ap_const_logic_1 = VideoOut_V_Data_V_1_vld_out))) then 
                                        VideoOut_V_Data_V_1_sel_rd <= not(VideoOut_V_Data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    VideoOut_V_Data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoOut_V_Data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VideoOut_V_Data_V_1_ack_in) and (ap_const_logic_1 = VideoOut_V_Data_V_1_vld_in))) then 
                                        VideoOut_V_Data_V_1_sel_wr <= not(VideoOut_V_Data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    VideoOut_V_Data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoOut_V_Data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = VideoOut_V_Data_V_1_state) and (ap_const_logic_0 = VideoOut_V_Data_V_1_vld_in)) or ((ap_const_lv2_3 = VideoOut_V_Data_V_1_state) and (ap_const_logic_0 = VideoOut_V_Data_V_1_vld_in) and (ap_const_logic_1 = VideoOut_V_Data_V_1_ack_out)))) then 
                    VideoOut_V_Data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = VideoOut_V_Data_V_1_state) and (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_out)) or ((ap_const_lv2_3 = VideoOut_V_Data_V_1_state) and (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_out) and (ap_const_logic_1 = VideoOut_V_Data_V_1_vld_in)))) then 
                    VideoOut_V_Data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = VideoOut_V_Data_V_1_vld_in) and (ap_const_logic_1 = VideoOut_V_Data_V_1_ack_out))) and not(((ap_const_logic_0 = VideoOut_V_Data_V_1_ack_out) and (ap_const_logic_1 = VideoOut_V_Data_V_1_vld_in))) and (ap_const_lv2_3 = VideoOut_V_Data_V_1_state)) or ((ap_const_lv2_1 = VideoOut_V_Data_V_1_state) and (ap_const_logic_1 = VideoOut_V_Data_V_1_ack_out)) or ((ap_const_lv2_2 = VideoOut_V_Data_V_1_state) and (ap_const_logic_1 = VideoOut_V_Data_V_1_vld_in)))) then 
                    VideoOut_V_Data_V_1_state <= ap_const_lv2_3;
                else 
                    VideoOut_V_Data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    VideoOut_V_User_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoOut_V_User_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VideoOut_V_User_V_1_ack_out) and (ap_const_logic_1 = VideoOut_V_User_V_1_vld_out))) then 
                                        VideoOut_V_User_V_1_sel_rd <= not(VideoOut_V_User_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    VideoOut_V_User_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoOut_V_User_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VideoOut_V_User_V_1_ack_in) and (ap_const_logic_1 = VideoOut_V_User_V_1_vld_in))) then 
                                        VideoOut_V_User_V_1_sel_wr <= not(VideoOut_V_User_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    VideoOut_V_User_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VideoOut_V_User_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = VideoOut_V_User_V_1_state) and (ap_const_logic_0 = VideoOut_V_User_V_1_vld_in)) or ((ap_const_lv2_3 = VideoOut_V_User_V_1_state) and (ap_const_logic_0 = VideoOut_V_User_V_1_vld_in) and (ap_const_logic_1 = VideoOut_V_User_V_1_ack_out)))) then 
                    VideoOut_V_User_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = VideoOut_V_User_V_1_state) and (ap_const_logic_0 = VideoOut_V_User_V_1_ack_out)) or ((ap_const_lv2_3 = VideoOut_V_User_V_1_state) and (ap_const_logic_0 = VideoOut_V_User_V_1_ack_out) and (ap_const_logic_1 = VideoOut_V_User_V_1_vld_in)))) then 
                    VideoOut_V_User_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = VideoOut_V_User_V_1_vld_in) and (ap_const_logic_1 = VideoOut_V_User_V_1_ack_out))) and not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_out) and (ap_const_logic_1 = VideoOut_V_User_V_1_vld_in))) and (ap_const_lv2_3 = VideoOut_V_User_V_1_state)) or ((ap_const_lv2_1 = VideoOut_V_User_V_1_state) and (ap_const_logic_1 = VideoOut_V_User_V_1_ack_out)) or ((ap_const_lv2_2 = VideoOut_V_User_V_1_state) and (ap_const_logic_1 = VideoOut_V_User_V_1_vld_in)))) then 
                    VideoOut_V_User_V_1_state <= ap_const_lv2_3;
                else 
                    VideoOut_V_User_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pix_threshold_proc_fu_330_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pix_threshold_proc_fu_330_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_const_logic_0 = MetaIn_Status_ap_vld_preg) or (ap_const_logic_0 = MetaIn_ModPixelF_ap_vld_preg) or (ap_const_logic_0 = MetaIn_PixProcessingFlgs_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Timestamp_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Flags_ap_vld_preg) or (ap_const_logic_0 = MetaIn_TapG_ap_vld_preg) or (ap_const_logic_0 = MetaIn_PixelF_ap_vld_preg) or (ap_const_logic_0 = MetaIn_DsizeL_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Yoffs_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Ysize_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Xoffs_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Xsize_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_SourceTag_ap_vld_preg) or (ap_const_logic_0 = MetaIn_StreamId_ap_vld_preg))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_pix_threshold_proc_fu_330_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pix_threshold_proc_fu_330_ap_ready = ap_const_logic_1)) then 
                    grp_pix_threshold_proc_fu_330_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = MetaIn_Status_ap_vld_preg) or (ap_const_logic_0 = MetaIn_ModPixelF_ap_vld_preg) or (ap_const_logic_0 = MetaIn_PixProcessingFlgs_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Timestamp_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Flags_ap_vld_preg) or (ap_const_logic_0 = MetaIn_TapG_ap_vld_preg) or (ap_const_logic_0 = MetaIn_PixelF_ap_vld_preg) or (ap_const_logic_0 = MetaIn_DsizeL_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Yoffs_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Ysize_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Xoffs_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Xsize_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_SourceTag_ap_vld_preg) or (ap_const_logic_0 = MetaIn_StreamId_ap_vld_preg))) and (guard_variable_for_m_1_load_fu_346_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                MetaTmp_DsizeL_V <= MetaIn_DsizeL_V_preg;
                MetaTmp_Flags <= MetaIn_Flags_preg;
                MetaTmp_ModPixelF <= MetaIn_ModPixelF_preg;
                MetaTmp_PixProcessin <= MetaIn_PixProcessingFlgs_preg;
                MetaTmp_PixelF <= MetaIn_PixelF_preg;
                MetaTmp_SourceTag <= MetaIn_SourceTag_preg;
                MetaTmp_Status <= MetaIn_Status_preg;
                MetaTmp_StreamId <= MetaIn_StreamId_preg;
                MetaTmp_TapG <= MetaIn_TapG_preg;
                MetaTmp_Timestamp <= MetaIn_Timestamp_preg;
                MetaTmp_Xoffs_V <= MetaIn_Xoffs_V_preg;
                MetaTmp_Xsize_V <= MetaIn_Xsize_V_preg;
                MetaTmp_Yoffs_V <= MetaIn_Yoffs_V_preg;
                MetaTmp_Ysize_V <= MetaIn_Ysize_V_preg;
                guard_variable_for_m <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VideoIn_V_Data_V_0_load_A)) then
                VideoIn_V_Data_V_0_payload_A <= VideoIn_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VideoIn_V_Data_V_0_load_B)) then
                VideoIn_V_Data_V_0_payload_B <= VideoIn_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VideoIn_V_User_V_0_load_A)) then
                VideoIn_V_User_V_0_payload_A <= VideoIn_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VideoIn_V_User_V_0_load_B)) then
                VideoIn_V_User_V_0_payload_B <= VideoIn_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VideoOut_V_Data_V_1_load_A)) then
                VideoOut_V_Data_V_1_payload_A <= grp_pix_threshold_proc_fu_330_VideoOut_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VideoOut_V_Data_V_1_load_B)) then
                VideoOut_V_Data_V_1_payload_B <= grp_pix_threshold_proc_fu_330_VideoOut_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VideoOut_V_User_V_1_load_A)) then
                VideoOut_V_User_V_1_payload_A <= grp_pix_threshold_proc_fu_330_VideoOut_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VideoOut_V_User_V_1_load_B)) then
                VideoOut_V_User_V_1_payload_B <= grp_pix_threshold_proc_fu_330_VideoOut_TUSER;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, VideoOut_V_Data_V_1_ack_in, VideoOut_V_Data_V_1_state, VideoOut_V_User_V_1_ack_in, VideoOut_V_User_V_1_state, MetaIn_StreamId_ap_vld_preg, MetaIn_SourceTag_ap_vld_preg, MetaIn_Xsize_V_ap_vld_preg, MetaIn_Xoffs_V_ap_vld_preg, MetaIn_Ysize_V_ap_vld_preg, MetaIn_Yoffs_V_ap_vld_preg, MetaIn_DsizeL_V_ap_vld_preg, MetaIn_PixelF_ap_vld_preg, MetaIn_TapG_ap_vld_preg, MetaIn_Flags_ap_vld_preg, MetaIn_Timestamp_ap_vld_preg, MetaIn_PixProcessingFlgs_ap_vld_preg, MetaIn_ModPixelF_ap_vld_preg, MetaIn_Status_ap_vld_preg, ap_CS_fsm_state2, grp_pix_threshold_proc_fu_330_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = MetaIn_Status_ap_vld_preg) or (ap_const_logic_0 = MetaIn_ModPixelF_ap_vld_preg) or (ap_const_logic_0 = MetaIn_PixProcessingFlgs_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Timestamp_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Flags_ap_vld_preg) or (ap_const_logic_0 = MetaIn_TapG_ap_vld_preg) or (ap_const_logic_0 = MetaIn_PixelF_ap_vld_preg) or (ap_const_logic_0 = MetaIn_DsizeL_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Yoffs_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Ysize_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Xoffs_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Xsize_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_SourceTag_ap_vld_preg) or (ap_const_logic_0 = MetaIn_StreamId_ap_vld_preg))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_pix_threshold_proc_fu_330_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (VideoOut_V_User_V_1_state(0) = ap_const_logic_0) and (VideoOut_V_Data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    MetaIn_DsizeL_V_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_DsizeL_V_blk_n <= ap_const_logic_0;
        else 
            MetaIn_DsizeL_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_Flags_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_Flags_blk_n <= ap_const_logic_0;
        else 
            MetaIn_Flags_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_ModPixelF_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_ModPixelF_blk_n <= ap_const_logic_0;
        else 
            MetaIn_ModPixelF_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_PixProcessingFlgs_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_PixProcessingFlgs_blk_n <= ap_const_logic_0;
        else 
            MetaIn_PixProcessingFlgs_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_PixelF_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_PixelF_blk_n <= ap_const_logic_0;
        else 
            MetaIn_PixelF_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_SourceTag_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_SourceTag_blk_n <= ap_const_logic_0;
        else 
            MetaIn_SourceTag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_Status_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_Status_blk_n <= ap_const_logic_0;
        else 
            MetaIn_Status_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_StreamId_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_StreamId_blk_n <= ap_const_logic_0;
        else 
            MetaIn_StreamId_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_TapG_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_TapG_blk_n <= ap_const_logic_0;
        else 
            MetaIn_TapG_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_Timestamp_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_Timestamp_blk_n <= ap_const_logic_0;
        else 
            MetaIn_Timestamp_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_Xoffs_V_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_Xoffs_V_blk_n <= ap_const_logic_0;
        else 
            MetaIn_Xoffs_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_Xsize_V_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_Xsize_V_blk_n <= ap_const_logic_0;
        else 
            MetaIn_Xsize_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_Yoffs_V_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_Yoffs_V_blk_n <= ap_const_logic_0;
        else 
            MetaIn_Yoffs_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MetaIn_Ysize_V_blk_n_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaIn_Ysize_V_blk_n <= ap_const_logic_0;
        else 
            MetaIn_Ysize_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    MetaOut_DsizeL_V <= MetaTmp_DsizeL_V;
    MetaOut_Flags <= MetaTmp_Flags;
    MetaOut_ModPixelF <= MetaTmp_ModPixelF;
    MetaOut_PixProcessingFlgs <= MetaTmp_PixProcessin;
    MetaOut_PixelF <= MetaTmp_PixelF;
    MetaOut_SourceTag <= MetaTmp_SourceTag;
    MetaOut_Status <= MetaTmp_Status;
    MetaOut_StreamId <= MetaTmp_StreamId;
    MetaOut_TapG <= MetaTmp_TapG;
    MetaOut_Timestamp <= MetaTmp_Timestamp;
    MetaOut_Xoffs_V <= MetaTmp_Xoffs_V;
    MetaOut_Xsize_V <= MetaTmp_Xsize_V;
    MetaOut_Yoffs_V <= MetaTmp_Yoffs_V;
    MetaOut_Ysize_V <= MetaTmp_Ysize_V;
    VideoIn_TREADY <= VideoIn_V_User_V_0_state(1);
    VideoIn_V_Data_V_0_ack_in <= VideoIn_V_Data_V_0_state(1);

    VideoIn_V_Data_V_0_ack_out_assign_proc : process(grp_pix_threshold_proc_fu_330_VideoIn_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            VideoIn_V_Data_V_0_ack_out <= grp_pix_threshold_proc_fu_330_VideoIn_TREADY;
        else 
            VideoIn_V_Data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    VideoIn_V_Data_V_0_data_out_assign_proc : process(VideoIn_V_Data_V_0_payload_A, VideoIn_V_Data_V_0_payload_B, VideoIn_V_Data_V_0_sel)
    begin
        if ((ap_const_logic_1 = VideoIn_V_Data_V_0_sel)) then 
            VideoIn_V_Data_V_0_data_out <= VideoIn_V_Data_V_0_payload_B;
        else 
            VideoIn_V_Data_V_0_data_out <= VideoIn_V_Data_V_0_payload_A;
        end if; 
    end process;

    VideoIn_V_Data_V_0_load_A <= (not(VideoIn_V_Data_V_0_sel_wr) and VideoIn_V_Data_V_0_state_cmp_full);
    VideoIn_V_Data_V_0_load_B <= (VideoIn_V_Data_V_0_state_cmp_full and VideoIn_V_Data_V_0_sel_wr);
    VideoIn_V_Data_V_0_sel <= VideoIn_V_Data_V_0_sel_rd;
    VideoIn_V_Data_V_0_state_cmp_full <= '0' when (VideoIn_V_Data_V_0_state = ap_const_lv2_1) else '1';
    VideoIn_V_Data_V_0_vld_in <= VideoIn_TVALID;
    VideoIn_V_Data_V_0_vld_out <= VideoIn_V_Data_V_0_state(0);
    VideoIn_V_User_V_0_ack_in <= VideoIn_V_User_V_0_state(1);

    VideoIn_V_User_V_0_ack_out_assign_proc : process(grp_pix_threshold_proc_fu_330_VideoIn_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            VideoIn_V_User_V_0_ack_out <= grp_pix_threshold_proc_fu_330_VideoIn_TREADY;
        else 
            VideoIn_V_User_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    VideoIn_V_User_V_0_data_out_assign_proc : process(VideoIn_V_User_V_0_payload_A, VideoIn_V_User_V_0_payload_B, VideoIn_V_User_V_0_sel)
    begin
        if ((ap_const_logic_1 = VideoIn_V_User_V_0_sel)) then 
            VideoIn_V_User_V_0_data_out <= VideoIn_V_User_V_0_payload_B;
        else 
            VideoIn_V_User_V_0_data_out <= VideoIn_V_User_V_0_payload_A;
        end if; 
    end process;

    VideoIn_V_User_V_0_load_A <= (not(VideoIn_V_User_V_0_sel_wr) and VideoIn_V_User_V_0_state_cmp_full);
    VideoIn_V_User_V_0_load_B <= (VideoIn_V_User_V_0_state_cmp_full and VideoIn_V_User_V_0_sel_wr);
    VideoIn_V_User_V_0_sel <= VideoIn_V_User_V_0_sel_rd;
    VideoIn_V_User_V_0_state_cmp_full <= '0' when (VideoIn_V_User_V_0_state = ap_const_lv2_1) else '1';
    VideoIn_V_User_V_0_vld_in <= VideoIn_TVALID;
    VideoIn_V_User_V_0_vld_out <= VideoIn_V_User_V_0_state(0);
    VideoOut_TDATA <= VideoOut_V_Data_V_1_data_out;
    VideoOut_TUSER <= VideoOut_V_User_V_1_data_out;
    VideoOut_TVALID <= VideoOut_V_User_V_1_state(0);
    VideoOut_V_Data_V_1_ack_in <= VideoOut_V_Data_V_1_state(1);
    VideoOut_V_Data_V_1_ack_out <= VideoOut_TREADY;

    VideoOut_V_Data_V_1_data_out_assign_proc : process(VideoOut_V_Data_V_1_payload_A, VideoOut_V_Data_V_1_payload_B, VideoOut_V_Data_V_1_sel)
    begin
        if ((ap_const_logic_1 = VideoOut_V_Data_V_1_sel)) then 
            VideoOut_V_Data_V_1_data_out <= VideoOut_V_Data_V_1_payload_B;
        else 
            VideoOut_V_Data_V_1_data_out <= VideoOut_V_Data_V_1_payload_A;
        end if; 
    end process;

    VideoOut_V_Data_V_1_load_A <= (not(VideoOut_V_Data_V_1_sel_wr) and VideoOut_V_Data_V_1_state_cmp_full);
    VideoOut_V_Data_V_1_load_B <= (VideoOut_V_Data_V_1_state_cmp_full and VideoOut_V_Data_V_1_sel_wr);
    VideoOut_V_Data_V_1_sel <= VideoOut_V_Data_V_1_sel_rd;
    VideoOut_V_Data_V_1_state_cmp_full <= '0' when (VideoOut_V_Data_V_1_state = ap_const_lv2_1) else '1';
    VideoOut_V_Data_V_1_vld_in <= grp_pix_threshold_proc_fu_330_VideoOut_TVALID;
    VideoOut_V_Data_V_1_vld_out <= VideoOut_V_Data_V_1_state(0);
    VideoOut_V_User_V_1_ack_in <= VideoOut_V_User_V_1_state(1);
    VideoOut_V_User_V_1_ack_out <= VideoOut_TREADY;

    VideoOut_V_User_V_1_data_out_assign_proc : process(VideoOut_V_User_V_1_payload_A, VideoOut_V_User_V_1_payload_B, VideoOut_V_User_V_1_sel)
    begin
        if ((ap_const_logic_1 = VideoOut_V_User_V_1_sel)) then 
            VideoOut_V_User_V_1_data_out <= VideoOut_V_User_V_1_payload_B;
        else 
            VideoOut_V_User_V_1_data_out <= VideoOut_V_User_V_1_payload_A;
        end if; 
    end process;

    VideoOut_V_User_V_1_load_A <= (not(VideoOut_V_User_V_1_sel_wr) and VideoOut_V_User_V_1_state_cmp_full);
    VideoOut_V_User_V_1_load_B <= (VideoOut_V_User_V_1_state_cmp_full and VideoOut_V_User_V_1_sel_wr);
    VideoOut_V_User_V_1_sel <= VideoOut_V_User_V_1_sel_rd;
    VideoOut_V_User_V_1_state_cmp_full <= '0' when (VideoOut_V_User_V_1_state = ap_const_lv2_1) else '1';
    VideoOut_V_User_V_1_vld_in <= grp_pix_threshold_proc_fu_330_VideoOut_TVALID;
    VideoOut_V_User_V_1_vld_out <= VideoOut_V_User_V_1_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state2_assign_proc : process(MetaIn_StreamId_ap_vld_preg, MetaIn_SourceTag_ap_vld_preg, MetaIn_Xsize_V_ap_vld_preg, MetaIn_Xoffs_V_ap_vld_preg, MetaIn_Ysize_V_ap_vld_preg, MetaIn_Yoffs_V_ap_vld_preg, MetaIn_DsizeL_V_ap_vld_preg, MetaIn_PixelF_ap_vld_preg, MetaIn_TapG_ap_vld_preg, MetaIn_Flags_ap_vld_preg, MetaIn_Timestamp_ap_vld_preg, MetaIn_PixProcessingFlgs_ap_vld_preg, MetaIn_ModPixelF_ap_vld_preg, MetaIn_Status_ap_vld_preg)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = MetaIn_Status_ap_vld_preg) or (ap_const_logic_0 = MetaIn_ModPixelF_ap_vld_preg) or (ap_const_logic_0 = MetaIn_PixProcessingFlgs_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Timestamp_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Flags_ap_vld_preg) or (ap_const_logic_0 = MetaIn_TapG_ap_vld_preg) or (ap_const_logic_0 = MetaIn_PixelF_ap_vld_preg) or (ap_const_logic_0 = MetaIn_DsizeL_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Yoffs_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Ysize_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Xoffs_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Xsize_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_SourceTag_ap_vld_preg) or (ap_const_logic_0 = MetaIn_StreamId_ap_vld_preg));
    end process;


    ap_block_state2_ignore_call28_assign_proc : process(MetaIn_StreamId_ap_vld_preg, MetaIn_SourceTag_ap_vld_preg, MetaIn_Xsize_V_ap_vld_preg, MetaIn_Xoffs_V_ap_vld_preg, MetaIn_Ysize_V_ap_vld_preg, MetaIn_Yoffs_V_ap_vld_preg, MetaIn_DsizeL_V_ap_vld_preg, MetaIn_PixelF_ap_vld_preg, MetaIn_TapG_ap_vld_preg, MetaIn_Flags_ap_vld_preg, MetaIn_Timestamp_ap_vld_preg, MetaIn_PixProcessingFlgs_ap_vld_preg, MetaIn_ModPixelF_ap_vld_preg, MetaIn_Status_ap_vld_preg)
    begin
                ap_block_state2_ignore_call28 <= ((ap_const_logic_0 = MetaIn_Status_ap_vld_preg) or (ap_const_logic_0 = MetaIn_ModPixelF_ap_vld_preg) or (ap_const_logic_0 = MetaIn_PixProcessingFlgs_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Timestamp_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Flags_ap_vld_preg) or (ap_const_logic_0 = MetaIn_TapG_ap_vld_preg) or (ap_const_logic_0 = MetaIn_PixelF_ap_vld_preg) or (ap_const_logic_0 = MetaIn_DsizeL_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Yoffs_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Ysize_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Xoffs_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_Xsize_V_ap_vld_preg) or (ap_const_logic_0 = MetaIn_SourceTag_ap_vld_preg) or (ap_const_logic_0 = MetaIn_StreamId_ap_vld_preg));
    end process;


    ap_block_state4_assign_proc : process(VideoOut_V_Data_V_1_ack_in, VideoOut_V_User_V_1_ack_in)
    begin
                ap_block_state4 <= ((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(VideoOut_V_Data_V_1_ack_in, VideoOut_V_Data_V_1_state, VideoOut_V_User_V_1_ack_in, VideoOut_V_User_V_1_state, ap_CS_fsm_state4)
    begin
        if ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (VideoOut_V_User_V_1_state(0) = ap_const_logic_0) and (VideoOut_V_Data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(VideoOut_V_Data_V_1_ack_in, VideoOut_V_Data_V_1_state, VideoOut_V_User_V_1_ack_in, VideoOut_V_User_V_1_state, ap_CS_fsm_state4)
    begin
        if ((not(((ap_const_logic_0 = VideoOut_V_User_V_1_ack_in) or (ap_const_logic_0 = VideoOut_V_Data_V_1_ack_in))) and (VideoOut_V_User_V_1_state(0) = ap_const_logic_0) and (VideoOut_V_Data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_pix_threshold_proc_fu_330_VideoIn_TVALID <= VideoIn_V_User_V_0_state(0);
    grp_pix_threshold_proc_fu_330_VideoOut_TREADY <= ((ap_CS_fsm_state3 and VideoOut_V_User_V_1_ack_in) or (ap_CS_fsm_state3 and VideoOut_V_Data_V_1_ack_in));
    grp_pix_threshold_proc_fu_330_ap_start <= grp_pix_threshold_proc_fu_330_ap_start_reg;
    guard_variable_for_m_1_load_fu_346_p1 <= guard_variable_for_m;
end behav;
