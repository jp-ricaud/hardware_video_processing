-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xFAverageGaussianMas is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_src_mat_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_mat_data_V_empty_n : IN STD_LOGIC;
    p_src_mat_data_V_read : OUT STD_LOGIC;
    p_out_mat_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_out_mat_data_V_full_n : IN STD_LOGIC;
    p_out_mat_data_V_write : OUT STD_LOGIC;
    img_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    img_height_empty_n : IN STD_LOGIC;
    img_height_read : OUT STD_LOGIC;
    img_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    img_width_empty_n : IN STD_LOGIC;
    img_width_read : OUT STD_LOGIC;
    img_height_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    img_height_out_full_n : IN STD_LOGIC;
    img_height_out_write : OUT STD_LOGIC;
    img_width_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    img_width_out_full_n : IN STD_LOGIC;
    img_width_out_write : OUT STD_LOGIC );
end;


architecture behav of xFAverageGaussianMas is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv13_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal p_src_mat_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln189_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln887_9_reg_1001 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_8_reg_967 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_out_mat_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal icmp_ln879_17_reg_1015 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_17_reg_1015_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal img_height_blk_n : STD_LOGIC;
    signal img_width_blk_n : STD_LOGIC;
    signal img_height_out_blk_n : STD_LOGIC;
    signal img_width_out_blk_n : STD_LOGIC;
    signal index_assign_reg_278 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_reg_290 : STD_LOGIC_VECTOR (12 downto 0);
    signal t_V_11_reg_326 : STD_LOGIC_VECTOR (12 downto 0);
    signal src_buf3_V_0_0_i_reg_338 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf2_0_V_reg_350 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf2_0_V_reg_350_pp1_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state11_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state15_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_state17_pp1_stage1_iter3 : BOOLEAN;
    signal ap_block_state19_pp1_stage1_iter4 : BOOLEAN;
    signal ap_block_state21_pp1_stage1_iter5 : BOOLEAN;
    signal ap_block_state23_pp1_stage1_iter6 : BOOLEAN;
    signal ap_block_state25_pp1_stage1_iter7 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal src_buf2_V_0_0_i_reg_362 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_0_V_reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_0_V_reg_375_pp1_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf1_0_V_reg_388 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf1_0_V_reg_388_pp1_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf1_V_0_0_i_reg_400 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_423 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op130_read_state12 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal img_height_read_reg_894 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal img_width_read_reg_900 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln189_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln544_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_435_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_index_new_reg_915 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_reg_920 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_455_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln200_reg_948 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln879_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln887_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_14_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_14_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_8_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_15_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_15_reg_971 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal and_ln879_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_fu_544_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_reg_986 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal select_ln879_14_fu_559_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_14_reg_991 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_16_fu_574_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_16_reg_996 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln887_9_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_9_reg_1001_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_9_reg_1001_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_9_reg_1001_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_9_reg_1001_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_9_reg_1001_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_9_reg_1001_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_9_reg_1001_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln544_5_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_5_reg_1005 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_5_reg_1005_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln879_17_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_17_reg_1015_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_17_reg_1015_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_17_reg_1015_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_17_reg_1015_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_17_reg_1015_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_17_reg_1015_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_606_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_4_reg_1019 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal buf_0_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_V_load_reg_1039 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal buf_1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_V_load_reg_1046 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_2_V_load_reg_1053 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf1_V_fu_634_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf1_V_reg_1060 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfExtractPixels_1_fu_413_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf1_2_V_reg_1065 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_2_V_xfExtractPixels_1_fu_418_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_2_V_reg_1071 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf2_2_V_reg_1077 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal grp_fu_665_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln51_reg_1122 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_671_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln55_reg_1127 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_689_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln54_reg_1132 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_699_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln56_2_reg_1137 : STD_LOGIC_VECTOR (8 downto 0);
    signal A2_1_fu_729_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal A2_1_reg_1162 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_711_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal A0_1_reg_1167 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_723_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln56_3_reg_1172 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln56_3_reg_1172_pp1_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_743_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln58_2_reg_1187 : STD_LOGIC_VECTOR (10 downto 0);
    signal op2_V_read_assign_3_reg_1202 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_787_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal A0_reg_1227 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_801_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln56_reg_1232 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_807_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_ind_V_reg_1237 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_813_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_V_reg_1243 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln879_16_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_16_reg_1268 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_826_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln56_1_reg_1273 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_847_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln58_reg_1278 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln256_fu_858_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln256_reg_1283 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal op2_V_read_assign_reg_1298 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp1_exit_iter3_state17 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal buf_0_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_0_V_ce0 : STD_LOGIC;
    signal buf_0_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_0_V_ce1 : STD_LOGIC;
    signal buf_0_V_we1 : STD_LOGIC;
    signal buf_0_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_1_V_ce0 : STD_LOGIC;
    signal buf_1_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_1_V_ce1 : STD_LOGIC;
    signal buf_1_V_we1 : STD_LOGIC;
    signal buf_1_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_2_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_2_V_ce0 : STD_LOGIC;
    signal buf_2_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal buf_2_V_ce1 : STD_LOGIC;
    signal buf_2_V_we1 : STD_LOGIC;
    signal buf_2_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfExtractPixels_1_fu_413_ap_ready : STD_LOGIC;
    signal grp_xfExtractPixels_1_fu_413_val1_V_read : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_2_V_xfExtractPixels_1_fu_418_ap_ready : STD_LOGIC;
    signal ap_phi_mux_index_assign_phi_fu_282_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_t_V_phi_fu_294_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal t_V_9_reg_302 : STD_LOGIC_VECTOR (12 downto 0);
    signal t_V_10_reg_314 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_t_V_11_phi_fu_330_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_src_buf3_V_0_0_i_phi_fu_342_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_phi_mux_src_buf2_V_0_0_i_phi_fu_366_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_src_buf1_V_0_0_i_phi_fu_404_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf0_V_fu_625_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf2_V_fu_642_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0396_0_i_fu_118 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_0390_0_i_fu_122 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_0386_0_i_fu_126 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal grp_fu_455_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln887_8_fu_461_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln887_fu_470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln879_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln879_fu_537_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln211_fu_516_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_13_fu_552_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln211_1_fu_523_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_15_fu_567_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln211_2_fu_530_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln887_9_fu_597_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_665_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_665_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_671_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_671_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_689_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_689_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_699_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_699_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_711_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_711_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_723_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_723_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_743_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_743_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal A1_1_fu_749_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_763_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_763_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_763_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_787_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_787_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_801_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_801_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_826_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_826_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A2_fu_832_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_847_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_847_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal A1_fu_864_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_878_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_878_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_878_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_435_ce : STD_LOGIC;
    signal grp_fu_446_ce : STD_LOGIC;
    signal grp_fu_606_ce : STD_LOGIC;
    signal grp_fu_665_ce : STD_LOGIC;
    signal grp_fu_671_ce : STD_LOGIC;
    signal grp_fu_689_ce : STD_LOGIC;
    signal grp_fu_699_ce : STD_LOGIC;
    signal grp_fu_711_ce : STD_LOGIC;
    signal grp_fu_723_ce : STD_LOGIC;
    signal grp_fu_743_ce : STD_LOGIC;
    signal grp_fu_763_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_606 : BOOLEAN;
    signal ap_condition_608 : BOOLEAN;

    component xfExtractPixels_1 IS
    port (
        ap_ready : OUT STD_LOGIC;
        val1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ip_accel_app_add_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component ip_accel_app_add_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component ip_accel_app_add_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component ip_accel_app_mux_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ip_accel_app_add_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component ip_accel_app_add_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component ip_accel_app_add_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component ip_accel_app_add_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component xFAverageGaussiancud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buf_0_V_U : component xFAverageGaussiancud
    generic map (
        DataWidth => 8,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_0_V_address0,
        ce0 => buf_0_V_ce0,
        q0 => buf_0_V_q0,
        address1 => buf_0_V_address1,
        ce1 => buf_0_V_ce1,
        we1 => buf_0_V_we1,
        d1 => buf_0_V_d1);

    buf_1_V_U : component xFAverageGaussiancud
    generic map (
        DataWidth => 8,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_1_V_address0,
        ce0 => buf_1_V_ce0,
        q0 => buf_1_V_q0,
        address1 => buf_1_V_address1,
        ce1 => buf_1_V_ce1,
        we1 => buf_1_V_we1,
        d1 => buf_1_V_d1);

    buf_2_V_U : component xFAverageGaussiancud
    generic map (
        DataWidth => 8,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_2_V_address0,
        ce0 => buf_2_V_ce0,
        q0 => buf_2_V_q0,
        address1 => buf_2_V_address1,
        ce1 => buf_2_V_ce1,
        we1 => buf_2_V_we1,
        d1 => buf_2_V_d1);

    grp_xfExtractPixels_1_fu_413 : component xfExtractPixels_1
    port map (
        ap_ready => grp_xfExtractPixels_1_fu_413_ap_ready,
        val1_V_read => grp_xfExtractPixels_1_fu_413_val1_V_read,
        ap_return => grp_xfExtractPixels_1_fu_413_ap_return);

    src_buf3_2_V_xfExtractPixels_1_fu_418 : component xfExtractPixels_1
    port map (
        ap_ready => src_buf3_2_V_xfExtractPixels_1_fu_418_ap_ready,
        val1_V_read => buf2_V_fu_642_p5,
        ap_return => src_buf3_2_V_xfExtractPixels_1_fu_418_ap_return);

    ip_accel_app_add_fYi_U79 : component ip_accel_app_add_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_index_assign_phi_fu_282_p4,
        din1 => ap_const_lv16_1,
        ce => grp_fu_435_ce,
        dout => grp_fu_435_p2);

    ip_accel_app_add_g8j_U80 : component ip_accel_app_add_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_t_V_phi_fu_294_p4,
        din1 => ap_const_lv13_1,
        ce => grp_fu_446_ce,
        dout => grp_fu_446_p2);

    ip_accel_app_add_hbi_U81 : component ip_accel_app_add_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_455_p0,
        din1 => ap_const_lv17_1,
        ce => ap_const_logic_1,
        dout => grp_fu_455_p2);

    ip_accel_app_add_g8j_U82 : component ip_accel_app_add_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_t_V_11_phi_fu_330_p4,
        din1 => ap_const_lv13_1,
        ce => grp_fu_606_ce,
        dout => grp_fu_606_p2);

    ip_accel_app_mux_ibs_U83 : component ip_accel_app_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_0_V_load_reg_1039,
        din1 => buf_1_V_load_reg_1046,
        din2 => buf_2_V_load_reg_1053,
        din3 => select_ln879_reg_986,
        dout => buf0_V_fu_625_p5);

    ip_accel_app_mux_ibs_U84 : component ip_accel_app_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_0_V_load_reg_1039,
        din1 => buf_1_V_load_reg_1046,
        din2 => buf_2_V_load_reg_1053,
        din3 => select_ln879_14_reg_991,
        dout => buf1_V_fu_634_p5);

    ip_accel_app_mux_ibs_U85 : component ip_accel_app_mux_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_0_V_load_reg_1039,
        din1 => buf_1_V_load_reg_1046,
        din2 => buf_2_V_load_reg_1053,
        din3 => select_ln879_16_reg_996,
        dout => buf2_V_fu_642_p5);

    ip_accel_app_add_jbC_U86 : component ip_accel_app_add_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_665_p0,
        din1 => grp_fu_665_p1,
        ce => grp_fu_665_ce,
        dout => grp_fu_665_p2);

    ip_accel_app_add_jbC_U87 : component ip_accel_app_add_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_671_p0,
        din1 => grp_fu_671_p1,
        ce => grp_fu_671_ce,
        dout => grp_fu_671_p2);

    ip_accel_app_add_jbC_U88 : component ip_accel_app_add_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_689_p0,
        din1 => grp_fu_689_p1,
        ce => grp_fu_689_ce,
        dout => grp_fu_689_p2);

    ip_accel_app_add_jbC_U89 : component ip_accel_app_add_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_699_p0,
        din1 => grp_fu_699_p1,
        ce => grp_fu_699_ce,
        dout => grp_fu_699_p2);

    ip_accel_app_add_kbM_U90 : component ip_accel_app_add_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_711_p0,
        din1 => grp_fu_711_p1,
        ce => grp_fu_711_ce,
        dout => grp_fu_711_p2);

    ip_accel_app_add_kbM_U91 : component ip_accel_app_add_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_723_p0,
        din1 => grp_fu_723_p1,
        ce => grp_fu_723_ce,
        dout => grp_fu_723_p2);

    ip_accel_app_add_lbW_U92 : component ip_accel_app_add_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_743_p0,
        din1 => grp_fu_743_p1,
        ce => grp_fu_743_ce,
        dout => grp_fu_743_p2);

    ip_accel_app_add_mb6_U93 : component ip_accel_app_add_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_763_p0,
        din1 => grp_fu_763_p1,
        ce => grp_fu_763_ce,
        dout => grp_fu_763_p2);

    ip_accel_app_add_jbC_U94 : component ip_accel_app_add_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_787_p0,
        din1 => grp_fu_787_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_787_p2);

    ip_accel_app_add_jbC_U95 : component ip_accel_app_add_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_801_p0,
        din1 => grp_fu_801_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_801_p2);

    ip_accel_app_add_g8j_U96 : component ip_accel_app_add_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t_V_9_reg_302,
        din1 => ap_const_lv13_1,
        ce => ap_const_logic_1,
        dout => grp_fu_807_p2);

    ip_accel_app_add_g8j_U97 : component ip_accel_app_add_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t_V_10_reg_314,
        din1 => ap_const_lv13_1,
        ce => ap_const_logic_1,
        dout => grp_fu_813_p2);

    ip_accel_app_add_kbM_U98 : component ip_accel_app_add_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_826_p0,
        din1 => grp_fu_826_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_826_p2);

    ip_accel_app_add_lbW_U99 : component ip_accel_app_add_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_847_p0,
        din1 => grp_fu_847_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_847_p2);

    ip_accel_app_add_mb6_U100 : component ip_accel_app_add_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_878_p0,
        din1 => grp_fu_878_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_878_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln887_fu_465_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (img_width_out_full_n = ap_const_logic_0) or (img_height_out_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (img_width_out_full_n = ap_const_logic_0) or (img_height_out_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln887_9_reg_1001 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter3_state17)) then 
                        ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter2;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    index_assign_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln189_reg_906 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                index_assign_reg_278 <= in_index_new_reg_915;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (img_width_out_full_n = ap_const_logic_0) or (img_height_out_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                index_assign_reg_278 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    src_buf1_0_V_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter4_reg = ap_const_lv1_1))) then 
                src_buf1_0_V_reg_388 <= src_buf1_2_V_reg_1065;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                src_buf1_0_V_reg_388 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf1_V_0_0_i_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_9_reg_1001_pp1_iter4_reg = ap_const_lv1_1))) then 
                src_buf1_V_0_0_i_reg_400 <= src_buf1_0_V_reg_388_pp1_iter4_reg;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                src_buf1_V_0_0_i_reg_400 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf2_0_V_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter4_reg = ap_const_lv1_1))) then 
                src_buf2_0_V_reg_350 <= src_buf2_2_V_reg_1077;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                src_buf2_0_V_reg_350 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf2_V_0_0_i_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_9_reg_1001_pp1_iter4_reg = ap_const_lv1_1))) then 
                src_buf2_V_0_0_i_reg_362 <= src_buf2_0_V_reg_350_pp1_iter4_reg;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                src_buf2_V_0_0_i_reg_362 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf3_0_V_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter4_reg = ap_const_lv1_1))) then 
                src_buf3_0_V_reg_375 <= src_buf3_2_V_reg_1071;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                src_buf3_0_V_reg_375 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf3_V_0_0_i_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_9_reg_1001_pp1_iter4_reg = ap_const_lv1_1))) then 
                src_buf3_V_0_0_i_reg_338 <= src_buf3_0_V_reg_375_pp1_iter4_reg;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                src_buf3_V_0_0_i_reg_338 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    t_V_10_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_out_mat_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                t_V_10_reg_314 <= row_V_reg_1243;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_10_reg_314 <= ap_const_lv13_1;
            end if; 
        end if;
    end process;

    t_V_11_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln887_9_reg_1001 = ap_const_lv1_1))) then 
                t_V_11_reg_326 <= col_V_4_reg_1019;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                t_V_11_reg_326 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    t_V_9_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_out_mat_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                t_V_9_reg_302 <= select_ln256_reg_1283;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_9_reg_302 <= ap_const_lv13_2;
            end if; 
        end if;
    end process;

    t_V_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln189_reg_906 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_reg_290 <= col_V_reg_920;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (img_width_out_full_n = ap_const_logic_0) or (img_height_out_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_290 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter5_reg = ap_const_lv1_1))) then
                A0_1_reg_1167 <= grp_fu_711_p2;
                add_ln56_3_reg_1172 <= grp_fu_723_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                A0_reg_1227 <= grp_fu_787_p2;
                add_ln56_reg_1232 <= grp_fu_801_p2;
                row_V_reg_1243 <= grp_fu_813_p2;
                row_ind_V_reg_1237 <= grp_fu_807_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_9_reg_1001_pp1_iter4_reg = ap_const_lv1_1))) then
                    A2_1_reg_1162(9 downto 2) <= A2_1_fu_729_p3(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln200_reg_948 <= grp_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter4_reg = ap_const_lv1_1))) then
                add_ln51_reg_1122 <= grp_fu_665_p2;
                add_ln54_reg_1132 <= grp_fu_689_p2;
                add_ln55_reg_1127 <= grp_fu_671_p2;
                add_ln56_2_reg_1137 <= grp_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                add_ln56_1_reg_1273 <= grp_fu_826_p2;
                add_ln58_reg_1278 <= grp_fu_847_p2;
                select_ln256_reg_1283 <= select_ln256_fu_858_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                add_ln56_3_reg_1172_pp1_iter6_reg <= add_ln56_3_reg_1172;
                src_buf1_0_V_reg_388_pp1_iter4_reg <= src_buf1_0_V_reg_388;
                src_buf2_0_V_reg_350_pp1_iter4_reg <= src_buf2_0_V_reg_350;
                src_buf3_0_V_reg_375_pp1_iter4_reg <= src_buf3_0_V_reg_375;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter6_reg = ap_const_lv1_1))) then
                add_ln58_2_reg_1187 <= grp_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                and_ln879_reg_978 <= and_ln879_fu_502_p2;
                icmp_ln879_15_reg_971 <= icmp_ln879_15_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter3_reg = ap_const_lv1_1))) then
                buf1_V_reg_1060 <= buf1_V_fu_634_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln887_9_reg_1001_pp1_iter2_reg = ap_const_lv1_1))) then
                buf_0_V_load_reg_1039 <= buf_0_V_q0;
                buf_1_V_load_reg_1046 <= buf_1_V_q0;
                buf_2_V_load_reg_1053 <= buf_2_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                col_V_4_reg_1019 <= grp_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln189_reg_906 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                col_V_reg_920 <= grp_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln189_reg_906 <= icmp_ln189_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln887_fu_465_p2 = ap_const_lv1_1))) then
                icmp_ln879_14_reg_962 <= icmp_ln879_14_fu_480_p2;
                icmp_ln879_reg_956 <= icmp_ln879_fu_474_p2;
                icmp_ln887_8_reg_967 <= icmp_ln887_8_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                icmp_ln879_16_reg_1268 <= icmp_ln879_16_fu_853_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_9_fu_601_p2 = ap_const_lv1_1))) then
                icmp_ln879_17_reg_1015 <= icmp_ln879_17_fu_619_p2;
                    zext_ln544_5_reg_1005(12 downto 0) <= zext_ln544_5_fu_612_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln879_17_reg_1015_pp1_iter1_reg <= icmp_ln879_17_reg_1015;
                icmp_ln879_17_reg_1015_pp1_iter2_reg <= icmp_ln879_17_reg_1015_pp1_iter1_reg;
                icmp_ln879_17_reg_1015_pp1_iter3_reg <= icmp_ln879_17_reg_1015_pp1_iter2_reg;
                icmp_ln879_17_reg_1015_pp1_iter4_reg <= icmp_ln879_17_reg_1015_pp1_iter3_reg;
                icmp_ln879_17_reg_1015_pp1_iter5_reg <= icmp_ln879_17_reg_1015_pp1_iter4_reg;
                icmp_ln879_17_reg_1015_pp1_iter6_reg <= icmp_ln879_17_reg_1015_pp1_iter5_reg;
                icmp_ln879_17_reg_1015_pp1_iter7_reg <= icmp_ln879_17_reg_1015_pp1_iter6_reg;
                icmp_ln887_9_reg_1001 <= icmp_ln887_9_fu_601_p2;
                icmp_ln887_9_reg_1001_pp1_iter1_reg <= icmp_ln887_9_reg_1001;
                icmp_ln887_9_reg_1001_pp1_iter2_reg <= icmp_ln887_9_reg_1001_pp1_iter1_reg;
                icmp_ln887_9_reg_1001_pp1_iter3_reg <= icmp_ln887_9_reg_1001_pp1_iter2_reg;
                icmp_ln887_9_reg_1001_pp1_iter4_reg <= icmp_ln887_9_reg_1001_pp1_iter3_reg;
                icmp_ln887_9_reg_1001_pp1_iter5_reg <= icmp_ln887_9_reg_1001_pp1_iter4_reg;
                icmp_ln887_9_reg_1001_pp1_iter6_reg <= icmp_ln887_9_reg_1001_pp1_iter5_reg;
                icmp_ln887_9_reg_1001_pp1_iter7_reg <= icmp_ln887_9_reg_1001_pp1_iter6_reg;
                    zext_ln544_5_reg_1005_pp1_iter1_reg(12 downto 0) <= zext_ln544_5_reg_1005(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (img_width_out_full_n = ap_const_logic_0) or (img_height_out_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_height_read_reg_894 <= img_height_dout;
                img_width_read_reg_900 <= img_width_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                in_index_new_reg_915 <= grp_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter7_reg = ap_const_lv1_1))) then
                op2_V_read_assign_3_reg_1202 <= grp_fu_763_p2(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                op2_V_read_assign_reg_1298 <= grp_fu_878_p2(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_0386_0_i_fu_126 <= select_ln879_fu_544_p3;
                p_0390_0_i_fu_122 <= select_ln879_14_fu_559_p3;
                p_0396_0_i_fu_118 <= select_ln879_16_fu_574_p3;
                select_ln879_14_reg_991 <= select_ln879_14_fu_559_p3;
                select_ln879_16_reg_996 <= select_ln879_16_fu_574_p3;
                select_ln879_reg_986 <= select_ln879_fu_544_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_predicate_op130_read_state12 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((icmp_ln189_reg_906 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_423 <= p_src_mat_data_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter3_reg = ap_const_lv1_1))) then
                src_buf1_2_V_reg_1065 <= grp_xfExtractPixels_1_fu_413_ap_return;
                src_buf3_2_V_reg_1071 <= src_buf3_2_V_xfExtractPixels_1_fu_418_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln887_9_reg_1001_pp1_iter3_reg = ap_const_lv1_1))) then
                src_buf2_2_V_reg_1077 <= grp_xfExtractPixels_1_fu_413_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln189_fu_430_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln544_reg_910(12 downto 0) <= zext_ln544_fu_441_p1(12 downto 0);
            end if;
        end if;
    end process;
    zext_ln544_reg_910(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln544_5_reg_1005(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln544_5_reg_1005_pp1_iter1_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    A2_1_reg_1162(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_out_mat_data_V_full_n, img_height_empty_n, img_width_empty_n, img_height_out_full_n, img_width_out_full_n, ap_enable_reg_pp0_iter0, icmp_ln189_reg_906, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter8, ap_CS_fsm_state33, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state7, icmp_ln887_fu_465_p2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_block_pp0_stage1_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter7, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (img_width_out_full_n = ap_const_logic_0) or (img_height_out_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((icmp_ln189_reg_906 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln189_reg_906 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln887_fu_465_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((p_out_mat_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A1_1_fu_749_p3 <= (add_ln56_3_reg_1172_pp1_iter6_reg & ap_const_lv1_0);
    A1_fu_864_p3 <= (add_ln56_1_reg_1273 & ap_const_lv1_0);
    A2_1_fu_729_p3 <= (src_buf2_0_V_reg_350_pp1_iter4_reg & ap_const_lv2_0);
    A2_fu_832_p3 <= (src_buf2_0_V_reg_350 & ap_const_lv2_0);
    and_ln879_fu_502_p2 <= (xor_ln879_fu_497_p2 and icmp_ln879_14_reg_962);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state27 <= ap_CS_fsm(10);
    ap_CS_fsm_state28 <= ap_CS_fsm(11);
    ap_CS_fsm_state29 <= ap_CS_fsm(12);
    ap_CS_fsm_state30 <= ap_CS_fsm(13);
    ap_CS_fsm_state31 <= ap_CS_fsm(14);
    ap_CS_fsm_state32 <= ap_CS_fsm(15);
    ap_CS_fsm_state33 <= ap_CS_fsm(16);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(p_src_mat_data_V_empty_n, ap_enable_reg_pp0_iter0, icmp_ln189_reg_906)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln189_reg_906 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(p_src_mat_data_V_empty_n, ap_enable_reg_pp0_iter0, icmp_ln189_reg_906)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln189_reg_906 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(p_src_mat_data_V_empty_n, p_out_mat_data_V_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, icmp_ln879_17_reg_1015_pp1_iter7_reg, ap_predicate_op130_read_state12)
    begin
                ap_block_pp1_stage0_01001 <= (((icmp_ln879_17_reg_1015_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1)) or ((p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op130_read_state12 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(p_src_mat_data_V_empty_n, p_out_mat_data_V_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, icmp_ln879_17_reg_1015_pp1_iter7_reg, ap_predicate_op130_read_state12)
    begin
                ap_block_pp1_stage0_11001 <= (((icmp_ln879_17_reg_1015_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1)) or ((p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op130_read_state12 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(p_src_mat_data_V_empty_n, p_out_mat_data_V_full_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, icmp_ln879_17_reg_1015_pp1_iter7_reg, ap_predicate_op130_read_state12)
    begin
                ap_block_pp1_stage0_subdone <= (((icmp_ln879_17_reg_1015_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat_data_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1)) or ((p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op130_read_state12 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, img_height_empty_n, img_width_empty_n, img_height_out_full_n, img_width_out_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (img_width_out_full_n = ap_const_logic_0) or (img_height_out_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp1_stage0_iter1_assign_proc : process(p_src_mat_data_V_empty_n, ap_predicate_op130_read_state12)
    begin
                ap_block_state12_pp1_stage0_iter1 <= ((p_src_mat_data_V_empty_n = ap_const_logic_0) and (ap_predicate_op130_read_state12 = ap_const_boolean_1));
    end process;

        ap_block_state13_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_pp1_stage0_iter8_assign_proc : process(p_out_mat_data_V_full_n, icmp_ln879_17_reg_1015_pp1_iter7_reg)
    begin
                ap_block_state26_pp1_stage0_iter8 <= ((icmp_ln879_17_reg_1015_pp1_iter7_reg = ap_const_lv1_0) and (p_out_mat_data_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(p_src_mat_data_V_empty_n, icmp_ln189_reg_906)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln189_reg_906 = ap_const_lv1_0) and (p_src_mat_data_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_606_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter3, ap_block_pp1_stage1)
    begin
                ap_condition_606 <= ((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1));
    end process;


    ap_condition_608_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter4)
    begin
                ap_condition_608 <= ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln189_reg_906)
    begin
        if ((icmp_ln189_reg_906 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter3_state17_assign_proc : process(ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            ap_condition_pp1_exit_iter3_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter3_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7, icmp_ln887_fu_465_p2)
    begin
        if (((icmp_ln887_fu_465_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7)
    begin
        if (((ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_index_assign_phi_fu_282_p4_assign_proc : process(icmp_ln189_reg_906, index_assign_reg_278, ap_CS_fsm_pp0_stage0, in_index_new_reg_915, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln189_reg_906 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_index_assign_phi_fu_282_p4 <= in_index_new_reg_915;
        else 
            ap_phi_mux_index_assign_phi_fu_282_p4 <= index_assign_reg_278;
        end if; 
    end process;


    ap_phi_mux_src_buf1_V_0_0_i_phi_fu_404_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, src_buf1_0_V_reg_388_pp1_iter4_reg, src_buf1_V_0_0_i_reg_400, icmp_ln887_9_reg_1001_pp1_iter4_reg, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_9_reg_1001_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_src_buf1_V_0_0_i_phi_fu_404_p4 <= src_buf1_0_V_reg_388_pp1_iter4_reg;
        else 
            ap_phi_mux_src_buf1_V_0_0_i_phi_fu_404_p4 <= src_buf1_V_0_0_i_reg_400;
        end if; 
    end process;


    ap_phi_mux_src_buf2_V_0_0_i_phi_fu_366_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, src_buf2_0_V_reg_350_pp1_iter4_reg, src_buf2_V_0_0_i_reg_362, icmp_ln887_9_reg_1001_pp1_iter4_reg, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_9_reg_1001_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_src_buf2_V_0_0_i_phi_fu_366_p4 <= src_buf2_0_V_reg_350_pp1_iter4_reg;
        else 
            ap_phi_mux_src_buf2_V_0_0_i_phi_fu_366_p4 <= src_buf2_V_0_0_i_reg_362;
        end if; 
    end process;


    ap_phi_mux_src_buf3_V_0_0_i_phi_fu_342_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, src_buf3_V_0_0_i_reg_338, src_buf3_0_V_reg_375_pp1_iter4_reg, icmp_ln887_9_reg_1001_pp1_iter4_reg, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_9_reg_1001_pp1_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_src_buf3_V_0_0_i_phi_fu_342_p4 <= src_buf3_0_V_reg_375_pp1_iter4_reg;
        else 
            ap_phi_mux_src_buf3_V_0_0_i_phi_fu_342_p4 <= src_buf3_V_0_0_i_reg_338;
        end if; 
    end process;


    ap_phi_mux_t_V_11_phi_fu_330_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln887_9_reg_1001, t_V_11_reg_326, col_V_4_reg_1019)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln887_9_reg_1001 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_t_V_11_phi_fu_330_p4 <= col_V_4_reg_1019;
        else 
            ap_phi_mux_t_V_11_phi_fu_330_p4 <= t_V_11_reg_326;
        end if; 
    end process;


    ap_phi_mux_t_V_phi_fu_294_p4_assign_proc : process(icmp_ln189_reg_906, t_V_reg_290, ap_CS_fsm_pp0_stage0, col_V_reg_920, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln189_reg_906 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_t_V_phi_fu_294_p4 <= col_V_reg_920;
        else 
            ap_phi_mux_t_V_phi_fu_294_p4 <= t_V_reg_290;
        end if; 
    end process;


    ap_predicate_op130_read_state12_assign_proc : process(icmp_ln887_9_reg_1001, icmp_ln887_8_reg_967)
    begin
                ap_predicate_op130_read_state12 <= ((icmp_ln887_8_reg_967 = ap_const_lv1_1) and (icmp_ln887_9_reg_1001 = ap_const_lv1_1));
    end process;

    ap_ready <= internal_ap_ready;
    buf_0_V_address0 <= zext_ln544_5_reg_1005_pp1_iter1_reg(12 - 1 downto 0);

    buf_0_V_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp0_stage0, zext_ln544_fu_441_p1, zext_ln544_5_fu_612_p1, zext_ln544_5_reg_1005_pp1_iter1_reg, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            buf_0_V_address1 <= zext_ln544_5_reg_1005_pp1_iter1_reg(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            buf_0_V_address1 <= zext_ln544_5_fu_612_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_0_V_address1 <= zext_ln544_fu_441_p1(12 - 1 downto 0);
        else 
            buf_0_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf_0_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            buf_0_V_ce0 <= ap_const_logic_1;
        else 
            buf_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            buf_0_V_ce1 <= ap_const_logic_1;
        else 
            buf_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_V_d1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage1, reg_423, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            buf_0_V_d1 <= reg_423;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_0_V_d1 <= ap_const_lv8_0;
        else 
            buf_0_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_0_V_we1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln887_8_reg_967, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001, icmp_ln189_fu_430_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln879_16_reg_996, icmp_ln887_9_fu_601_p2, icmp_ln887_9_reg_1001_pp1_iter1_reg, ap_enable_reg_pp1_iter0)
    begin
        if ((((icmp_ln887_8_reg_967 = ap_const_lv1_0) and (select_ln879_16_reg_996 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln887_9_fu_601_p2 = ap_const_lv1_1)) or ((icmp_ln189_fu_430_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((select_ln879_16_reg_996 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter1_reg = ap_const_lv1_1) and (icmp_ln887_8_reg_967 = ap_const_lv1_1)))) then 
            buf_0_V_we1 <= ap_const_logic_1;
        else 
            buf_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_V_address0 <= zext_ln544_5_reg_1005_pp1_iter1_reg(12 - 1 downto 0);

    buf_1_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp0_stage0, zext_ln544_reg_910, zext_ln544_5_fu_612_p1, zext_ln544_5_reg_1005_pp1_iter1_reg, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            buf_1_V_address1 <= zext_ln544_5_reg_1005_pp1_iter1_reg(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            buf_1_V_address1 <= zext_ln544_5_fu_612_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_1_V_address1 <= zext_ln544_reg_910(12 - 1 downto 0);
        else 
            buf_1_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf_1_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            buf_1_V_ce0 <= ap_const_logic_1;
        else 
            buf_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            buf_1_V_ce1 <= ap_const_logic_1;
        else 
            buf_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_V_d1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage1, reg_423, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            buf_1_V_d1 <= ap_const_lv8_0;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            buf_1_V_d1 <= reg_423;
        else 
            buf_1_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_1_V_we1_assign_proc : process(icmp_ln189_reg_906, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln887_8_reg_967, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln879_16_reg_996, icmp_ln887_9_fu_601_p2, icmp_ln887_9_reg_1001_pp1_iter1_reg, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1)
    begin
        if ((((icmp_ln887_8_reg_967 = ap_const_lv1_0) and (select_ln879_16_reg_996 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln887_9_fu_601_p2 = ap_const_lv1_1)) or ((icmp_ln189_reg_906 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((select_ln879_16_reg_996 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter1_reg = ap_const_lv1_1) and (icmp_ln887_8_reg_967 = ap_const_lv1_1)))) then 
            buf_1_V_we1 <= ap_const_logic_1;
        else 
            buf_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_V_address0 <= zext_ln544_5_reg_1005_pp1_iter1_reg(12 - 1 downto 0);

    buf_2_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage1, zext_ln544_5_fu_612_p1, zext_ln544_5_reg_1005_pp1_iter1_reg, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            buf_2_V_address1 <= zext_ln544_5_reg_1005_pp1_iter1_reg(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            buf_2_V_address1 <= zext_ln544_5_fu_612_p1(12 - 1 downto 0);
        else 
            buf_2_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buf_2_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            buf_2_V_ce0 <= ap_const_logic_1;
        else 
            buf_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            buf_2_V_ce1 <= ap_const_logic_1;
        else 
            buf_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_V_d1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage1, reg_423, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            buf_2_V_d1 <= reg_423;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            buf_2_V_d1 <= ap_const_lv8_0;
        else 
            buf_2_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_2_V_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln887_8_reg_967, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001, select_ln879_16_reg_996, icmp_ln887_9_fu_601_p2, icmp_ln887_9_reg_1001_pp1_iter1_reg, ap_enable_reg_pp1_iter0)
    begin
        if (((not((select_ln879_16_reg_996 = ap_const_lv2_1)) and not((select_ln879_16_reg_996 = ap_const_lv2_0)) and (icmp_ln887_8_reg_967 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln887_9_fu_601_p2 = ap_const_lv1_1)) or (not((select_ln879_16_reg_996 = ap_const_lv2_1)) and not((select_ln879_16_reg_996 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln887_9_reg_1001_pp1_iter1_reg = ap_const_lv1_1) and (icmp_ln887_8_reg_967 = ap_const_lv1_1)))) then 
            buf_2_V_we1 <= ap_const_logic_1;
        else 
            buf_2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_435_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_435_ce <= ap_const_logic_1;
        else 
            grp_fu_435_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_446_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_446_ce <= ap_const_logic_1;
        else 
            grp_fu_446_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_455_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_height_read_reg_894),17));

    grp_fu_606_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            grp_fu_606_ce <= ap_const_logic_1;
        else 
            grp_fu_606_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_665_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            grp_fu_665_ce <= ap_const_logic_1;
        else 
            grp_fu_665_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_665_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_src_buf1_V_0_0_i_phi_fu_404_p4),9));
    grp_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf1_2_V_reg_1065),9));

    grp_fu_671_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            grp_fu_671_ce <= ap_const_logic_1;
        else 
            grp_fu_671_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_671_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf3_2_V_reg_1071),9));
    grp_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_src_buf3_V_0_0_i_phi_fu_342_p4),9));

    grp_fu_689_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            grp_fu_689_ce <= ap_const_logic_1;
        else 
            grp_fu_689_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_689_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_src_buf2_V_0_0_i_phi_fu_366_p4),9));
    grp_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf1_0_V_reg_388),9));

    grp_fu_699_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            grp_fu_699_ce <= ap_const_logic_1;
        else 
            grp_fu_699_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_699_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf3_0_V_reg_375),9));
    grp_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_xfExtractPixels_1_fu_413_ap_return),9));

    grp_fu_711_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            grp_fu_711_ce <= ap_const_logic_1;
        else 
            grp_fu_711_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_711_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_reg_1122),10));
    grp_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_reg_1127),10));

    grp_fu_723_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            grp_fu_723_ce <= ap_const_logic_1;
        else 
            grp_fu_723_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_723_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_reg_1132),10));
    grp_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln56_2_reg_1137),10));

    grp_fu_743_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            grp_fu_743_ce <= ap_const_logic_1;
        else 
            grp_fu_743_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_743_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A0_1_reg_1167),11));
    grp_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A2_1_reg_1162),11));

    grp_fu_763_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            grp_fu_763_ce <= ap_const_logic_1;
        else 
            grp_fu_763_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_763_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A1_1_fu_749_p3),12));
    grp_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_2_reg_1187),12));
    grp_fu_787_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf3_V_0_0_i_reg_338),9));
    grp_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf1_V_0_0_i_reg_400),9));
    grp_fu_801_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf1_0_V_reg_388),9));
    grp_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf2_V_0_0_i_reg_362),9));
    grp_fu_826_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_buf3_0_V_reg_375),10));
    grp_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln56_reg_1232),10));
    grp_fu_847_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A0_reg_1227),11));
    grp_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A2_fu_832_p3),11));
    grp_fu_878_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_reg_1278),12));
    grp_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A1_fu_864_p3),12));

    grp_xfExtractPixels_1_fu_413_val1_V_read_assign_proc : process(icmp_ln887_9_reg_1001_pp1_iter3_reg, buf1_V_reg_1060, buf0_V_fu_625_p5, ap_condition_606, ap_condition_608)
    begin
        if ((icmp_ln887_9_reg_1001_pp1_iter3_reg = ap_const_lv1_1)) then
            if ((ap_const_boolean_1 = ap_condition_608)) then 
                grp_xfExtractPixels_1_fu_413_val1_V_read <= buf1_V_reg_1060;
            elsif ((ap_const_boolean_1 = ap_condition_606)) then 
                grp_xfExtractPixels_1_fu_413_val1_V_read <= buf0_V_fu_625_p5;
            else 
                grp_xfExtractPixels_1_fu_413_val1_V_read <= "XXXXXXXX";
            end if;
        else 
            grp_xfExtractPixels_1_fu_413_val1_V_read <= "XXXXXXXX";
        end if; 
    end process;

    icmp_ln189_fu_430_p2 <= "1" when (ap_phi_mux_index_assign_phi_fu_282_p4 = img_width_read_reg_900) else "0";
    icmp_ln879_14_fu_480_p2 <= "1" when (t_V_9_reg_302 = ap_const_lv13_0) else "0";
    icmp_ln879_15_fu_491_p2 <= "1" when (t_V_9_reg_302 = ap_const_lv13_1) else "0";
    icmp_ln879_16_fu_853_p2 <= "1" when (row_ind_V_reg_1237 = ap_const_lv13_3) else "0";
    icmp_ln879_17_fu_619_p2 <= "1" when (ap_phi_mux_t_V_11_phi_fu_330_p4 = ap_const_lv13_0) else "0";
    icmp_ln879_fu_474_p2 <= "1" when (t_V_9_reg_302 = ap_const_lv13_2) else "0";
    icmp_ln887_8_fu_486_p2 <= "1" when (unsigned(zext_ln887_fu_470_p1) < unsigned(img_height_read_reg_894)) else "0";
    icmp_ln887_9_fu_601_p2 <= "1" when (unsigned(zext_ln887_9_fu_597_p1) < unsigned(img_width_read_reg_900)) else "0";
    icmp_ln887_fu_465_p2 <= "1" when (unsigned(zext_ln887_8_fu_461_p1) < unsigned(add_ln200_reg_948)) else "0";

    img_height_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_height_blk_n <= img_height_empty_n;
        else 
            img_height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_height_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_height_out_blk_n <= img_height_out_full_n;
        else 
            img_height_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_height_out_din <= img_height_dout;

    img_height_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_empty_n, img_width_empty_n, img_height_out_full_n, img_width_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (img_width_out_full_n = ap_const_logic_0) or (img_height_out_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_height_out_write <= ap_const_logic_1;
        else 
            img_height_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_height_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_empty_n, img_width_empty_n, img_height_out_full_n, img_width_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (img_width_out_full_n = ap_const_logic_0) or (img_height_out_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_height_read <= ap_const_logic_1;
        else 
            img_height_read <= ap_const_logic_0;
        end if; 
    end process;


    img_width_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_width_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_width_blk_n <= img_width_empty_n;
        else 
            img_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_width_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_width_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_width_out_blk_n <= img_width_out_full_n;
        else 
            img_width_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_width_out_din <= img_width_dout;

    img_width_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_empty_n, img_width_empty_n, img_height_out_full_n, img_width_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (img_width_out_full_n = ap_const_logic_0) or (img_height_out_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_width_out_write <= ap_const_logic_1;
        else 
            img_width_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_width_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_height_empty_n, img_width_empty_n, img_height_out_full_n, img_width_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (img_width_out_full_n = ap_const_logic_0) or (img_height_out_full_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (img_height_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_width_read <= ap_const_logic_1;
        else 
            img_width_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln887_fu_465_p2)
    begin
        if (((icmp_ln887_fu_465_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    or_ln879_fu_540_p2 <= (icmp_ln879_reg_956 or and_ln879_reg_978);

    p_out_mat_data_V_blk_n_assign_proc : process(p_out_mat_data_V_full_n, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter8, icmp_ln879_17_reg_1015_pp1_iter7_reg, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((icmp_ln879_17_reg_1015_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            p_out_mat_data_V_blk_n <= p_out_mat_data_V_full_n;
        else 
            p_out_mat_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_out_mat_data_V_din_assign_proc : process(p_out_mat_data_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter8, icmp_ln879_17_reg_1015_pp1_iter7_reg, ap_CS_fsm_state33, op2_V_read_assign_3_reg_1202, op2_V_read_assign_reg_1298, ap_block_pp1_stage0_01001)
    begin
        if (((p_out_mat_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            p_out_mat_data_V_din <= op2_V_read_assign_reg_1298;
        elsif (((icmp_ln879_17_reg_1015_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1))) then 
            p_out_mat_data_V_din <= op2_V_read_assign_3_reg_1202;
        else 
            p_out_mat_data_V_din <= "XXXXXXXX";
        end if; 
    end process;


    p_out_mat_data_V_write_assign_proc : process(p_out_mat_data_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter8, icmp_ln879_17_reg_1015_pp1_iter7_reg, ap_CS_fsm_state33, ap_block_pp1_stage0_11001)
    begin
        if ((((icmp_ln879_17_reg_1015_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1)) or ((p_out_mat_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)))) then 
            p_out_mat_data_V_write <= ap_const_logic_1;
        else 
            p_out_mat_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_mat_data_V_blk_n_assign_proc : process(p_src_mat_data_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln189_reg_906, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln887_9_reg_1001, icmp_ln887_8_reg_967)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln887_8_reg_967 = ap_const_lv1_1) and (icmp_ln887_9_reg_1001 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((icmp_ln189_reg_906 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            p_src_mat_data_V_blk_n <= p_src_mat_data_V_empty_n;
        else 
            p_src_mat_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_mat_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln189_reg_906, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage1_11001, ap_predicate_op130_read_state12, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_predicate_op130_read_state12 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((icmp_ln189_reg_906 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            p_src_mat_data_V_read <= ap_const_logic_1;
        else 
            p_src_mat_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln211_1_fu_523_p3 <= 
        ap_const_lv2_0 when (icmp_ln879_15_reg_971(0) = '1') else 
        p_0390_0_i_fu_122;
    select_ln211_2_fu_530_p3 <= 
        ap_const_lv2_1 when (icmp_ln879_15_reg_971(0) = '1') else 
        p_0396_0_i_fu_118;
    select_ln211_fu_516_p3 <= 
        ap_const_lv2_2 when (icmp_ln879_15_reg_971(0) = '1') else 
        p_0386_0_i_fu_126;
    select_ln256_fu_858_p3 <= 
        ap_const_lv13_0 when (icmp_ln879_16_reg_1268(0) = '1') else 
        row_ind_V_reg_1237;
    select_ln879_13_fu_552_p3 <= 
        ap_const_lv2_2 when (and_ln879_reg_978(0) = '1') else 
        ap_const_lv2_1;
    select_ln879_14_fu_559_p3 <= 
        select_ln879_13_fu_552_p3 when (or_ln879_fu_540_p2(0) = '1') else 
        select_ln211_1_fu_523_p3;
    select_ln879_15_fu_567_p3 <= 
        ap_const_lv2_0 when (and_ln879_reg_978(0) = '1') else 
        ap_const_lv2_2;
    select_ln879_16_fu_574_p3 <= 
        select_ln879_15_fu_567_p3 when (or_ln879_fu_540_p2(0) = '1') else 
        select_ln211_2_fu_530_p3;
    select_ln879_fu_544_p3 <= 
        zext_ln879_fu_537_p1 when (or_ln879_fu_540_p2(0) = '1') else 
        select_ln211_fu_516_p3;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln879_fu_497_p2 <= (icmp_ln879_reg_956 xor ap_const_lv1_1);
    zext_ln544_5_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_11_phi_fu_330_p4),64));
    zext_ln544_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_phi_fu_294_p4),64));
    zext_ln879_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln879_reg_978),2));
    zext_ln887_8_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_10_reg_314),17));
    zext_ln887_9_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_11_phi_fu_330_p4),16));
    zext_ln887_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_10_reg_314),16));
end behav;
