-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ip_accel_app is
port (
   -- AXI bus
    ap_clk   : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done  : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle  : OUT STD_LOGIC;

    p_src_TDATA  : IN STD_LOGIC_VECTOR (255 downto 0);
    p_src_TVALID : IN STD_LOGIC;
    p_src_TREADY : OUT STD_LOGIC;
    p_src_TUSER  : IN STD_LOGIC_VECTOR (0 downto 0);

    p_dst_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    p_dst_TVALID : OUT STD_LOGIC;
    p_dst_TREADY : IN STD_LOGIC;
    p_dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);

    -- Euresys metada
    MetaIn_StreamId   : IN STD_LOGIC_VECTOR (7 downto 0);
    MetaIn_StreamId_ap_vld : IN STD_LOGIC;
    MetaIn_SourceTag  : IN STD_LOGIC_VECTOR (15 downto 0);
    MetaIn_SourceTag_ap_vld : IN STD_LOGIC;
    MetaIn_Xsize_V    : IN STD_LOGIC_VECTOR (23 downto 0);
    MetaIn_Xsize_V_ap_vld : IN STD_LOGIC;
    MetaIn_Xoffs_V    : IN STD_LOGIC_VECTOR (23 downto 0);
    MetaIn_Xoffs_V_ap_vld : IN STD_LOGIC;
    MetaIn_Ysize_V    : IN STD_LOGIC_VECTOR (23 downto 0);
    MetaIn_Ysize_V_ap_vld : IN STD_LOGIC;
    MetaIn_Yoffs_V    : IN STD_LOGIC_VECTOR (23 downto 0);
    MetaIn_Yoffs_V_ap_vld : IN STD_LOGIC;
    MetaIn_DsizeL_V   : IN STD_LOGIC_VECTOR (23 downto 0);
    MetaIn_DsizeL_V_ap_vld : IN STD_LOGIC;
    MetaIn_PixelF     : IN STD_LOGIC_VECTOR (15 downto 0);
    MetaIn_PixelF_ap_vld : IN STD_LOGIC;
    MetaIn_TapG       : IN STD_LOGIC_VECTOR (15 downto 0);
    MetaIn_TapG_ap_vld : IN STD_LOGIC;
    MetaIn_Flags      : IN STD_LOGIC_VECTOR (7 downto 0);
    MetaIn_Flags_ap_vld : IN STD_LOGIC;
    MetaIn_Timestamp  : IN STD_LOGIC_VECTOR (31 downto 0);
    MetaIn_Timestamp_ap_vld : IN STD_LOGIC;
    MetaIn_PixProcessingFlgs : IN STD_LOGIC_VECTOR (7 downto 0);
    MetaIn_PixProcessingFlgs_ap_vld : IN STD_LOGIC;
    MetaIn_ModPixelF  : IN STD_LOGIC_VECTOR (31 downto 0);
    MetaIn_ModPixelF_ap_vld : IN STD_LOGIC;
    MetaIn_Status     : IN STD_LOGIC_VECTOR (31 downto 0);
    MetaIn_Status_ap_vld : IN STD_LOGIC;

    MetaOut_StreamId  : OUT STD_LOGIC_VECTOR (7 downto 0);
    MetaOut_SourceTag : OUT STD_LOGIC_VECTOR (15 downto 0);
    MetaOut_Xsize_V   : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_Xoffs_V   : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_Ysize_V   : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_Yoffs_V   : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_DsizeL_V  : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_PixelF    : OUT STD_LOGIC_VECTOR (15 downto 0);
    MetaOut_TapG      : OUT STD_LOGIC_VECTOR (15 downto 0);
    MetaOut_Flags     : OUT STD_LOGIC_VECTOR (7 downto 0);
    MetaOut_Timestamp : OUT STD_LOGIC_VECTOR (31 downto 0);
    MetaOut_PixProcessingFlgs : OUT STD_LOGIC_VECTOR (7 downto 0);
    MetaOut_ModPixelF : OUT STD_LOGIC_VECTOR (31 downto 0);
    MetaOut_Status    : OUT STD_LOGIC_VECTOR (31 downto 0);

    -- Unused AXI bus
    p_src_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TID   : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);

    p_dst_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_dst_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_TID   : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);

    -- xfopencv dilation kernel config
    height : IN STD_LOGIC_VECTOR (31 downto 0);
    width  : IN STD_LOGIC_VECTOR (31 downto 0);
    low_threshold  : IN STD_LOGIC_VECTOR (7 downto 0);
    high_threshold : IN STD_LOGIC_VECTOR (7 downto 0)
  );
end;


architecture behav of ip_accel_app is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ip_accel_app,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku035-fbva676-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.743435,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=102,HLS_SYN_DSP=6,HLS_SYN_FF=11270,HLS_SYN_LUT=36575,HLS_VERSION=2019_1}";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_start_out : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_start_write : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_imgInput_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit15_pro_U0_imgInput_rows_out_write : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_imgInput_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit15_pro_U0_imgInput_cols_out_write : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_imgOutput_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit15_pro_U0_imgOutput_rows_out_write : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_imgOutput_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit15_pro_U0_imgOutput_cols_out_write : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_low_threshold_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit15_pro_U0_low_threshold_out_write : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_high_threshold_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit15_pro_U0_high_threshold_out_write : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_2 : STD_LOGIC_VECTOR (23 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_3 : STD_LOGIC_VECTOR (23 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_4 : STD_LOGIC_VECTOR (23 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_5 : STD_LOGIC_VECTOR (23 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_6 : STD_LOGIC_VECTOR (23 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit15_pro_U0_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_MetaIn_Status_load_l : STD_LOGIC;
    signal MetaIn_Status_load_l_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_Status_load_l : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_Status_load_l : STD_LOGIC;
    signal ap_channel_done_MetaIn_ModPixelF_loa : STD_LOGIC;
    signal MetaIn_ModPixelF_loa_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_ModPixelF_loa : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_ModPixelF_loa : STD_LOGIC;
    signal ap_channel_done_MetaIn_PixProcessing : STD_LOGIC;
    signal MetaIn_PixProcessing_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_PixProcessing : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_PixProcessing : STD_LOGIC;
    signal ap_channel_done_MetaIn_Timestamp_loa : STD_LOGIC;
    signal MetaIn_Timestamp_loa_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_Timestamp_loa : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_Timestamp_loa : STD_LOGIC;
    signal ap_channel_done_MetaIn_Flags_load_lo : STD_LOGIC;
    signal MetaIn_Flags_load_lo_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_Flags_load_lo : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_Flags_load_lo : STD_LOGIC;
    signal ap_channel_done_MetaIn_TapG_load_loc : STD_LOGIC;
    signal MetaIn_TapG_load_loc_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_TapG_load_loc : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_TapG_load_loc : STD_LOGIC;
    signal ap_channel_done_MetaIn_PixelF_load_l : STD_LOGIC;
    signal MetaIn_PixelF_load_l_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_PixelF_load_l : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_PixelF_load_l : STD_LOGIC;
    signal ap_channel_done_MetaIn_DsizeL_V_load : STD_LOGIC;
    signal MetaIn_DsizeL_V_load_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_DsizeL_V_load : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_DsizeL_V_load : STD_LOGIC;
    signal ap_channel_done_MetaIn_Yoffs_V_load_s : STD_LOGIC;
    signal MetaIn_Yoffs_V_load_s_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_Yoffs_V_load_s : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_Yoffs_V_load_s : STD_LOGIC;
    signal ap_channel_done_MetaIn_Ysize_V_load_s : STD_LOGIC;
    signal MetaIn_Ysize_V_load_s_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_Ysize_V_load_s : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_Ysize_V_load_s : STD_LOGIC;
    signal ap_channel_done_MetaIn_Xoffs_V_load_s : STD_LOGIC;
    signal MetaIn_Xoffs_V_load_s_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_Xoffs_V_load_s : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_Xoffs_V_load_s : STD_LOGIC;
    signal ap_channel_done_MetaIn_Xsize_V_load_s : STD_LOGIC;
    signal MetaIn_Xsize_V_load_s_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_Xsize_V_load_s : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_Xsize_V_load_s : STD_LOGIC;
    signal ap_channel_done_MetaIn_SourceTag_loa : STD_LOGIC;
    signal MetaIn_SourceTag_loa_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_SourceTag_loa : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_SourceTag_loa : STD_LOGIC;
    signal ap_channel_done_MetaIn_StreamId_load : STD_LOGIC;
    signal MetaIn_StreamId_load_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_MetaIn_StreamId_load : STD_LOGIC := '0';
    signal ap_sync_channel_write_MetaIn_StreamId_load : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_StreamId : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_StreamId_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_SourceTag : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_SourceTag_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_Xsize_V : STD_LOGIC_VECTOR (23 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_Xsize_V_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_Xoffs_V : STD_LOGIC_VECTOR (23 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_Xoffs_V_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_Ysize_V : STD_LOGIC_VECTOR (23 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_Ysize_V_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_Yoffs_V : STD_LOGIC_VECTOR (23 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_Yoffs_V_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_DsizeL_V : STD_LOGIC_VECTOR (23 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_DsizeL_V_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_PixelF : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_PixelF_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_TapG : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_TapG_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_Flags : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_Flags_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_Timestamp : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_Timestamp_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_PixProcessingFlgs : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_PixProcessingFlgs_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_ModPixelF : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_ModPixelF_ap_vld : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_MetaOut_Status : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit1516_p_U0_MetaOut_Status_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2xfMat_U0_p_src_TREADY : STD_LOGIC;
    signal AXIvideo2xfMat_U0_img_rows_read : STD_LOGIC;
    signal AXIvideo2xfMat_U0_img_cols_read : STD_LOGIC;
    signal AXIvideo2xfMat_U0_img_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2xfMat_U0_img_data_V_write : STD_LOGIC;
    signal AXIvideo2xfMat_U0_img_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2xfMat_U0_img_rows_out_write : STD_LOGIC;
    signal AXIvideo2xfMat_U0_img_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2xfMat_U0_img_cols_out_write : STD_LOGIC;
    signal canny_accel_U0_ap_start : STD_LOGIC;
    signal canny_accel_U0_ap_done : STD_LOGIC;
    signal canny_accel_U0_ap_continue : STD_LOGIC;
    signal canny_accel_U0_ap_idle : STD_LOGIC;
    signal canny_accel_U0_ap_ready : STD_LOGIC;
    signal canny_accel_U0_start_out : STD_LOGIC;
    signal canny_accel_U0_start_write : STD_LOGIC;
    signal canny_accel_U0_p_src_rows_read : STD_LOGIC;
    signal canny_accel_U0_p_src_cols_read : STD_LOGIC;
    signal canny_accel_U0_p_src_data_V_read : STD_LOGIC;
    signal canny_accel_U0_p_dst1_data_V_read : STD_LOGIC;
    signal canny_accel_U0_p_dst1_data_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal canny_accel_U0_p_dst1_data_V_write : STD_LOGIC;
    signal canny_accel_U0_p_dst2_rows_read : STD_LOGIC;
    signal canny_accel_U0_p_dst2_cols_read : STD_LOGIC;
    signal canny_accel_U0_p_dst2_data_V_din : STD_LOGIC_VECTOR (56 downto 0);
    signal canny_accel_U0_p_dst2_data_V_write : STD_LOGIC;
    signal canny_accel_U0_low_threshold_read : STD_LOGIC;
    signal canny_accel_U0_high_threshold_read : STD_LOGIC;
    signal canny_accel_U0_p_dst2_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal canny_accel_U0_p_dst2_rows_out_write : STD_LOGIC;
    signal canny_accel_U0_p_dst2_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal canny_accel_U0_p_dst2_cols_out_write : STD_LOGIC;
    signal xfMat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal xfMat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal xfMat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal xfMat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal xfMat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal xfMat2AXIvideo_U0_img_rows_read : STD_LOGIC;
    signal xfMat2AXIvideo_U0_img_cols_read : STD_LOGIC;
    signal xfMat2AXIvideo_U0_img_data_V_read : STD_LOGIC;
    signal xfMat2AXIvideo_U0_p_dst_TDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_TVALID : STD_LOGIC;
    signal xfMat2AXIvideo_U0_p_dst_TKEEP : STD_LOGIC_VECTOR (31 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_TSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal imgInput_rows_c_full_n : STD_LOGIC;
    signal imgInput_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput_rows_c_empty_n : STD_LOGIC;
    signal imgInput_cols_c_full_n : STD_LOGIC;
    signal imgInput_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput_cols_c_empty_n : STD_LOGIC;
    signal imgOutput_rows_c_full_n : STD_LOGIC;
    signal imgOutput_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput_rows_c_empty_n : STD_LOGIC;
    signal imgOutput_cols_c_full_n : STD_LOGIC;
    signal imgOutput_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput_cols_c_empty_n : STD_LOGIC;
    signal low_threshold_c_full_n : STD_LOGIC;
    signal low_threshold_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal low_threshold_c_empty_n : STD_LOGIC;
    signal high_threshold_c_full_n : STD_LOGIC;
    signal high_threshold_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal high_threshold_c_empty_n : STD_LOGIC;
    signal MetaIn_StreamId_load_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal MetaIn_StreamId_load_empty_n : STD_LOGIC;
    signal MetaIn_SourceTag_loa_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal MetaIn_SourceTag_loa_empty_n : STD_LOGIC;
    signal MetaIn_Xsize_V_load_s_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal MetaIn_Xsize_V_load_s_empty_n : STD_LOGIC;
    signal MetaIn_Xoffs_V_load_s_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal MetaIn_Xoffs_V_load_s_empty_n : STD_LOGIC;
    signal MetaIn_Ysize_V_load_s_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal MetaIn_Ysize_V_load_s_empty_n : STD_LOGIC;
    signal MetaIn_Yoffs_V_load_s_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal MetaIn_Yoffs_V_load_s_empty_n : STD_LOGIC;
    signal MetaIn_DsizeL_V_load_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal MetaIn_DsizeL_V_load_empty_n : STD_LOGIC;
    signal MetaIn_PixelF_load_l_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal MetaIn_PixelF_load_l_empty_n : STD_LOGIC;
    signal MetaIn_TapG_load_loc_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal MetaIn_TapG_load_loc_empty_n : STD_LOGIC;
    signal MetaIn_Flags_load_lo_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal MetaIn_Flags_load_lo_empty_n : STD_LOGIC;
    signal MetaIn_Timestamp_loa_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal MetaIn_Timestamp_loa_empty_n : STD_LOGIC;
    signal MetaIn_PixProcessing_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal MetaIn_PixProcessing_empty_n : STD_LOGIC;
    signal MetaIn_ModPixelF_loa_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal MetaIn_ModPixelF_loa_empty_n : STD_LOGIC;
    signal MetaIn_Status_load_l_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal MetaIn_Status_load_l_empty_n : STD_LOGIC;
    signal imgInput_data_V_full_n : STD_LOGIC;
    signal imgInput_data_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgInput_data_V_empty_n : STD_LOGIC;
    signal imgInput_rows_c25_full_n : STD_LOGIC;
    signal imgInput_rows_c25_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput_rows_c25_empty_n : STD_LOGIC;
    signal imgInput_cols_c26_full_n : STD_LOGIC;
    signal imgInput_cols_c26_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput_cols_c26_empty_n : STD_LOGIC;
    signal imgFiltered_data_V_full_n : STD_LOGIC;
    signal imgFiltered_data_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal imgFiltered_data_V_empty_n : STD_LOGIC;
    signal imgOutput_data_V_full_n : STD_LOGIC;
    signal imgOutput_data_V_dout : STD_LOGIC_VECTOR (56 downto 0);
    signal imgOutput_data_V_empty_n : STD_LOGIC;
    signal imgOutput_rows_c27_full_n : STD_LOGIC;
    signal imgOutput_rows_c27_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput_rows_c27_empty_n : STD_LOGIC;
    signal imgOutput_cols_c28_full_n : STD_LOGIC;
    signal imgOutput_cols_c28_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput_cols_c28_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_Mat_exit15_pro_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_Mat_exit15_pro_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit15_pro_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIvideo2xfMat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2xfMat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_canny_accel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_canny_accel_U0_full_n : STD_LOGIC;
    signal start_for_canny_accel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_canny_accel_U0_empty_n : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit1516_p_U0_start_write : STD_LOGIC;
    signal AXIvideo2xfMat_U0_start_full_n : STD_LOGIC;
    signal AXIvideo2xfMat_U0_start_write : STD_LOGIC;
    signal start_for_xfMat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xfMat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_xfMat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xfMat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal xfMat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal xfMat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_Mat_exit15_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (31 downto 0);
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        MetaIn_StreamId : IN STD_LOGIC_VECTOR (7 downto 0);
        MetaIn_StreamId_ap_vld : IN STD_LOGIC;
        MetaIn_SourceTag : IN STD_LOGIC_VECTOR (15 downto 0);
        MetaIn_SourceTag_ap_vld : IN STD_LOGIC;
        MetaIn_Xsize_V : IN STD_LOGIC_VECTOR (23 downto 0);
        MetaIn_Xsize_V_ap_vld : IN STD_LOGIC;
        MetaIn_Xoffs_V : IN STD_LOGIC_VECTOR (23 downto 0);
        MetaIn_Xoffs_V_ap_vld : IN STD_LOGIC;
        MetaIn_Ysize_V : IN STD_LOGIC_VECTOR (23 downto 0);
        MetaIn_Ysize_V_ap_vld : IN STD_LOGIC;
        MetaIn_Yoffs_V : IN STD_LOGIC_VECTOR (23 downto 0);
        MetaIn_Yoffs_V_ap_vld : IN STD_LOGIC;
        MetaIn_DsizeL_V : IN STD_LOGIC_VECTOR (23 downto 0);
        MetaIn_DsizeL_V_ap_vld : IN STD_LOGIC;
        MetaIn_PixelF : IN STD_LOGIC_VECTOR (15 downto 0);
        MetaIn_PixelF_ap_vld : IN STD_LOGIC;
        MetaIn_TapG : IN STD_LOGIC_VECTOR (15 downto 0);
        MetaIn_TapG_ap_vld : IN STD_LOGIC;
        MetaIn_Flags : IN STD_LOGIC_VECTOR (7 downto 0);
        MetaIn_Flags_ap_vld : IN STD_LOGIC;
        MetaIn_Timestamp : IN STD_LOGIC_VECTOR (31 downto 0);
        MetaIn_Timestamp_ap_vld : IN STD_LOGIC;
        MetaIn_PixProcessingFlgs : IN STD_LOGIC_VECTOR (7 downto 0);
        MetaIn_PixProcessingFlgs_ap_vld : IN STD_LOGIC;
        MetaIn_ModPixelF : IN STD_LOGIC_VECTOR (31 downto 0);
        MetaIn_ModPixelF_ap_vld : IN STD_LOGIC;
        MetaIn_Status : IN STD_LOGIC_VECTOR (31 downto 0);
        MetaIn_Status_ap_vld : IN STD_LOGIC;
        low_threshold : IN STD_LOGIC_VECTOR (7 downto 0);
        high_threshold : IN STD_LOGIC_VECTOR (7 downto 0);
        imgInput_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgInput_rows_out_full_n : IN STD_LOGIC;
        imgInput_rows_out_write : OUT STD_LOGIC;
        imgInput_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgInput_cols_out_full_n : IN STD_LOGIC;
        imgInput_cols_out_write : OUT STD_LOGIC;
        imgOutput_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgOutput_rows_out_full_n : IN STD_LOGIC;
        imgOutput_rows_out_write : OUT STD_LOGIC;
        imgOutput_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgOutput_cols_out_full_n : IN STD_LOGIC;
        imgOutput_cols_out_write : OUT STD_LOGIC;
        low_threshold_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        low_threshold_out_full_n : IN STD_LOGIC;
        low_threshold_out_write : OUT STD_LOGIC;
        high_threshold_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        high_threshold_out_full_n : IN STD_LOGIC;
        high_threshold_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Block_Mat_exit1516_p IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (23 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (23 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (23 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (23 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (23 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
        MetaOut_StreamId : OUT STD_LOGIC_VECTOR (7 downto 0);
        MetaOut_StreamId_ap_vld : OUT STD_LOGIC;
        MetaOut_SourceTag : OUT STD_LOGIC_VECTOR (15 downto 0);
        MetaOut_SourceTag_ap_vld : OUT STD_LOGIC;
        MetaOut_Xsize_V : OUT STD_LOGIC_VECTOR (23 downto 0);
        MetaOut_Xsize_V_ap_vld : OUT STD_LOGIC;
        MetaOut_Xoffs_V : OUT STD_LOGIC_VECTOR (23 downto 0);
        MetaOut_Xoffs_V_ap_vld : OUT STD_LOGIC;
        MetaOut_Ysize_V : OUT STD_LOGIC_VECTOR (23 downto 0);
        MetaOut_Ysize_V_ap_vld : OUT STD_LOGIC;
        MetaOut_Yoffs_V : OUT STD_LOGIC_VECTOR (23 downto 0);
        MetaOut_Yoffs_V_ap_vld : OUT STD_LOGIC;
        MetaOut_DsizeL_V : OUT STD_LOGIC_VECTOR (23 downto 0);
        MetaOut_DsizeL_V_ap_vld : OUT STD_LOGIC;
        MetaOut_PixelF : OUT STD_LOGIC_VECTOR (15 downto 0);
        MetaOut_PixelF_ap_vld : OUT STD_LOGIC;
        MetaOut_TapG : OUT STD_LOGIC_VECTOR (15 downto 0);
        MetaOut_TapG_ap_vld : OUT STD_LOGIC;
        MetaOut_Flags : OUT STD_LOGIC_VECTOR (7 downto 0);
        MetaOut_Flags_ap_vld : OUT STD_LOGIC;
        MetaOut_Timestamp : OUT STD_LOGIC_VECTOR (31 downto 0);
        MetaOut_Timestamp_ap_vld : OUT STD_LOGIC;
        MetaOut_PixProcessingFlgs : OUT STD_LOGIC_VECTOR (7 downto 0);
        MetaOut_PixProcessingFlgs_ap_vld : OUT STD_LOGIC;
        MetaOut_ModPixelF : OUT STD_LOGIC_VECTOR (31 downto 0);
        MetaOut_ModPixelF_ap_vld : OUT STD_LOGIC;
        MetaOut_Status : OUT STD_LOGIC_VECTOR (31 downto 0);
        MetaOut_Status_ap_vld : OUT STD_LOGIC );
    end component;


    component AXIvideo2xfMat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        p_src_TVALID : IN STD_LOGIC;
        p_src_TREADY : OUT STD_LOGIC;
        p_src_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_empty_n : IN STD_LOGIC;
        img_rows_read : OUT STD_LOGIC;
        img_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_empty_n : IN STD_LOGIC;
        img_cols_read : OUT STD_LOGIC;
        img_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_V_full_n : IN STD_LOGIC;
        img_data_V_write : OUT STD_LOGIC;
        img_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_rows_out_full_n : IN STD_LOGIC;
        img_rows_out_write : OUT STD_LOGIC;
        img_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_cols_out_full_n : IN STD_LOGIC;
        img_cols_out_write : OUT STD_LOGIC );
    end component;


    component canny_accel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_empty_n : IN STD_LOGIC;
        p_src_rows_read : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC;
        p_src_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_V_empty_n : IN STD_LOGIC;
        p_src_data_V_read : OUT STD_LOGIC;
        p_dst1_data_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        p_dst1_data_V_empty_n : IN STD_LOGIC;
        p_dst1_data_V_read : OUT STD_LOGIC;
        p_dst1_data_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        p_dst1_data_V_full_n : IN STD_LOGIC;
        p_dst1_data_V_write : OUT STD_LOGIC;
        p_dst2_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_dst2_rows_empty_n : IN STD_LOGIC;
        p_dst2_rows_read : OUT STD_LOGIC;
        p_dst2_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_dst2_cols_empty_n : IN STD_LOGIC;
        p_dst2_cols_read : OUT STD_LOGIC;
        p_dst2_data_V_din : OUT STD_LOGIC_VECTOR (56 downto 0);
        p_dst2_data_V_full_n : IN STD_LOGIC;
        p_dst2_data_V_write : OUT STD_LOGIC;
        low_threshold_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        low_threshold_empty_n : IN STD_LOGIC;
        low_threshold_read : OUT STD_LOGIC;
        high_threshold_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        high_threshold_empty_n : IN STD_LOGIC;
        high_threshold_read : OUT STD_LOGIC;
        p_dst2_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_dst2_rows_out_full_n : IN STD_LOGIC;
        p_dst2_rows_out_write : OUT STD_LOGIC;
        p_dst2_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_dst2_cols_out_full_n : IN STD_LOGIC;
        p_dst2_cols_out_write : OUT STD_LOGIC );
    end component;


    component xfMat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_empty_n : IN STD_LOGIC;
        img_rows_read : OUT STD_LOGIC;
        img_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_empty_n : IN STD_LOGIC;
        img_cols_read : OUT STD_LOGIC;
        img_data_V_dout : IN STD_LOGIC_VECTOR (56 downto 0);
        img_data_V_empty_n : IN STD_LOGIC;
        img_data_V_read : OUT STD_LOGIC;
        p_dst_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        p_dst_TVALID : OUT STD_LOGIC;
        p_dst_TREADY : IN STD_LOGIC;
        p_dst_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_dst_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w24_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w57_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (56 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (56 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_canny_aYie IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xfMat2AZio IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Block_Mat_exit15_pro_U0 : component Block_Mat_exit15_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit15_pro_U0_ap_start,
        start_full_n => start_for_canny_accel_U0_full_n,
        ap_done => Block_Mat_exit15_pro_U0_ap_done,
        ap_continue => Block_Mat_exit15_pro_U0_ap_continue,
        ap_idle => Block_Mat_exit15_pro_U0_ap_idle,
        ap_ready => Block_Mat_exit15_pro_U0_ap_ready,
        start_out => Block_Mat_exit15_pro_U0_start_out,
        start_write => Block_Mat_exit15_pro_U0_start_write,
        height => height,
        width => width,
        MetaIn_StreamId => MetaIn_StreamId,
        MetaIn_StreamId_ap_vld => MetaIn_StreamId_ap_vld,
        MetaIn_SourceTag => MetaIn_SourceTag,
        MetaIn_SourceTag_ap_vld => MetaIn_SourceTag_ap_vld,
        MetaIn_Xsize_V => MetaIn_Xsize_V,
        MetaIn_Xsize_V_ap_vld => MetaIn_Xsize_V_ap_vld,
        MetaIn_Xoffs_V => MetaIn_Xoffs_V,
        MetaIn_Xoffs_V_ap_vld => MetaIn_Xoffs_V_ap_vld,
        MetaIn_Ysize_V => MetaIn_Ysize_V,
        MetaIn_Ysize_V_ap_vld => MetaIn_Ysize_V_ap_vld,
        MetaIn_Yoffs_V => MetaIn_Yoffs_V,
        MetaIn_Yoffs_V_ap_vld => MetaIn_Yoffs_V_ap_vld,
        MetaIn_DsizeL_V => MetaIn_DsizeL_V,
        MetaIn_DsizeL_V_ap_vld => MetaIn_DsizeL_V_ap_vld,
        MetaIn_PixelF => MetaIn_PixelF,
        MetaIn_PixelF_ap_vld => MetaIn_PixelF_ap_vld,
        MetaIn_TapG => MetaIn_TapG,
        MetaIn_TapG_ap_vld => MetaIn_TapG_ap_vld,
        MetaIn_Flags => MetaIn_Flags,
        MetaIn_Flags_ap_vld => MetaIn_Flags_ap_vld,
        MetaIn_Timestamp => MetaIn_Timestamp,
        MetaIn_Timestamp_ap_vld => MetaIn_Timestamp_ap_vld,
        MetaIn_PixProcessingFlgs => MetaIn_PixProcessingFlgs,
        MetaIn_PixProcessingFlgs_ap_vld => MetaIn_PixProcessingFlgs_ap_vld,
        MetaIn_ModPixelF => MetaIn_ModPixelF,
        MetaIn_ModPixelF_ap_vld => MetaIn_ModPixelF_ap_vld,
        MetaIn_Status => MetaIn_Status,
        MetaIn_Status_ap_vld => MetaIn_Status_ap_vld,
        low_threshold => low_threshold,
        high_threshold => high_threshold,
        imgInput_rows_out_din => Block_Mat_exit15_pro_U0_imgInput_rows_out_din,
        imgInput_rows_out_full_n => imgInput_rows_c_full_n,
        imgInput_rows_out_write => Block_Mat_exit15_pro_U0_imgInput_rows_out_write,
        imgInput_cols_out_din => Block_Mat_exit15_pro_U0_imgInput_cols_out_din,
        imgInput_cols_out_full_n => imgInput_cols_c_full_n,
        imgInput_cols_out_write => Block_Mat_exit15_pro_U0_imgInput_cols_out_write,
        imgOutput_rows_out_din => Block_Mat_exit15_pro_U0_imgOutput_rows_out_din,
        imgOutput_rows_out_full_n => imgOutput_rows_c_full_n,
        imgOutput_rows_out_write => Block_Mat_exit15_pro_U0_imgOutput_rows_out_write,
        imgOutput_cols_out_din => Block_Mat_exit15_pro_U0_imgOutput_cols_out_din,
        imgOutput_cols_out_full_n => imgOutput_cols_c_full_n,
        imgOutput_cols_out_write => Block_Mat_exit15_pro_U0_imgOutput_cols_out_write,
        low_threshold_out_din => Block_Mat_exit15_pro_U0_low_threshold_out_din,
        low_threshold_out_full_n => low_threshold_c_full_n,
        low_threshold_out_write => Block_Mat_exit15_pro_U0_low_threshold_out_write,
        high_threshold_out_din => Block_Mat_exit15_pro_U0_high_threshold_out_din,
        high_threshold_out_full_n => high_threshold_c_full_n,
        high_threshold_out_write => Block_Mat_exit15_pro_U0_high_threshold_out_write,
        ap_return_0 => Block_Mat_exit15_pro_U0_ap_return_0,
        ap_return_1 => Block_Mat_exit15_pro_U0_ap_return_1,
        ap_return_2 => Block_Mat_exit15_pro_U0_ap_return_2,
        ap_return_3 => Block_Mat_exit15_pro_U0_ap_return_3,
        ap_return_4 => Block_Mat_exit15_pro_U0_ap_return_4,
        ap_return_5 => Block_Mat_exit15_pro_U0_ap_return_5,
        ap_return_6 => Block_Mat_exit15_pro_U0_ap_return_6,
        ap_return_7 => Block_Mat_exit15_pro_U0_ap_return_7,
        ap_return_8 => Block_Mat_exit15_pro_U0_ap_return_8,
        ap_return_9 => Block_Mat_exit15_pro_U0_ap_return_9,
        ap_return_10 => Block_Mat_exit15_pro_U0_ap_return_10,
        ap_return_11 => Block_Mat_exit15_pro_U0_ap_return_11,
        ap_return_12 => Block_Mat_exit15_pro_U0_ap_return_12,
        ap_return_13 => Block_Mat_exit15_pro_U0_ap_return_13);

    Block_Mat_exit1516_p_U0 : component Block_Mat_exit1516_p
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit1516_p_U0_ap_start,
        ap_done => Block_Mat_exit1516_p_U0_ap_done,
        ap_continue => Block_Mat_exit1516_p_U0_ap_continue,
        ap_idle => Block_Mat_exit1516_p_U0_ap_idle,
        ap_ready => Block_Mat_exit1516_p_U0_ap_ready,
        p_read => MetaIn_StreamId_load_dout,
        p_read1 => MetaIn_SourceTag_loa_dout,
        p_read2 => MetaIn_Xsize_V_load_s_dout,
        p_read3 => MetaIn_Xoffs_V_load_s_dout,
        p_read4 => MetaIn_Ysize_V_load_s_dout,
        p_read5 => MetaIn_Yoffs_V_load_s_dout,
        p_read6 => MetaIn_DsizeL_V_load_dout,
        p_read7 => MetaIn_PixelF_load_l_dout,
        p_read8 => MetaIn_TapG_load_loc_dout,
        p_read9 => MetaIn_Flags_load_lo_dout,
        p_read10 => MetaIn_Timestamp_loa_dout,
        p_read11 => MetaIn_PixProcessing_dout,
        p_read12 => MetaIn_ModPixelF_loa_dout,
        p_read13 => MetaIn_Status_load_l_dout,
        MetaOut_StreamId => Block_Mat_exit1516_p_U0_MetaOut_StreamId,
        MetaOut_StreamId_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_StreamId_ap_vld,
        MetaOut_SourceTag => Block_Mat_exit1516_p_U0_MetaOut_SourceTag,
        MetaOut_SourceTag_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_SourceTag_ap_vld,
        MetaOut_Xsize_V => Block_Mat_exit1516_p_U0_MetaOut_Xsize_V,
        MetaOut_Xsize_V_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_Xsize_V_ap_vld,
        MetaOut_Xoffs_V => Block_Mat_exit1516_p_U0_MetaOut_Xoffs_V,
        MetaOut_Xoffs_V_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_Xoffs_V_ap_vld,
        MetaOut_Ysize_V => Block_Mat_exit1516_p_U0_MetaOut_Ysize_V,
        MetaOut_Ysize_V_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_Ysize_V_ap_vld,
        MetaOut_Yoffs_V => Block_Mat_exit1516_p_U0_MetaOut_Yoffs_V,
        MetaOut_Yoffs_V_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_Yoffs_V_ap_vld,
        MetaOut_DsizeL_V => Block_Mat_exit1516_p_U0_MetaOut_DsizeL_V,
        MetaOut_DsizeL_V_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_DsizeL_V_ap_vld,
        MetaOut_PixelF => Block_Mat_exit1516_p_U0_MetaOut_PixelF,
        MetaOut_PixelF_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_PixelF_ap_vld,
        MetaOut_TapG => Block_Mat_exit1516_p_U0_MetaOut_TapG,
        MetaOut_TapG_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_TapG_ap_vld,
        MetaOut_Flags => Block_Mat_exit1516_p_U0_MetaOut_Flags,
        MetaOut_Flags_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_Flags_ap_vld,
        MetaOut_Timestamp => Block_Mat_exit1516_p_U0_MetaOut_Timestamp,
        MetaOut_Timestamp_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_Timestamp_ap_vld,
        MetaOut_PixProcessingFlgs => Block_Mat_exit1516_p_U0_MetaOut_PixProcessingFlgs,
        MetaOut_PixProcessingFlgs_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_PixProcessingFlgs_ap_vld,
        MetaOut_ModPixelF => Block_Mat_exit1516_p_U0_MetaOut_ModPixelF,
        MetaOut_ModPixelF_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_ModPixelF_ap_vld,
        MetaOut_Status => Block_Mat_exit1516_p_U0_MetaOut_Status,
        MetaOut_Status_ap_vld => Block_Mat_exit1516_p_U0_MetaOut_Status_ap_vld);

    AXIvideo2xfMat_U0 : component AXIvideo2xfMat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2xfMat_U0_ap_start,
        ap_done => AXIvideo2xfMat_U0_ap_done,
        ap_continue => AXIvideo2xfMat_U0_ap_continue,
        ap_idle => AXIvideo2xfMat_U0_ap_idle,
        ap_ready => AXIvideo2xfMat_U0_ap_ready,
        p_src_TDATA => p_src_TDATA,
        p_src_TVALID => p_src_TVALID,
        p_src_TREADY => AXIvideo2xfMat_U0_p_src_TREADY,
        p_src_TKEEP => p_src_TKEEP,
        p_src_TSTRB => p_src_TSTRB,
        p_src_TUSER => p_src_TUSER,
        p_src_TLAST => p_src_TLAST,
        p_src_TID => p_src_TID,
        p_src_TDEST => p_src_TDEST,
        img_rows_dout => imgInput_rows_c_dout,
        img_rows_empty_n => imgInput_rows_c_empty_n,
        img_rows_read => AXIvideo2xfMat_U0_img_rows_read,
        img_cols_dout => imgInput_cols_c_dout,
        img_cols_empty_n => imgInput_cols_c_empty_n,
        img_cols_read => AXIvideo2xfMat_U0_img_cols_read,
        img_data_V_din => AXIvideo2xfMat_U0_img_data_V_din,
        img_data_V_full_n => imgInput_data_V_full_n,
        img_data_V_write => AXIvideo2xfMat_U0_img_data_V_write,
        img_rows_out_din => AXIvideo2xfMat_U0_img_rows_out_din,
        img_rows_out_full_n => imgInput_rows_c25_full_n,
        img_rows_out_write => AXIvideo2xfMat_U0_img_rows_out_write,
        img_cols_out_din => AXIvideo2xfMat_U0_img_cols_out_din,
        img_cols_out_full_n => imgInput_cols_c26_full_n,
        img_cols_out_write => AXIvideo2xfMat_U0_img_cols_out_write);

    canny_accel_U0 : component canny_accel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_accel_U0_ap_start,
        start_full_n => start_for_xfMat2AXIvideo_U0_full_n,
        ap_done => canny_accel_U0_ap_done,
        ap_continue => canny_accel_U0_ap_continue,
        ap_idle => canny_accel_U0_ap_idle,
        ap_ready => canny_accel_U0_ap_ready,
        start_out => canny_accel_U0_start_out,
        start_write => canny_accel_U0_start_write,
        p_src_rows_dout => imgInput_rows_c25_dout,
        p_src_rows_empty_n => imgInput_rows_c25_empty_n,
        p_src_rows_read => canny_accel_U0_p_src_rows_read,
        p_src_cols_dout => imgInput_cols_c26_dout,
        p_src_cols_empty_n => imgInput_cols_c26_empty_n,
        p_src_cols_read => canny_accel_U0_p_src_cols_read,
        p_src_data_V_dout => imgInput_data_V_dout,
        p_src_data_V_empty_n => imgInput_data_V_empty_n,
        p_src_data_V_read => canny_accel_U0_p_src_data_V_read,
        p_dst1_data_V_dout => imgFiltered_data_V_dout,
        p_dst1_data_V_empty_n => imgFiltered_data_V_empty_n,
        p_dst1_data_V_read => canny_accel_U0_p_dst1_data_V_read,
        p_dst1_data_V_din => canny_accel_U0_p_dst1_data_V_din,
        p_dst1_data_V_full_n => imgFiltered_data_V_full_n,
        p_dst1_data_V_write => canny_accel_U0_p_dst1_data_V_write,
        p_dst2_rows_dout => imgOutput_rows_c_dout,
        p_dst2_rows_empty_n => imgOutput_rows_c_empty_n,
        p_dst2_rows_read => canny_accel_U0_p_dst2_rows_read,
        p_dst2_cols_dout => imgOutput_cols_c_dout,
        p_dst2_cols_empty_n => imgOutput_cols_c_empty_n,
        p_dst2_cols_read => canny_accel_U0_p_dst2_cols_read,
        p_dst2_data_V_din => canny_accel_U0_p_dst2_data_V_din,
        p_dst2_data_V_full_n => imgOutput_data_V_full_n,
        p_dst2_data_V_write => canny_accel_U0_p_dst2_data_V_write,
        low_threshold_dout => low_threshold_c_dout,
        low_threshold_empty_n => low_threshold_c_empty_n,
        low_threshold_read => canny_accel_U0_low_threshold_read,
        high_threshold_dout => high_threshold_c_dout,
        high_threshold_empty_n => high_threshold_c_empty_n,
        high_threshold_read => canny_accel_U0_high_threshold_read,
        p_dst2_rows_out_din => canny_accel_U0_p_dst2_rows_out_din,
        p_dst2_rows_out_full_n => imgOutput_rows_c27_full_n,
        p_dst2_rows_out_write => canny_accel_U0_p_dst2_rows_out_write,
        p_dst2_cols_out_din => canny_accel_U0_p_dst2_cols_out_din,
        p_dst2_cols_out_full_n => imgOutput_cols_c28_full_n,
        p_dst2_cols_out_write => canny_accel_U0_p_dst2_cols_out_write);

    xfMat2AXIvideo_U0 : component xfMat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => xfMat2AXIvideo_U0_ap_start,
        ap_done => xfMat2AXIvideo_U0_ap_done,
        ap_continue => xfMat2AXIvideo_U0_ap_continue,
        ap_idle => xfMat2AXIvideo_U0_ap_idle,
        ap_ready => xfMat2AXIvideo_U0_ap_ready,
        img_rows_dout => imgOutput_rows_c27_dout,
        img_rows_empty_n => imgOutput_rows_c27_empty_n,
        img_rows_read => xfMat2AXIvideo_U0_img_rows_read,
        img_cols_dout => imgOutput_cols_c28_dout,
        img_cols_empty_n => imgOutput_cols_c28_empty_n,
        img_cols_read => xfMat2AXIvideo_U0_img_cols_read,
        img_data_V_dout => imgOutput_data_V_dout,
        img_data_V_empty_n => imgOutput_data_V_empty_n,
        img_data_V_read => xfMat2AXIvideo_U0_img_data_V_read,
        p_dst_TDATA => xfMat2AXIvideo_U0_p_dst_TDATA,
        p_dst_TVALID => xfMat2AXIvideo_U0_p_dst_TVALID,
        p_dst_TREADY => p_dst_TREADY,
        p_dst_TKEEP => xfMat2AXIvideo_U0_p_dst_TKEEP,
        p_dst_TSTRB => xfMat2AXIvideo_U0_p_dst_TSTRB,
        p_dst_TUSER => xfMat2AXIvideo_U0_p_dst_TUSER,
        p_dst_TLAST => xfMat2AXIvideo_U0_p_dst_TLAST,
        p_dst_TID => xfMat2AXIvideo_U0_p_dst_TID,
        p_dst_TDEST => xfMat2AXIvideo_U0_p_dst_TDEST);

    imgInput_rows_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_imgInput_rows_out_din,
        if_full_n => imgInput_rows_c_full_n,
        if_write => Block_Mat_exit15_pro_U0_imgInput_rows_out_write,
        if_dout => imgInput_rows_c_dout,
        if_empty_n => imgInput_rows_c_empty_n,
        if_read => AXIvideo2xfMat_U0_img_rows_read);

    imgInput_cols_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_imgInput_cols_out_din,
        if_full_n => imgInput_cols_c_full_n,
        if_write => Block_Mat_exit15_pro_U0_imgInput_cols_out_write,
        if_dout => imgInput_cols_c_dout,
        if_empty_n => imgInput_cols_c_empty_n,
        if_read => AXIvideo2xfMat_U0_img_cols_read);

    imgOutput_rows_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_imgOutput_rows_out_din,
        if_full_n => imgOutput_rows_c_full_n,
        if_write => Block_Mat_exit15_pro_U0_imgOutput_rows_out_write,
        if_dout => imgOutput_rows_c_dout,
        if_empty_n => imgOutput_rows_c_empty_n,
        if_read => canny_accel_U0_p_dst2_rows_read);

    imgOutput_cols_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_imgOutput_cols_out_din,
        if_full_n => imgOutput_cols_c_full_n,
        if_write => Block_Mat_exit15_pro_U0_imgOutput_cols_out_write,
        if_dout => imgOutput_cols_c_dout,
        if_empty_n => imgOutput_cols_c_empty_n,
        if_read => canny_accel_U0_p_dst2_cols_read);

    low_threshold_c_U : component fifo_w8_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_low_threshold_out_din,
        if_full_n => low_threshold_c_full_n,
        if_write => Block_Mat_exit15_pro_U0_low_threshold_out_write,
        if_dout => low_threshold_c_dout,
        if_empty_n => low_threshold_c_empty_n,
        if_read => canny_accel_U0_low_threshold_read);

    high_threshold_c_U : component fifo_w8_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_high_threshold_out_din,
        if_full_n => high_threshold_c_full_n,
        if_write => Block_Mat_exit15_pro_U0_high_threshold_out_write,
        if_dout => high_threshold_c_dout,
        if_empty_n => high_threshold_c_empty_n,
        if_read => canny_accel_U0_high_threshold_read);

    MetaIn_StreamId_load_U : component fifo_w8_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_0,
        if_full_n => MetaIn_StreamId_load_full_n,
        if_write => ap_channel_done_MetaIn_StreamId_load,
        if_dout => MetaIn_StreamId_load_dout,
        if_empty_n => MetaIn_StreamId_load_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_SourceTag_loa_U : component fifo_w16_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_1,
        if_full_n => MetaIn_SourceTag_loa_full_n,
        if_write => ap_channel_done_MetaIn_SourceTag_loa,
        if_dout => MetaIn_SourceTag_loa_dout,
        if_empty_n => MetaIn_SourceTag_loa_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_Xsize_V_load_s_U : component fifo_w24_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_2,
        if_full_n => MetaIn_Xsize_V_load_s_full_n,
        if_write => ap_channel_done_MetaIn_Xsize_V_load_s,
        if_dout => MetaIn_Xsize_V_load_s_dout,
        if_empty_n => MetaIn_Xsize_V_load_s_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_Xoffs_V_load_s_U : component fifo_w24_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_3,
        if_full_n => MetaIn_Xoffs_V_load_s_full_n,
        if_write => ap_channel_done_MetaIn_Xoffs_V_load_s,
        if_dout => MetaIn_Xoffs_V_load_s_dout,
        if_empty_n => MetaIn_Xoffs_V_load_s_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_Ysize_V_load_s_U : component fifo_w24_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_4,
        if_full_n => MetaIn_Ysize_V_load_s_full_n,
        if_write => ap_channel_done_MetaIn_Ysize_V_load_s,
        if_dout => MetaIn_Ysize_V_load_s_dout,
        if_empty_n => MetaIn_Ysize_V_load_s_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_Yoffs_V_load_s_U : component fifo_w24_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_5,
        if_full_n => MetaIn_Yoffs_V_load_s_full_n,
        if_write => ap_channel_done_MetaIn_Yoffs_V_load_s,
        if_dout => MetaIn_Yoffs_V_load_s_dout,
        if_empty_n => MetaIn_Yoffs_V_load_s_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_DsizeL_V_load_U : component fifo_w24_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_6,
        if_full_n => MetaIn_DsizeL_V_load_full_n,
        if_write => ap_channel_done_MetaIn_DsizeL_V_load,
        if_dout => MetaIn_DsizeL_V_load_dout,
        if_empty_n => MetaIn_DsizeL_V_load_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_PixelF_load_l_U : component fifo_w16_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_7,
        if_full_n => MetaIn_PixelF_load_l_full_n,
        if_write => ap_channel_done_MetaIn_PixelF_load_l,
        if_dout => MetaIn_PixelF_load_l_dout,
        if_empty_n => MetaIn_PixelF_load_l_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_TapG_load_loc_U : component fifo_w16_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_8,
        if_full_n => MetaIn_TapG_load_loc_full_n,
        if_write => ap_channel_done_MetaIn_TapG_load_loc,
        if_dout => MetaIn_TapG_load_loc_dout,
        if_empty_n => MetaIn_TapG_load_loc_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_Flags_load_lo_U : component fifo_w8_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_9,
        if_full_n => MetaIn_Flags_load_lo_full_n,
        if_write => ap_channel_done_MetaIn_Flags_load_lo,
        if_dout => MetaIn_Flags_load_lo_dout,
        if_empty_n => MetaIn_Flags_load_lo_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_Timestamp_loa_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_10,
        if_full_n => MetaIn_Timestamp_loa_full_n,
        if_write => ap_channel_done_MetaIn_Timestamp_loa,
        if_dout => MetaIn_Timestamp_loa_dout,
        if_empty_n => MetaIn_Timestamp_loa_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_PixProcessing_U : component fifo_w8_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_11,
        if_full_n => MetaIn_PixProcessing_full_n,
        if_write => ap_channel_done_MetaIn_PixProcessing,
        if_dout => MetaIn_PixProcessing_dout,
        if_empty_n => MetaIn_PixProcessing_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_ModPixelF_loa_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_12,
        if_full_n => MetaIn_ModPixelF_loa_full_n,
        if_write => ap_channel_done_MetaIn_ModPixelF_loa,
        if_dout => MetaIn_ModPixelF_loa_dout,
        if_empty_n => MetaIn_ModPixelF_loa_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    MetaIn_Status_load_l_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit15_pro_U0_ap_return_13,
        if_full_n => MetaIn_Status_load_l_full_n,
        if_write => ap_channel_done_MetaIn_Status_load_l,
        if_dout => MetaIn_Status_load_l_dout,
        if_empty_n => MetaIn_Status_load_l_empty_n,
        if_read => Block_Mat_exit1516_p_U0_ap_ready);

    imgInput_data_V_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_U0_img_data_V_din,
        if_full_n => imgInput_data_V_full_n,
        if_write => AXIvideo2xfMat_U0_img_data_V_write,
        if_dout => imgInput_data_V_dout,
        if_empty_n => imgInput_data_V_empty_n,
        if_read => canny_accel_U0_p_src_data_V_read);

    imgInput_rows_c25_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_U0_img_rows_out_din,
        if_full_n => imgInput_rows_c25_full_n,
        if_write => AXIvideo2xfMat_U0_img_rows_out_write,
        if_dout => imgInput_rows_c25_dout,
        if_empty_n => imgInput_rows_c25_empty_n,
        if_read => canny_accel_U0_p_src_rows_read);

    imgInput_cols_c26_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_U0_img_cols_out_din,
        if_full_n => imgInput_cols_c26_full_n,
        if_write => AXIvideo2xfMat_U0_img_cols_out_write,
        if_dout => imgInput_cols_c26_dout,
        if_empty_n => imgInput_cols_c26_empty_n,
        if_read => canny_accel_U0_p_src_cols_read);

    imgFiltered_data_V_U : component fifo_w64_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => canny_accel_U0_p_dst1_data_V_din,
        if_full_n => imgFiltered_data_V_full_n,
        if_write => canny_accel_U0_p_dst1_data_V_write,
        if_dout => imgFiltered_data_V_dout,
        if_empty_n => imgFiltered_data_V_empty_n,
        if_read => canny_accel_U0_p_dst1_data_V_read);

    imgOutput_data_V_U : component fifo_w57_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => canny_accel_U0_p_dst2_data_V_din,
        if_full_n => imgOutput_data_V_full_n,
        if_write => canny_accel_U0_p_dst2_data_V_write,
        if_dout => imgOutput_data_V_dout,
        if_empty_n => imgOutput_data_V_empty_n,
        if_read => xfMat2AXIvideo_U0_img_data_V_read);

    imgOutput_rows_c27_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => canny_accel_U0_p_dst2_rows_out_din,
        if_full_n => imgOutput_rows_c27_full_n,
        if_write => canny_accel_U0_p_dst2_rows_out_write,
        if_dout => imgOutput_rows_c27_dout,
        if_empty_n => imgOutput_rows_c27_empty_n,
        if_read => xfMat2AXIvideo_U0_img_rows_read);

    imgOutput_cols_c28_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => canny_accel_U0_p_dst2_cols_out_din,
        if_full_n => imgOutput_cols_c28_full_n,
        if_write => canny_accel_U0_p_dst2_cols_out_write,
        if_dout => imgOutput_cols_c28_dout,
        if_empty_n => imgOutput_cols_c28_empty_n,
        if_read => xfMat2AXIvideo_U0_img_cols_read);

    start_for_canny_aYie_U : component start_for_canny_aYie
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_canny_accel_U0_din,
        if_full_n => start_for_canny_accel_U0_full_n,
        if_write => Block_Mat_exit15_pro_U0_start_write,
        if_dout => start_for_canny_accel_U0_dout,
        if_empty_n => start_for_canny_accel_U0_empty_n,
        if_read => canny_accel_U0_ap_ready);

    start_for_xfMat2AZio_U : component start_for_xfMat2AZio
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xfMat2AXIvideo_U0_din,
        if_full_n => start_for_xfMat2AXIvideo_U0_full_n,
        if_write => canny_accel_U0_start_write,
        if_dout => start_for_xfMat2AXIvideo_U0_dout,
        if_empty_n => start_for_xfMat2AXIvideo_U0_empty_n,
        if_read => xfMat2AXIvideo_U0_ap_ready);





    ap_sync_reg_AXIvideo2xfMat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2xfMat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2xfMat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2xfMat_U0_ap_ready <= ap_sync_AXIvideo2xfMat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_Mat_exit15_pro_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_Mat_exit15_pro_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_Mat_exit15_pro_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_Mat_exit15_pro_U0_ap_ready <= ap_sync_Block_Mat_exit15_pro_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_DsizeL_V_load_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_DsizeL_V_load <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_DsizeL_V_load <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_DsizeL_V_load <= ap_sync_channel_write_MetaIn_DsizeL_V_load;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_Flags_load_lo_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_Flags_load_lo <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_Flags_load_lo <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_Flags_load_lo <= ap_sync_channel_write_MetaIn_Flags_load_lo;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_ModPixelF_loa_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_ModPixelF_loa <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_ModPixelF_loa <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_ModPixelF_loa <= ap_sync_channel_write_MetaIn_ModPixelF_loa;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_PixProcessing_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_PixProcessing <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_PixProcessing <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_PixProcessing <= ap_sync_channel_write_MetaIn_PixProcessing;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_PixelF_load_l_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_PixelF_load_l <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_PixelF_load_l <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_PixelF_load_l <= ap_sync_channel_write_MetaIn_PixelF_load_l;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_SourceTag_loa_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_SourceTag_loa <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_SourceTag_loa <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_SourceTag_loa <= ap_sync_channel_write_MetaIn_SourceTag_loa;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_Status_load_l_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_Status_load_l <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_Status_load_l <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_Status_load_l <= ap_sync_channel_write_MetaIn_Status_load_l;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_StreamId_load_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_StreamId_load <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_StreamId_load <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_StreamId_load <= ap_sync_channel_write_MetaIn_StreamId_load;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_TapG_load_loc_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_TapG_load_loc <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_TapG_load_loc <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_TapG_load_loc <= ap_sync_channel_write_MetaIn_TapG_load_loc;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_Timestamp_loa_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_Timestamp_loa <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_Timestamp_loa <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_Timestamp_loa <= ap_sync_channel_write_MetaIn_Timestamp_loa;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_Xoffs_V_load_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_Xoffs_V_load_s <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_Xoffs_V_load_s <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_Xoffs_V_load_s <= ap_sync_channel_write_MetaIn_Xoffs_V_load_s;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_Xsize_V_load_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_Xsize_V_load_s <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_Xsize_V_load_s <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_Xsize_V_load_s <= ap_sync_channel_write_MetaIn_Xsize_V_load_s;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_Yoffs_V_load_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_Yoffs_V_load_s <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_Yoffs_V_load_s <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_Yoffs_V_load_s <= ap_sync_channel_write_MetaIn_Yoffs_V_load_s;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_MetaIn_Ysize_V_load_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_MetaIn_Ysize_V_load_s <= ap_const_logic_0;
            else
                if (((Block_Mat_exit15_pro_U0_ap_done and Block_Mat_exit15_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_MetaIn_Ysize_V_load_s <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_MetaIn_Ysize_V_load_s <= ap_sync_channel_write_MetaIn_Ysize_V_load_s;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2xfMat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = AXIvideo2xfMat_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                AXIvideo2xfMat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2xfMat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AXIvideo2xfMat_U0_ap_ready))) then 
                AXIvideo2xfMat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2xfMat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_Mat_exit15_pro_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_Mat_exit15_pro_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_Mat_exit15_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit15_pro_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_Mat_exit15_pro_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_Mat_exit15_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit15_pro_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIvideo2xfMat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2xfMat_U0_ap_start <= ((ap_sync_reg_AXIvideo2xfMat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    AXIvideo2xfMat_U0_start_full_n <= ap_const_logic_1;
    AXIvideo2xfMat_U0_start_write <= ap_const_logic_0;
    Block_Mat_exit1516_p_U0_ap_continue <= ap_sync_done;
    Block_Mat_exit1516_p_U0_ap_start <= (MetaIn_Ysize_V_load_s_empty_n and MetaIn_Yoffs_V_load_s_empty_n and MetaIn_Xsize_V_load_s_empty_n and MetaIn_Xoffs_V_load_s_empty_n and MetaIn_Timestamp_loa_empty_n and MetaIn_TapG_load_loc_empty_n and MetaIn_StreamId_load_empty_n and MetaIn_Status_load_l_empty_n and MetaIn_SourceTag_loa_empty_n and MetaIn_PixelF_load_l_empty_n and MetaIn_PixProcessing_empty_n and MetaIn_ModPixelF_loa_empty_n and MetaIn_Flags_load_lo_empty_n and MetaIn_DsizeL_V_load_empty_n);
    Block_Mat_exit1516_p_U0_start_full_n <= ap_const_logic_1;
    Block_Mat_exit1516_p_U0_start_write <= ap_const_logic_0;
    Block_Mat_exit15_pro_U0_ap_continue <= (ap_sync_channel_write_MetaIn_Ysize_V_load_s and ap_sync_channel_write_MetaIn_Yoffs_V_load_s and ap_sync_channel_write_MetaIn_Xsize_V_load_s and ap_sync_channel_write_MetaIn_Xoffs_V_load_s and ap_sync_channel_write_MetaIn_Timestamp_loa and ap_sync_channel_write_MetaIn_TapG_load_loc and ap_sync_channel_write_MetaIn_StreamId_load and ap_sync_channel_write_MetaIn_Status_load_l and ap_sync_channel_write_MetaIn_SourceTag_loa and ap_sync_channel_write_MetaIn_PixelF_load_l and ap_sync_channel_write_MetaIn_PixProcessing and ap_sync_channel_write_MetaIn_ModPixelF_loa and ap_sync_channel_write_MetaIn_Flags_load_lo and ap_sync_channel_write_MetaIn_DsizeL_V_load);
    Block_Mat_exit15_pro_U0_ap_start <= ((ap_sync_reg_Block_Mat_exit15_pro_U0_ap_ready xor ap_const_logic_1) and ap_start);
    MetaOut_DsizeL_V <= Block_Mat_exit1516_p_U0_MetaOut_DsizeL_V;
    MetaOut_Flags <= Block_Mat_exit1516_p_U0_MetaOut_Flags;
    MetaOut_ModPixelF <= Block_Mat_exit1516_p_U0_MetaOut_ModPixelF;
    MetaOut_PixProcessingFlgs <= Block_Mat_exit1516_p_U0_MetaOut_PixProcessingFlgs;
    MetaOut_PixelF <= Block_Mat_exit1516_p_U0_MetaOut_PixelF;
    MetaOut_SourceTag <= Block_Mat_exit1516_p_U0_MetaOut_SourceTag;
    MetaOut_Status <= Block_Mat_exit1516_p_U0_MetaOut_Status;
    MetaOut_StreamId <= Block_Mat_exit1516_p_U0_MetaOut_StreamId;
    MetaOut_TapG <= Block_Mat_exit1516_p_U0_MetaOut_TapG;
    MetaOut_Timestamp <= Block_Mat_exit1516_p_U0_MetaOut_Timestamp;
    MetaOut_Xoffs_V <= Block_Mat_exit1516_p_U0_MetaOut_Xoffs_V;
    MetaOut_Xsize_V <= Block_Mat_exit1516_p_U0_MetaOut_Xsize_V;
    MetaOut_Yoffs_V <= Block_Mat_exit1516_p_U0_MetaOut_Yoffs_V;
    MetaOut_Ysize_V <= Block_Mat_exit1516_p_U0_MetaOut_Ysize_V;
    ap_channel_done_MetaIn_DsizeL_V_load <= ((ap_sync_reg_channel_write_MetaIn_DsizeL_V_load xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_Flags_load_lo <= ((ap_sync_reg_channel_write_MetaIn_Flags_load_lo xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_ModPixelF_loa <= ((ap_sync_reg_channel_write_MetaIn_ModPixelF_loa xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_PixProcessing <= ((ap_sync_reg_channel_write_MetaIn_PixProcessing xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_PixelF_load_l <= ((ap_sync_reg_channel_write_MetaIn_PixelF_load_l xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_SourceTag_loa <= ((ap_sync_reg_channel_write_MetaIn_SourceTag_loa xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_Status_load_l <= ((ap_sync_reg_channel_write_MetaIn_Status_load_l xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_StreamId_load <= ((ap_sync_reg_channel_write_MetaIn_StreamId_load xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_TapG_load_loc <= ((ap_sync_reg_channel_write_MetaIn_TapG_load_loc xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_Timestamp_loa <= ((ap_sync_reg_channel_write_MetaIn_Timestamp_loa xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_Xoffs_V_load_s <= ((ap_sync_reg_channel_write_MetaIn_Xoffs_V_load_s xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_Xsize_V_load_s <= ((ap_sync_reg_channel_write_MetaIn_Xsize_V_load_s xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_Yoffs_V_load_s <= ((ap_sync_reg_channel_write_MetaIn_Yoffs_V_load_s xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_channel_done_MetaIn_Ysize_V_load_s <= ((ap_sync_reg_channel_write_MetaIn_Ysize_V_load_s xor ap_const_logic_1) and Block_Mat_exit15_pro_U0_ap_done);
    ap_done <= ap_sync_done;
    ap_idle <= (xfMat2AXIvideo_U0_ap_idle and (ap_const_logic_1 xor MetaIn_Status_load_l_empty_n) and (ap_const_logic_1 xor MetaIn_ModPixelF_loa_empty_n) and (ap_const_logic_1 xor MetaIn_PixProcessing_empty_n) and (ap_const_logic_1 xor MetaIn_Timestamp_loa_empty_n) and (ap_const_logic_1 xor MetaIn_Flags_load_lo_empty_n) and (ap_const_logic_1 xor MetaIn_TapG_load_loc_empty_n) and (ap_const_logic_1 xor MetaIn_PixelF_load_l_empty_n) and (ap_const_logic_1 xor MetaIn_DsizeL_V_load_empty_n) and (ap_const_logic_1 xor MetaIn_Yoffs_V_load_s_empty_n) and (ap_const_logic_1 xor MetaIn_Ysize_V_load_s_empty_n) and (ap_const_logic_1 xor MetaIn_Xoffs_V_load_s_empty_n) and (ap_const_logic_1 xor MetaIn_Xsize_V_load_s_empty_n) and (ap_const_logic_1 xor MetaIn_SourceTag_loa_empty_n) and (ap_const_logic_1 xor MetaIn_StreamId_load_empty_n) and canny_accel_U0_ap_idle and Block_Mat_exit15_pro_U0_ap_idle and Block_Mat_exit1516_p_U0_ap_idle and AXIvideo2xfMat_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2xfMat_U0_ap_ready <= (ap_sync_reg_AXIvideo2xfMat_U0_ap_ready or AXIvideo2xfMat_U0_ap_ready);
    ap_sync_Block_Mat_exit15_pro_U0_ap_ready <= (ap_sync_reg_Block_Mat_exit15_pro_U0_ap_ready or Block_Mat_exit15_pro_U0_ap_ready);
    ap_sync_channel_write_MetaIn_DsizeL_V_load <= ((ap_channel_done_MetaIn_DsizeL_V_load and MetaIn_DsizeL_V_load_full_n) or ap_sync_reg_channel_write_MetaIn_DsizeL_V_load);
    ap_sync_channel_write_MetaIn_Flags_load_lo <= ((ap_channel_done_MetaIn_Flags_load_lo and MetaIn_Flags_load_lo_full_n) or ap_sync_reg_channel_write_MetaIn_Flags_load_lo);
    ap_sync_channel_write_MetaIn_ModPixelF_loa <= ((ap_channel_done_MetaIn_ModPixelF_loa and MetaIn_ModPixelF_loa_full_n) or ap_sync_reg_channel_write_MetaIn_ModPixelF_loa);
    ap_sync_channel_write_MetaIn_PixProcessing <= ((ap_channel_done_MetaIn_PixProcessing and MetaIn_PixProcessing_full_n) or ap_sync_reg_channel_write_MetaIn_PixProcessing);
    ap_sync_channel_write_MetaIn_PixelF_load_l <= ((ap_channel_done_MetaIn_PixelF_load_l and MetaIn_PixelF_load_l_full_n) or ap_sync_reg_channel_write_MetaIn_PixelF_load_l);
    ap_sync_channel_write_MetaIn_SourceTag_loa <= ((ap_channel_done_MetaIn_SourceTag_loa and MetaIn_SourceTag_loa_full_n) or ap_sync_reg_channel_write_MetaIn_SourceTag_loa);
    ap_sync_channel_write_MetaIn_Status_load_l <= ((ap_channel_done_MetaIn_Status_load_l and MetaIn_Status_load_l_full_n) or ap_sync_reg_channel_write_MetaIn_Status_load_l);
    ap_sync_channel_write_MetaIn_StreamId_load <= ((ap_channel_done_MetaIn_StreamId_load and MetaIn_StreamId_load_full_n) or ap_sync_reg_channel_write_MetaIn_StreamId_load);
    ap_sync_channel_write_MetaIn_TapG_load_loc <= ((ap_channel_done_MetaIn_TapG_load_loc and MetaIn_TapG_load_loc_full_n) or ap_sync_reg_channel_write_MetaIn_TapG_load_loc);
    ap_sync_channel_write_MetaIn_Timestamp_loa <= ((ap_channel_done_MetaIn_Timestamp_loa and MetaIn_Timestamp_loa_full_n) or ap_sync_reg_channel_write_MetaIn_Timestamp_loa);
    ap_sync_channel_write_MetaIn_Xoffs_V_load_s <= ((ap_channel_done_MetaIn_Xoffs_V_load_s and MetaIn_Xoffs_V_load_s_full_n) or ap_sync_reg_channel_write_MetaIn_Xoffs_V_load_s);
    ap_sync_channel_write_MetaIn_Xsize_V_load_s <= ((ap_channel_done_MetaIn_Xsize_V_load_s and MetaIn_Xsize_V_load_s_full_n) or ap_sync_reg_channel_write_MetaIn_Xsize_V_load_s);
    ap_sync_channel_write_MetaIn_Yoffs_V_load_s <= ((ap_channel_done_MetaIn_Yoffs_V_load_s and MetaIn_Yoffs_V_load_s_full_n) or ap_sync_reg_channel_write_MetaIn_Yoffs_V_load_s);
    ap_sync_channel_write_MetaIn_Ysize_V_load_s <= ((ap_channel_done_MetaIn_Ysize_V_load_s and MetaIn_Ysize_V_load_s_full_n) or ap_sync_reg_channel_write_MetaIn_Ysize_V_load_s);
    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (xfMat2AXIvideo_U0_ap_done and Block_Mat_exit1516_p_U0_ap_done);
    ap_sync_ready <= (ap_sync_Block_Mat_exit15_pro_U0_ap_ready and ap_sync_AXIvideo2xfMat_U0_ap_ready);
    canny_accel_U0_ap_continue <= ap_const_logic_1;
    canny_accel_U0_ap_start <= start_for_canny_accel_U0_empty_n;
    p_dst_TDATA <= xfMat2AXIvideo_U0_p_dst_TDATA;
    p_dst_TDEST <= xfMat2AXIvideo_U0_p_dst_TDEST;
    p_dst_TID <= xfMat2AXIvideo_U0_p_dst_TID;
    p_dst_TKEEP <= xfMat2AXIvideo_U0_p_dst_TKEEP;
    p_dst_TLAST <= xfMat2AXIvideo_U0_p_dst_TLAST;
    p_dst_TSTRB <= xfMat2AXIvideo_U0_p_dst_TSTRB;
    p_dst_TUSER <= xfMat2AXIvideo_U0_p_dst_TUSER;
    p_dst_TVALID <= xfMat2AXIvideo_U0_p_dst_TVALID;
    p_src_TREADY <= AXIvideo2xfMat_U0_p_src_TREADY;
    start_for_canny_accel_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xfMat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    xfMat2AXIvideo_U0_ap_continue <= ap_sync_done;
    xfMat2AXIvideo_U0_ap_start <= start_for_xfMat2AXIvideo_U0_empty_n;
    xfMat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    xfMat2AXIvideo_U0_start_write <= ap_const_logic_0;
end behav;
