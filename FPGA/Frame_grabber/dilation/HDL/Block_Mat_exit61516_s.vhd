-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_Mat_exit61516_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    MetaOut_StreamId : OUT STD_LOGIC_VECTOR (7 downto 0);
    MetaOut_StreamId_ap_vld : OUT STD_LOGIC;
    MetaOut_SourceTag : OUT STD_LOGIC_VECTOR (15 downto 0);
    MetaOut_SourceTag_ap_vld : OUT STD_LOGIC;
    MetaOut_Xsize_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_Xsize_V_ap_vld : OUT STD_LOGIC;
    MetaOut_Xoffs_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_Xoffs_V_ap_vld : OUT STD_LOGIC;
    MetaOut_Ysize_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_Ysize_V_ap_vld : OUT STD_LOGIC;
    MetaOut_Yoffs_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_Yoffs_V_ap_vld : OUT STD_LOGIC;
    MetaOut_DsizeL_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    MetaOut_DsizeL_V_ap_vld : OUT STD_LOGIC;
    MetaOut_PixelF : OUT STD_LOGIC_VECTOR (15 downto 0);
    MetaOut_PixelF_ap_vld : OUT STD_LOGIC;
    MetaOut_TapG : OUT STD_LOGIC_VECTOR (15 downto 0);
    MetaOut_TapG_ap_vld : OUT STD_LOGIC;
    MetaOut_Flags : OUT STD_LOGIC_VECTOR (7 downto 0);
    MetaOut_Flags_ap_vld : OUT STD_LOGIC;
    MetaOut_Timestamp : OUT STD_LOGIC_VECTOR (31 downto 0);
    MetaOut_Timestamp_ap_vld : OUT STD_LOGIC;
    MetaOut_PixProcessingFlgs : OUT STD_LOGIC_VECTOR (7 downto 0);
    MetaOut_PixProcessingFlgs_ap_vld : OUT STD_LOGIC;
    MetaOut_ModPixelF : OUT STD_LOGIC_VECTOR (31 downto 0);
    MetaOut_ModPixelF_ap_vld : OUT STD_LOGIC;
    MetaOut_Status : OUT STD_LOGIC_VECTOR (31 downto 0);
    MetaOut_Status_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Block_Mat_exit61516_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal guard_variable_for_m : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal MetaTmp_StreamId : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal MetaTmp_SourceTag : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal MetaTmp_Xsize_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaTmp_Xoffs_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaTmp_Ysize_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaTmp_Yoffs_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaTmp_DsizeL_V : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal MetaTmp_PixelF : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal MetaTmp_TapG : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal MetaTmp_Flags : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal MetaTmp_Timestamp : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal MetaTmp_PixProcessin : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal MetaTmp_ModPixelF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal MetaTmp_Status : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state1 : BOOLEAN;
    signal guard_variable_for_m_1_load_fu_286_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (guard_variable_for_m_1_load_fu_286_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                MetaTmp_DsizeL_V <= p_read6;
                MetaTmp_Flags <= p_read9;
                MetaTmp_ModPixelF <= p_read12;
                MetaTmp_PixProcessin <= p_read11;
                MetaTmp_PixelF <= p_read7;
                MetaTmp_SourceTag <= p_read1;
                MetaTmp_Status <= p_read13;
                MetaTmp_StreamId <= p_read;
                MetaTmp_TapG <= p_read8;
                MetaTmp_Timestamp <= p_read10;
                MetaTmp_Xoffs_V <= p_read3;
                MetaTmp_Xsize_V <= p_read2;
                MetaTmp_Yoffs_V <= p_read5;
                MetaTmp_Ysize_V <= p_read4;
                guard_variable_for_m <= ap_const_lv1_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    MetaOut_DsizeL_V <= MetaTmp_DsizeL_V;

    MetaOut_DsizeL_V_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_DsizeL_V_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_DsizeL_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_Flags <= MetaTmp_Flags;

    MetaOut_Flags_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_Flags_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_Flags_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_ModPixelF <= MetaTmp_ModPixelF;

    MetaOut_ModPixelF_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_ModPixelF_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_ModPixelF_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_PixProcessingFlgs <= MetaTmp_PixProcessin;

    MetaOut_PixProcessingFlgs_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_PixProcessingFlgs_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_PixProcessingFlgs_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_PixelF <= MetaTmp_PixelF;

    MetaOut_PixelF_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_PixelF_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_PixelF_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_SourceTag <= MetaTmp_SourceTag;

    MetaOut_SourceTag_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_SourceTag_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_SourceTag_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_Status <= MetaTmp_Status;

    MetaOut_Status_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_Status_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_Status_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_StreamId <= MetaTmp_StreamId;

    MetaOut_StreamId_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_StreamId_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_StreamId_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_TapG <= MetaTmp_TapG;

    MetaOut_TapG_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_TapG_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_TapG_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_Timestamp <= MetaTmp_Timestamp;

    MetaOut_Timestamp_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_Timestamp_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_Timestamp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_Xoffs_V <= MetaTmp_Xoffs_V;

    MetaOut_Xoffs_V_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_Xoffs_V_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_Xoffs_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_Xsize_V <= MetaTmp_Xsize_V;

    MetaOut_Xsize_V_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_Xsize_V_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_Xsize_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_Yoffs_V <= MetaTmp_Yoffs_V;

    MetaOut_Yoffs_V_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_Yoffs_V_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_Yoffs_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    MetaOut_Ysize_V <= MetaTmp_Ysize_V;

    MetaOut_Ysize_V_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MetaOut_Ysize_V_ap_vld <= ap_const_logic_1;
        else 
            MetaOut_Ysize_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    guard_variable_for_m_1_load_fu_286_p1 <= guard_variable_for_m;
end behav;
